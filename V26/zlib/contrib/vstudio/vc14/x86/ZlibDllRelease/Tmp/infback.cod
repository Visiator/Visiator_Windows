; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	c:\prj\visiator_windows\v26\zlib\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
EXTRN	_inflate_fast:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 c4 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 b1 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 9b 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 90 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 81 00 00
	00		 ja	 $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;
; 49   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 70   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 66   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	5e		 pop	 esi

; 70   : }

  000c6	5d		 pop	 ebp
  000c7	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx

; 42   :         return Z_STREAM_ERROR;

  000cc	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000d1	5e		 pop	 esi

; 70   : }

  000d2	5d		 pop	 ebp
  000d3	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000d6	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000db	5e		 pop	 esi

; 70   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
_from$1$ = -56						; size = 4
tv3598 = -56						; size = 4
tv3578 = -56						; size = 4
tv3577 = -56						; size = 4
$T1 = -52						; size = 4
$T2 = -52						; size = 4
$T3 = -52						; size = 4
tv3645 = -52						; size = 4
tv3604 = -52						; size = 4
_copy$2$ = -52						; size = 4
$T4 = -48						; size = 4
tv3644 = -48						; size = 4
tv3591 = -48						; size = 4
tv3550 = -48						; size = 4
tv3549 = -48						; size = 4
$T5 = -44						; size = 4
tv3601 = -40						; size = 4
$T6 = -36						; size = 4
tv3599 = -36						; size = 4
$T7 = -32						; size = 4
$T8 = -32						; size = 4
_here$1$ = -28						; size = 4
_copy$1$ = -28						; size = 4
_last$ = -28						; size = 4
_put$1$ = -24						; size = 4
_left$1$ = -20						; size = 4
$T9 = -16						; size = 4
_bits$1$ = -16						; size = 4
_state$1$ = -12						; size = 4
_hold$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 38	 sub	 esp, 56			; 00000038H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 a3 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 95 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00026	53		 push	 ebx

; 279  :     state->mode = TYPE;

  00027	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 281  :     state->whave = 0;

  00035	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	85 c0		 test	 eax, eax

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	74 05		 je	 SHORT $LN343@inflateBac
  00047	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004a	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004c	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  0004e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00051	33 ff		 xor	 edi, edi
  00053	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00056	33 db		 xor	 ebx, ebx

; 287  :     left = state->wsize;

  00058	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005b	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00069	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0006c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006f	0f 87 dc 0c 00
	00		 ja	 $LN341@inflateBac
$LN496@inflateBac:
  00075	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN478@inflateBac[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN498@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  00086	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0008a	74 1b		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  0008c	8b cb		 mov	 ecx, ebx

; 296  :                 state->mode = DONE;

  0008e	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  00095	83 e1 07	 and	 ecx, 7
  00098	d3 ef		 shr	 edi, cl
  0009a	2b d9		 sub	 ebx, ecx
  0009c	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0009f	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 297  :                 break;

  000a2	e9 99 0c 00 00	 jmp	 $LN485@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000a7	83 fb 03	 cmp	 ebx, 3
  000aa	73 3b		 jae	 SHORT $LN10@inflateBac
  000ac	0f 1f 40 00	 npad	 4
$LL13@inflateBac:
  000b0	85 f6		 test	 esi, esi
  000b2	75 15		 jne	 SHORT $LN18@inflateBac
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bc	8b f0		 mov	 esi, eax
  000be	83 c4 08	 add	 esp, 8
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 a3 0c 00
	00		 je	 $LN369@inflateBac
$LN18@inflateBac:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000cc	8b cb		 mov	 ecx, ebx
  000ce	83 c3 08	 add	 ebx, 8
  000d1	4e		 dec	 esi
  000d2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000d5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000d8	d3 e0		 shl	 eax, cl
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000dd	03 f8		 add	 edi, eax
  000df	83 fb 03	 cmp	 ebx, 3
  000e2	72 cc		 jb	 SHORT $LL13@inflateBac
  000e4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000e7	8b c7		 mov	 eax, edi

; 301  :             DROPBITS(1);

  000e9	d1 ef		 shr	 edi, 1
  000eb	83 e0 01	 and	 eax, 1
  000ee	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 302  :             switch (BITS(2)) {

  000f1	8b c7		 mov	 eax, edi
  000f3	83 e0 03	 and	 eax, 3
  000f6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN499@inflateBac[eax*4]
$LN259@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  000fd	c1 ef 02	 shr	 edi, 2
  00100	83 eb 03	 sub	 ebx, 3
  00103	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H
  0010a	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0010d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00110	e9 2b 0c 00 00	 jmp	 $LN485@inflateBac
$LN260@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;
; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00115	8b ca		 mov	 ecx, edx
  00117	e8 00 00 00 00	 call	 _fixedtables

; 322  :             }
; 323  :             DROPBITS(2);

  0011c	c1 ef 02	 shr	 edi, 2
  0011f	83 eb 03	 sub	 ebx, 3
  00122	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  00129	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0012c	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  0012f	e9 0c 0c 00 00	 jmp	 $LN485@inflateBac
$LN261@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00134	c1 ef 02	 shr	 edi, 2
  00137	83 eb 03	 sub	 ebx, 3
  0013a	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H
  00141	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00144	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00147	e9 f4 0b 00 00	 jmp	 $LN485@inflateBac
$LN262@inflateBac:

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;
; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0014c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0014f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 321  :                 state->mode = BAD;

  00156	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  0015d	c1 ef 02	 shr	 edi, 2
  00160	83 eb 03	 sub	 ebx, 3
  00163	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00166	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00169	e9 d2 0b 00 00	 jmp	 $LN485@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  0016e	8b cb		 mov	 ecx, ebx
  00170	83 e1 07	 and	 ecx, 7
  00173	2b d9		 sub	 ebx, ecx
  00175	d3 ef		 shr	 edi, cl
  00177	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0017a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 329  :             NEEDBITS(32);

  0017d	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00180	73 3c		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00182	85 f6		 test	 esi, esi
  00184	75 17		 jne	 SHORT $LN40@inflateBac
  00186	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00189	50		 push	 eax
  0018a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0018d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00190	8b f0		 mov	 esi, eax
  00192	83 c4 08	 add	 esp, 8
  00195	85 f6		 test	 esi, esi
  00197	0f 84 cf 0b 00
	00		 je	 $LN369@inflateBac
$LN40@inflateBac:
  0019d	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  001a0	8b cb		 mov	 ecx, ebx
  001a2	83 c3 08	 add	 ebx, 8
  001a5	4e		 dec	 esi
  001a6	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  001a9	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001ac	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  001af	d3 e0		 shl	 eax, cl
  001b1	03 f8		 add	 edi, eax
  001b3	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001b6	83 fb 20	 cmp	 ebx, 32			; 00000020H
  001b9	72 c7		 jb	 SHORT $LL35@inflateBac
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001be	8b c7		 mov	 eax, edi
  001c0	0f b7 cf	 movzx	 ecx, di
  001c3	f7 d0		 not	 eax
  001c5	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  001c8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cb	3b c8		 cmp	 ecx, eax
  001cd	74 16		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001d2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 332  :                 state->mode = BAD;

  001d9	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 333  :                 break;

  001e0	e9 5b 0b 00 00	 jmp	 $LN485@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001e5	33 ff		 xor	 edi, edi
  001e7	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  001ea	33 db		 xor	 ebx, ebx
  001ec	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001ef	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001f2	85 c9		 test	 ecx, ecx
  001f4	0f 84 95 00 00
	00		 je	 $LN47@inflateBac
  001fa	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  001fd	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00200	85 f6		 test	 esi, esi
  00202	75 1d		 jne	 SHORT $LN48@inflateBac
  00204	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00207	50		 push	 eax
  00208	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0020b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0020e	8b f0		 mov	 esi, eax
  00210	83 c4 08	 add	 esp, 8
  00213	85 f6		 test	 esi, esi
  00215	0f 84 5f 0b 00
	00		 je	 $LN371@inflateBac
  0021b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0021e	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00221	85 c0		 test	 eax, eax
  00223	75 22		 jne	 SHORT $LN51@inflateBac
  00225	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00228	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0022b	51		 push	 ecx
  0022c	50		 push	 eax
  0022d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00230	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00233	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00236	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00239	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0023c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023f	85 c0		 test	 eax, eax
  00241	0f 85 2c 0b 00
	00		 jne	 $LN372@inflateBac
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;
; 346  :                 if (copy > left) copy = left;

  00247	39 75 dc	 cmp	 DWORD PTR $T6[ebp], esi
  0024a	8b c6		 mov	 eax, esi

; 347  :                 zmemcpy(put, next, copy);

  0024c	8b 7d ec	 mov	 edi, DWORD PTR _left$1$[ebp]
  0024f	0f 46 45 dc	 cmovbe	 eax, DWORD PTR $T6[ebp]
  00253	3b c7		 cmp	 eax, edi
  00255	0f 46 f8	 cmovbe	 edi, eax
  00258	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  0025b	57		 push	 edi
  0025c	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00265	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	01 7d fc	 add	 DWORD PTR _next$[ebp], edi
  0026e	2b f7		 sub	 esi, edi
  00270	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00273	01 7d e8	 add	 DWORD PTR _put$1$[ebp], edi
  00276	2b c7		 sub	 eax, edi
  00278	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  0027b	2b cf		 sub	 ecx, edi
  0027d	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  00280	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  00283	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00286	0f 85 74 ff ff
	ff		 jne	 $LL46@inflateBac
  0028c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  0028f	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 356  :             break;

  00296	e9 a5 0a 00 00	 jmp	 $LN485@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  0029b	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0029e	73 37		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  002a0	85 f6		 test	 esi, esi
  002a2	75 15		 jne	 SHORT $LN62@inflateBac
  002a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	83 c4 08	 add	 esp, 8
  002b1	85 f6		 test	 esi, esi
  002b3	0f 84 b3 0a 00
	00		 je	 $LN369@inflateBac
$LN62@inflateBac:
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  002bc	8b cb		 mov	 ecx, ebx
  002be	83 c3 08	 add	 ebx, 8
  002c1	4e		 dec	 esi
  002c2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  002c5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  002c8	d3 e0		 shl	 eax, cl
  002ca	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  002cd	03 f8		 add	 edi, eax
  002cf	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002d2	72 cc		 jb	 SHORT $LL57@inflateBac
  002d4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002d7	8b cf		 mov	 ecx, edi

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002d9	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002dc	c1 ef 05	 shr	 edi, 5
  002df	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002e2	8b c7		 mov	 eax, edi
  002e4	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  002e7	83 e0 1f	 and	 eax, 31			; 0000001fH
  002ea	c1 ef 05	 shr	 edi, 5
  002ed	40		 inc	 eax
  002ee	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002f4	89 45 cc	 mov	 DWORD PTR tv3645[ebp], eax
  002f7	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002fa	8b c7		 mov	 eax, edi
  002fc	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ff	c1 ef 04	 shr	 edi, 4
  00302	83 c0 04	 add	 eax, 4
  00305	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  00308	89 45 d0	 mov	 DWORD PTR tv3644[ebp], eax
  0030b	89 42 60	 mov	 DWORD PTR [edx+96], eax
  0030e	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  00311	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  00317	0f 87 14 05 00
	00		 ja	 $LN277@inflateBac
  0031d	83 7d cc 1e	 cmp	 DWORD PTR tv3645[ebp], 30 ; 0000001eH
  00321	0f 87 0a 05 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00327	33 c0		 xor	 eax, eax
  00329	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 378  :             while (state->have < state->ncode) {

  00330	39 45 d0	 cmp	 DWORD PTR tv3644[ebp], eax
  00333	76 6e		 jbe	 SHORT $LN352@inflateBac
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00335	83 fb 03	 cmp	 ebx, 3
  00338	73 3d		 jae	 SHORT $LN76@inflateBac
  0033a	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  0033d	0f 1f 00	 npad	 3
$LL79@inflateBac:
  00340	85 f6		 test	 esi, esi
  00342	75 1a		 jne	 SHORT $LN84@inflateBac
  00344	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00347	50		 push	 eax
  00348	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0034b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0034e	8b f0		 mov	 esi, eax
  00350	83 c4 08	 add	 esp, 8
  00353	85 f6		 test	 esi, esi
  00355	0f 84 11 0a 00
	00		 je	 $LN369@inflateBac
  0035b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  0035e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00361	8b cb		 mov	 ecx, ebx
  00363	d3 e0		 shl	 eax, cl
  00365	42		 inc	 edx
  00366	83 c3 08	 add	 ebx, 8
  00369	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0036c	4e		 dec	 esi
  0036d	03 f8		 add	 edi, eax
  0036f	83 fb 03	 cmp	 ebx, 3
  00372	72 cc		 jb	 SHORT $LL79@inflateBac
  00374	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00377	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0037a	8b cf		 mov	 ecx, edi
  0037c	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  0037f	c1 ef 03	 shr	 edi, 3
  00382	83 eb 03	 sub	 ebx, 3
  00385	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00388	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0038b	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00393	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  00398	ff 42 6c	 inc	 DWORD PTR [edx+108]
  0039b	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0039e	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  003a1	72 92		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  003a3	83 f8 13	 cmp	 eax, 19			; 00000013H
  003a6	73 23		 jae	 SHORT $LN91@inflateBac
  003a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  003b0	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  003b3	33 c9		 xor	 ecx, ecx
  003b5	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  003bd	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  003c2	ff 42 6c	 inc	 DWORD PTR [edx+108]
  003c5	83 7a 6c 13	 cmp	 DWORD PTR [edx+108], 19	; 00000013H
  003c9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003cb	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003d1	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003d8	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  003db	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003de	89 01		 mov	 DWORD PTR [ecx], eax
  003e0	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003e3	89 4d cc	 mov	 DWORD PTR tv3604[ebp], ecx

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003e6	8d 8a f4 02 00
	00		 lea	 ecx, DWORD PTR [edx+756]
  003ec	51		 push	 ecx
  003ed	89 4d dc	 mov	 DWORD PTR tv3599[ebp], ecx
  003f0	83 c2 74	 add	 edx, 116		; 00000074H
  003f3	8b 4d cc	 mov	 ecx, DWORD PTR tv3604[ebp]
  003f6	50		 push	 eax
  003f7	51		 push	 ecx
  003f8	6a 13		 push	 19			; 00000013H
  003fa	33 c9		 xor	 ecx, ecx
  003fc	89 45 d8	 mov	 DWORD PTR tv3601[ebp], eax
  003ff	89 55 c8	 mov	 DWORD PTR tv3598[ebp], edx
  00402	e8 00 00 00 00	 call	 _inflate_table

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  00407	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0040a	83 c4 10	 add	 esp, 16			; 00000010H
  0040d	85 c0		 test	 eax, eax
  0040f	74 16		 je	 SHORT $LN280@inflateBac

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  00411	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00414	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 392  :                 state->mode = BAD;

  0041b	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 393  :                 break;

  00422	e9 19 09 00 00	 jmp	 $LN485@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00427	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0042a	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00431	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00434	0f 84 90 02 00
	00		 je	 $LN93@inflateBac
  0043a	66 0f 1f 44 00
	00		 npad	 6
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00440	8b 45 d8	 mov	 eax, DWORD PTR tv3601[ebp]
  00443	ba 01 00 00 00	 mov	 edx, 1
  00448	8b 08		 mov	 ecx, DWORD PTR [eax]
  0044a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0044d	d3 e2		 shl	 edx, cl
  0044f	4a		 dec	 edx
  00450	23 d7		 and	 edx, edi
  00452	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00455	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00458	8b d0		 mov	 edx, eax
  0045a	c1 ea 08	 shr	 edx, 8
  0045d	8b f8		 mov	 edi, eax
  0045f	c1 ef 10	 shr	 edi, 16			; 00000010H
  00462	0f b6 ca	 movzx	 ecx, dl
  00465	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  00468	89 7d f0	 mov	 DWORD PTR $T9[ebp], edi

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  0046b	3b cb		 cmp	 ecx, ebx
  0046d	76 6b		 jbe	 SHORT $LN445@inflateBac
  0046f	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00472	85 f6		 test	 esi, esi
  00474	75 1a		 jne	 SHORT $LN100@inflateBac
  00476	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00479	50		 push	 eax
  0047a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0047d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00480	8b f0		 mov	 esi, eax
  00482	83 c4 08	 add	 esp, 8
  00485	85 f6		 test	 esi, esi
  00487	0f 84 df 08 00
	00		 je	 $LN369@inflateBac
  0048d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00490	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00493	8b cb		 mov	 ecx, ebx
  00495	d3 e0		 shl	 eax, cl
  00497	47		 inc	 edi
  00498	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0049b	ba 01 00 00 00	 mov	 edx, 1
  004a0	8b 45 d8	 mov	 eax, DWORD PTR tv3601[ebp]
  004a3	83 c3 08	 add	 ebx, 8
  004a6	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  004a9	4e		 dec	 esi
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  004af	d3 e2		 shl	 edx, cl
  004b1	4a		 dec	 edx
  004b2	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  004b5	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  004b8	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  004bb	8b c8		 mov	 ecx, eax
  004bd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004c0	8b d0		 mov	 edx, eax
  004c2	c1 ea 08	 shr	 edx, 8
  004c5	89 4d f0	 mov	 DWORD PTR $T9[ebp], ecx
  004c8	0f b6 ca	 movzx	 ecx, dl
  004cb	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  004ce	3b cb		 cmp	 ecx, ebx
  004d0	77 a0		 ja	 SHORT $LL94@inflateBac

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  004d2	8b 4d f0	 mov	 ecx, DWORD PTR $T9[ebp]
  004d5	89 4d e0	 mov	 DWORD PTR $T8[ebp], ecx
  004d8	eb 09		 jmp	 SHORT $LN493@inflateBac
$LN445@inflateBac:
  004da	8b 4d f0	 mov	 ecx, DWORD PTR $T9[ebp]
  004dd	89 7d e0	 mov	 DWORD PTR $T8[ebp], edi
  004e0	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN493@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004e3	0f b7 c9	 movzx	 ecx, cx
  004e6	89 55 d0	 mov	 DWORD PTR $T4[ebp], edx
  004e9	89 55 d4	 mov	 DWORD PTR $T5[ebp], edx
  004ec	83 f9 10	 cmp	 ecx, 16			; 00000010H
  004ef	73 2b		 jae	 SHORT $LN284@inflateBac

; 406  :                     DROPBITS(here.bits);

  004f1	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004f4	8a ca		 mov	 cl, dl
  004f6	0f b6 d2	 movzx	 edx, dl
  004f9	2b da		 sub	 ebx, edx
  004fb	d3 ef		 shr	 edi, cl

; 407  :                     state->lens[state->have++] = here.val;

  004fd	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00500	c1 e8 10	 shr	 eax, 16			; 00000010H
  00503	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00506	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00509	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0050c	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  00511	ff 42 6c	 inc	 DWORD PTR [edx+108]
  00514	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]

; 408  :                 }

  00517	e9 a0 01 00 00	 jmp	 $LN406@inflateBac
$LN284@inflateBac:

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  0051c	66 83 7d e0 10	 cmp	 WORD PTR $T8[ebp], 16	; 00000010H
  00521	0f 85 84 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  00527	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp]
  0052a	0f b6 c0	 movzx	 eax, al
  0052d	83 c0 02	 add	 eax, 2
  00530	89 45 d0	 mov	 DWORD PTR tv3591[ebp], eax
  00533	3b d8		 cmp	 ebx, eax
  00535	73 35		 jae	 SHORT $LN106@inflateBac
$LL109@inflateBac:
  00537	85 f6		 test	 esi, esi
  00539	75 1a		 jne	 SHORT $LN114@inflateBac
  0053b	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0053e	50		 push	 eax
  0053f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00542	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00545	8b f0		 mov	 esi, eax
  00547	83 c4 08	 add	 esp, 8
  0054a	85 f6		 test	 esi, esi
  0054c	0f 84 1a 08 00
	00		 je	 $LN369@inflateBac
  00552	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  00555	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00558	8b cb		 mov	 ecx, ebx
  0055a	d3 e0		 shl	 eax, cl
  0055c	47		 inc	 edi
  0055d	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00560	83 c3 08	 add	 ebx, 8
  00563	4e		 dec	 esi
  00564	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00567	3b 5d d0	 cmp	 ebx, DWORD PTR tv3591[ebp]
  0056a	72 cb		 jb	 SHORT $LL109@inflateBac
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);
; 413  :                         if (state->have == 0) {

  0056c	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0056f	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  00572	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00575	0f b6 cc	 movzx	 ecx, ah
  00578	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0057b	2b d9		 sub	 ebx, ecx
  0057d	d3 ef		 shr	 edi, cl
  0057f	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00582	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00585	85 c0		 test	 eax, eax
  00587	0f 84 6a 01 00
	00		 je	 $LN380@inflateBac

; 414  :                             strm->msg = (char *)"invalid bit length repeat";
; 415  :                             state->mode = BAD;
; 416  :                             break;
; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);
; 419  :                         copy = 3 + BITS(2);
; 420  :                         DROPBITS(2);

  0058d	0f b7 44 42 72	 movzx	 eax, WORD PTR [edx+eax*2+114]
  00592	8b cf		 mov	 ecx, edi
  00594	83 e1 03	 and	 ecx, 3
  00597	c1 ef 02	 shr	 edi, 2
  0059a	83 c1 03	 add	 ecx, 3
  0059d	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
  005a0	89 4d e4	 mov	 DWORD PTR _copy$1$[ebp], ecx
  005a3	83 eb 02	 sub	 ebx, 2

; 421  :                     }

  005a6	e9 d6 00 00 00	 jmp	 $LN494@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  005ab	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  005ae	0f b6 c0	 movzx	 eax, al
  005b1	83 f9 11	 cmp	 ecx, 17			; 00000011H
  005b4	75 5f		 jne	 SHORT $LN142@inflateBac

; 423  :                         NEEDBITS(here.bits + 3);

  005b6	83 c0 03	 add	 eax, 3
  005b9	89 45 d0	 mov	 DWORD PTR tv3550[ebp], eax
  005bc	3b d8		 cmp	 ebx, eax
  005be	73 35		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  005c0	85 f6		 test	 esi, esi
  005c2	75 1a		 jne	 SHORT $LN131@inflateBac
  005c4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005c7	50		 push	 eax
  005c8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005cb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005ce	8b f0		 mov	 esi, eax
  005d0	83 c4 08	 add	 esp, 8
  005d3	85 f6		 test	 esi, esi
  005d5	0f 84 91 07 00
	00		 je	 $LN369@inflateBac
  005db	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005de	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005e1	8b cb		 mov	 ecx, ebx
  005e3	d3 e0		 shl	 eax, cl
  005e5	47		 inc	 edi
  005e6	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  005e9	83 c3 08	 add	 ebx, 8
  005ec	4e		 dec	 esi
  005ed	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005f0	3b 5d d0	 cmp	 ebx, DWORD PTR tv3550[ebp]
  005f3	72 cb		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005f5	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  005f8	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  005fb	0f b6 cc	 movzx	 ecx, ah
  005fe	d3 ef		 shr	 edi, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  00600	8b c7		 mov	 eax, edi
  00602	83 e0 07	 and	 eax, 7
  00605	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  00608	c1 ef 03	 shr	 edi, 3
  0060b	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  0060e	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  00613	eb 5e		 jmp	 SHORT $LN495@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  00615	83 c0 07	 add	 eax, 7
  00618	89 45 d0	 mov	 DWORD PTR tv3549[ebp], eax
  0061b	3b d8		 cmp	 ebx, eax
  0061d	73 36		 jae	 SHORT $LN140@inflateBac
  0061f	90		 npad	 1
$LL143@inflateBac:
  00620	85 f6		 test	 esi, esi
  00622	75 1a		 jne	 SHORT $LN148@inflateBac
  00624	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00627	50		 push	 eax
  00628	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0062b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0062e	8b f0		 mov	 esi, eax
  00630	83 c4 08	 add	 esp, 8
  00633	85 f6		 test	 esi, esi
  00635	0f 84 31 07 00
	00		 je	 $LN369@inflateBac
  0063b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  0063e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00641	8b cb		 mov	 ecx, ebx
  00643	d3 e0		 shl	 eax, cl
  00645	47		 inc	 edi
  00646	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00649	83 c3 08	 add	 ebx, 8
  0064c	4e		 dec	 esi
  0064d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00650	3b 5d d0	 cmp	 ebx, DWORD PTR tv3549[ebp]
  00653	72 cb		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00655	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  00658	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0065b	0f b6 cc	 movzx	 ecx, ah
  0065e	d3 ef		 shr	 edi, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  00660	8b c7		 mov	 eax, edi
  00662	83 e0 7f	 and	 eax, 127		; 0000007fH
  00665	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  00668	c1 ef 07	 shr	 edi, 7
  0066b	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  0066e	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN495@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  00673	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00676	2b c1		 sub	 eax, ecx
  00678	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  0067f	03 d8		 add	 ebx, eax
$LN494@inflateBac:
  00681	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00684	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00687	03 4d e4	 add	 ecx, DWORD PTR _copy$1$[ebp]
  0068a	03 42 64	 add	 eax, DWORD PTR [edx+100]
  0068d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00690	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00693	3b c8		 cmp	 ecx, eax
  00695	77 60		 ja	 SHORT $LN380@inflateBac
  00697	8b 7d e4	 mov	 edi, DWORD PTR _copy$1$[ebp]
  0069a	8b 5d e0	 mov	 ebx, DWORD PTR $T7[ebp]
  0069d	0f 1f 00	 npad	 3
$LL157@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  006a0	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  006a3	66 89 5c 42 74	 mov	 WORD PTR [edx+eax*2+116], bx
  006a8	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  006ab	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  006ae	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  006b1	83 ef 01	 sub	 edi, 1
  006b4	75 ea		 jne	 SHORT $LL157@inflateBac
  006b6	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  006b9	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN406@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  006bc	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  006bf	03 42 64	 add	 eax, DWORD PTR [edx+100]
  006c2	3b c8		 cmp	 ecx, eax
  006c4	0f 82 76 fd ff
	ff		 jb	 $LL92@inflateBac
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006ca	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006d1	0f 84 69 06 00
	00		 je	 $LN485@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006d7	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006df	75 2c		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006e1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006e4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 452  :                 state->mode = BAD;

  006eb	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 453  :                 break;

  006f2	e9 49 06 00 00	 jmp	 $LN485@inflateBac
$LN380@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  006f7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006fa	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  00701	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
  00708	e9 33 06 00 00	 jmp	 $LN485@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;
; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;
; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  0070d	ff 75 dc	 push	 DWORD PTR tv3599[ebp]
  00710	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  00713	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  0071a	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  00720	89 01		 mov	 DWORD PTR [ecx], eax
  00722	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00725	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  00728	50		 push	 eax
  00729	51		 push	 ecx
  0072a	ff 72 64	 push	 DWORD PTR [edx+100]
  0072d	8b 55 c8	 mov	 edx, DWORD PTR tv3598[ebp]
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	e8 00 00 00 00	 call	 _inflate_table
  0073a	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  0073d	85 c0		 test	 eax, eax
  0073f	74 19		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  00741	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  00744	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00747	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
  0074e	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 467  :                 break;

  00755	e9 e6 05 00 00	 jmp	 $LN485@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  0075a	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  0075d	8b 55 cc	 mov	 edx, DWORD PTR tv3604[ebp]

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00760	ff 75 dc	 push	 DWORD PTR tv3599[ebp]
  00763	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6
  0076a	8b 02		 mov	 eax, DWORD PTR [edx]
  0076c	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  0076f	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  00772	50		 push	 eax
  00773	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00776	52		 push	 edx
  00777	ff 71 68	 push	 DWORD PTR [ecx+104]
  0077a	83 c1 74	 add	 ecx, 116		; 00000074H
  0077d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00780	b9 02 00 00 00	 mov	 ecx, 2
  00785	e8 00 00 00 00	 call	 _inflate_table

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {

  0078a	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0078d	83 c4 10	 add	 esp, 16			; 00000010H
  00790	85 c0		 test	 eax, eax
  00792	74 16		 je	 SHORT $LN301@inflateBac

; 474  :                 strm->msg = (char *)"invalid distances set";

  00794	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00797	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 475  :                 state->mode = BAD;

  0079e	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 476  :                 break;

  007a5	e9 96 05 00 00	 jmp	 $LN485@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  007aa	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  007b1	83 fe 06	 cmp	 esi, 6
  007b4	0f 82 8d 00 00
	00		 jb	 $LN303@inflateBac
  007ba	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  007bd	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  007c3	0f 82 7e 00 00
	00		 jb	 $LN303@inflateBac

; 484  :                 RESTORE();

  007c9	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007cc	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  007cf	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007d2	8b c2		 mov	 eax, edx
  007d4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  007d7	8b ca		 mov	 ecx, edx
  007d9	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007dc	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007df	89 01		 mov	 DWORD PTR [ecx], eax
  007e1	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 485  :                 if (state->whave < state->wsize)

  007e4	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007e7	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007ea	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  007ed	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007f0	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007f2	8b c1		 mov	 eax, ecx
  007f4	2b 45 ec	 sub	 eax, DWORD PTR _left$1$[ebp]
  007f7	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007fa	51		 push	 ecx
  007fb	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  007fe	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  00803	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00806	83 c4 08	 add	 esp, 8
  00809	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0080c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0080f	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00812	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00815	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00818	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  0081b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0081d	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00820	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  00823	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]
  00826	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00829	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 489  :                 break;

  0082c	e9 0f 05 00 00	 jmp	 $LN485@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00831	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00834	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@

; 370  :                 state->mode = BAD;

  0083b	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 371  :                 break;

  00842	e9 f9 04 00 00	 jmp	 $LN485@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00847	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0084a	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  0084d	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  00850	b8 01 00 00 00	 mov	 eax, 1
  00855	d3 e0		 shl	 eax, cl
  00857	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0085a	48		 dec	 eax
  0085b	23 c7		 and	 eax, edi
  0085d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00860	8b c8		 mov	 ecx, eax
  00862	c1 e9 08	 shr	 ecx, 8
  00865	0f b6 c9	 movzx	 ecx, cl

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  00868	3b cb		 cmp	 ecx, ebx
  0086a	76 60		 jbe	 SHORT $LN382@inflateBac
  0086c	0f 1f 40 00	 npad	 4
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00870	85 f6		 test	 esi, esi
  00872	75 1a		 jne	 SHORT $LN171@inflateBac
  00874	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00877	50		 push	 eax
  00878	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0087b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0087e	8b f0		 mov	 esi, eax
  00880	83 c4 08	 add	 esp, 8
  00883	85 f6		 test	 esi, esi
  00885	0f 84 e1 04 00
	00		 je	 $LN369@inflateBac
  0088b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN171@inflateBac:
  0088e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00891	8b cb		 mov	 ecx, ebx
  00893	83 c3 08	 add	 ebx, 8
  00896	4e		 dec	 esi
  00897	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0089a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0089d	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  008a0	d3 e0		 shl	 eax, cl
  008a2	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  008a5	03 f8		 add	 edi, eax
  008a7	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  008aa	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  008ad	b8 01 00 00 00	 mov	 eax, 1
  008b2	d3 e0		 shl	 eax, cl
  008b4	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  008b7	48		 dec	 eax
  008b8	23 c7		 and	 eax, edi
  008ba	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  008bd	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008c0	8b c8		 mov	 ecx, eax
  008c2	c1 e9 08	 shr	 ecx, 8
  008c5	0f b6 c9	 movzx	 ecx, cl
  008c8	3b cb		 cmp	 ecx, ebx
  008ca	77 a4		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  008cc	84 c0		 test	 al, al
  008ce	0f 84 c7 00 00
	00		 je	 $LN184@inflateBac
  008d4	a8 f0		 test	 al, 240			; 000000f0H
  008d6	0f 85 bf 00 00
	00		 jne	 $LN184@inflateBac

; 499  :                 last = here;

  008dc	8b c8		 mov	 ecx, eax

; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  008de	bb 01 00 00 00	 mov	 ebx, 1
  008e3	c1 e9 08	 shr	 ecx, 8
  008e6	8b d0		 mov	 edx, eax
  008e8	0f b6 f9	 movzx	 edi, cl
  008eb	89 4d c8	 mov	 DWORD PTR tv3578[ebp], ecx
  008ee	0f b6 c8	 movzx	 ecx, al
  008f1	03 cf		 add	 ecx, edi
  008f3	c1 e8 10	 shr	 eax, 16			; 00000010H
  008f6	d3 e3		 shl	 ebx, cl
  008f8	8b cf		 mov	 ecx, edi
  008fa	4b		 dec	 ebx
  008fb	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  008fe	23 5d f8	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00901	d3 eb		 shr	 ebx, cl
  00903	8b 4d cc	 mov	 ecx, DWORD PTR $T3[ebp]
  00906	03 d8		 add	 ebx, eax
  00908	8b 04 99	 mov	 eax, DWORD PTR [ecx+ebx*4]
  0090b	8b c8		 mov	 ecx, eax

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  0090d	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00910	c1 e9 08	 shr	 ecx, 8
  00913	0f b6 f9	 movzx	 edi, cl
  00916	8b 4d c8	 mov	 ecx, DWORD PTR tv3578[ebp]
  00919	0f b6 c9	 movzx	 ecx, cl
  0091c	03 f9		 add	 edi, ecx
  0091e	3b fb		 cmp	 edi, ebx
  00920	76 6c		 jbe	 SHORT $LN185@inflateBac
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  00922	85 f6		 test	 esi, esi
  00924	75 1a		 jne	 SHORT $LN180@inflateBac
  00926	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00929	50		 push	 eax
  0092a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0092d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00930	8b f0		 mov	 esi, eax
  00932	83 c4 08	 add	 esp, 8
  00935	85 f6		 test	 esi, esi
  00937	0f 84 2f 04 00
	00		 je	 $LN369@inflateBac
  0093d	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN180@inflateBac:
  00940	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00943	8b cb		 mov	 ecx, ebx
  00945	83 c3 08	 add	 ebx, 8
  00948	bf 01 00 00 00	 mov	 edi, 1
  0094d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00950	4e		 dec	 esi
  00951	0f b6 de	 movzx	 ebx, dh
  00954	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00957	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  0095a	d3 e0		 shl	 eax, cl
  0095c	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0095f	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00963	0f b6 ca	 movzx	 ecx, dl
  00966	03 cb		 add	 ecx, ebx
  00968	d3 e7		 shl	 edi, cl
  0096a	8b cb		 mov	 ecx, ebx
  0096c	4f		 dec	 edi
  0096d	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00970	d3 ef		 shr	 edi, cl
  00972	03 f8		 add	 edi, eax
  00974	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00977	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0097a	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0097d	8b c8		 mov	 ecx, eax
  0097f	c1 e9 08	 shr	 ecx, 8
  00982	0f b6 c9	 movzx	 ecx, cl
  00985	03 cb		 add	 ecx, ebx
  00987	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  0098a	3b cb		 cmp	 ecx, ebx
  0098c	77 94		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0098e	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00991	0f b6 ce	 movzx	 ecx, dh
  00994	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00997	d3 ef		 shr	 edi, cl
  00999	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);

  0099b	8b c8		 mov	 ecx, eax
  0099d	c1 e9 08	 shr	 ecx, 8
  009a0	0f b6 c9	 movzx	 ecx, cl
  009a3	d3 ef		 shr	 edi, cl
  009a5	2b d9		 sub	 ebx, ecx

; 509  :             state->length = (unsigned)here.val;

  009a7	8b c8		 mov	 ecx, eax
  009a9	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  009ac	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009af	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  009b2	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  009b5	84 c0		 test	 al, al
  009b7	75 46		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  009b9	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  009bd	75 25		 jne	 SHORT $LN189@inflateBac
  009bf	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  009c2	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  009c5	51		 push	 ecx
  009c6	50		 push	 eax
  009c7	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009ca	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  009cd	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  009d0	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  009d3	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  009d9	85 c0		 test	 eax, eax
  009db	0f 85 92 03 00
	00		 jne	 $LN372@inflateBac
  009e1	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009e4	8b 4d e8	 mov	 ecx, DWORD PTR _put$1$[ebp]
  009e7	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  009ea	88 01		 mov	 BYTE PTR [ecx], al
  009ec	41		 inc	 ecx

; 518  :                 left--;

  009ed	ff 4d ec	 dec	 DWORD PTR _left$1$[ebp]
  009f0	89 4d e8	 mov	 DWORD PTR _put$1$[ebp], ecx

; 519  :                 state->mode = LEN;

  009f3	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 520  :                 break;

  009fa	e9 41 03 00 00	 jmp	 $LN485@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009ff	a8 20		 test	 al, 32			; 00000020H
  00a01	74 0c		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  00a03	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 527  :                 break;

  00a0a	e9 31 03 00 00	 jmp	 $LN485@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  00a0f	a8 40		 test	 al, 64			; 00000040H
  00a11	74 16		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  00a13	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00a16	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@

; 533  :                 state->mode = BAD;

  00a1d	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 534  :                 break;

  00a24	e9 17 03 00 00	 jmp	 $LN485@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00a29	0f b6 c8	 movzx	 ecx, al
  00a2c	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00a2f	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 539  :             if (state->extra != 0) {

  00a32	74 5f		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a34	3b d9		 cmp	 ebx, ecx
  00a36	73 44		 jae	 SHORT $LN192@inflateBac
  00a38	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a3b	0f 1f 44 00 00	 npad	 5
$LL195@inflateBac:
  00a40	85 f6		 test	 esi, esi
  00a42	75 1d		 jne	 SHORT $LN200@inflateBac
  00a44	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a47	50		 push	 eax
  00a48	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a4b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a4e	8b f0		 mov	 esi, eax
  00a50	83 c4 08	 add	 esp, 8
  00a53	85 f6		 test	 esi, esi
  00a55	0f 84 11 03 00
	00		 je	 $LN369@inflateBac
  00a5b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a5e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a61	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a64	8b cb		 mov	 ecx, ebx
  00a66	d3 e0		 shl	 eax, cl
  00a68	83 c3 08	 add	 ebx, 8
  00a6b	03 f8		 add	 edi, eax
  00a6d	4e		 dec	 esi
  00a6e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a71	40		 inc	 eax
  00a72	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a75	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a78	3b d9		 cmp	 ebx, ecx
  00a7a	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a7c	b8 01 00 00 00	 mov	 eax, 1
  00a81	d3 e0		 shl	 eax, cl
  00a83	48		 dec	 eax
  00a84	23 c7		 and	 eax, edi

; 542  :                 DROPBITS(state->extra);

  00a86	d3 ef		 shr	 edi, cl
  00a88	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a8b	2b d9		 sub	 ebx, ecx
  00a8d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00a90	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a93	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a96	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a99	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00a9c	b8 01 00 00 00	 mov	 eax, 1
  00aa1	d3 e0		 shl	 eax, cl
  00aa3	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00aa6	48		 dec	 eax
  00aa7	23 c7		 and	 eax, edi
  00aa9	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00aac	8b c8		 mov	 ecx, eax
  00aae	c1 e9 08	 shr	 ecx, 8
  00ab1	0f b6 c9	 movzx	 ecx, cl

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00ab4	3b cb		 cmp	 ecx, ebx
  00ab6	76 5c		 jbe	 SHORT $LN484@inflateBac
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00ab8	85 f6		 test	 esi, esi
  00aba	75 1a		 jne	 SHORT $LN212@inflateBac
  00abc	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00abf	50		 push	 eax
  00ac0	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00ac3	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00ac6	8b f0		 mov	 esi, eax
  00ac8	83 c4 08	 add	 esp, 8
  00acb	85 f6		 test	 esi, esi
  00acd	0f 84 99 02 00
	00		 je	 $LN369@inflateBac
  00ad3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN212@inflateBac:
  00ad6	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00ad9	8b cb		 mov	 ecx, ebx
  00adb	83 c3 08	 add	 ebx, 8
  00ade	4e		 dec	 esi
  00adf	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00ae2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00ae5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00ae8	d3 e0		 shl	 eax, cl
  00aea	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00aed	03 f8		 add	 edi, eax
  00aef	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00af2	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00af5	b8 01 00 00 00	 mov	 eax, 1
  00afa	d3 e0		 shl	 eax, cl
  00afc	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00aff	48		 dec	 eax
  00b00	23 c7		 and	 eax, edi
  00b02	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00b05	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00b08	8b c8		 mov	 ecx, eax
  00b0a	c1 e9 08	 shr	 ecx, 8
  00b0d	0f b6 c9	 movzx	 ecx, cl
  00b10	3b cb		 cmp	 ecx, ebx
  00b12	77 a4		 ja	 SHORT $LL206@inflateBac
$LN484@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00b14	a8 f0		 test	 al, 240			; 000000f0H
  00b16	0f 85 c0 00 00
	00		 jne	 $LN225@inflateBac

; 553  :                 last = here;

  00b1c	8b c8		 mov	 ecx, eax

; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00b1e	bb 01 00 00 00	 mov	 ebx, 1
  00b23	c1 e9 08	 shr	 ecx, 8
  00b26	8b d0		 mov	 edx, eax
  00b28	0f b6 f9	 movzx	 edi, cl
  00b2b	89 4d c8	 mov	 DWORD PTR tv3577[ebp], ecx
  00b2e	0f b6 c8	 movzx	 ecx, al
  00b31	03 cf		 add	 ecx, edi
  00b33	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b36	d3 e3		 shl	 ebx, cl
  00b38	8b cf		 mov	 ecx, edi
  00b3a	4b		 dec	 ebx
  00b3b	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  00b3e	23 5d f8	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00b41	d3 eb		 shr	 ebx, cl
  00b43	8b 4d cc	 mov	 ecx, DWORD PTR $T2[ebp]
  00b46	03 d8		 add	 ebx, eax
  00b48	8b 04 99	 mov	 eax, DWORD PTR [ecx+ebx*4]
  00b4b	8b c8		 mov	 ecx, eax

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b4d	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b50	c1 e9 08	 shr	 ecx, 8
  00b53	0f b6 f9	 movzx	 edi, cl
  00b56	8b 4d c8	 mov	 ecx, DWORD PTR tv3577[ebp]
  00b59	0f b6 c9	 movzx	 ecx, cl
  00b5c	03 f9		 add	 edi, ecx
  00b5e	3b fb		 cmp	 edi, ebx
  00b60	76 6d		 jbe	 SHORT $LN226@inflateBac
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b62	85 f6		 test	 esi, esi
  00b64	75 1a		 jne	 SHORT $LN221@inflateBac
  00b66	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b69	50		 push	 eax
  00b6a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b6d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b70	8b f0		 mov	 esi, eax
  00b72	83 c4 08	 add	 esp, 8
  00b75	85 f6		 test	 esi, esi
  00b77	0f 84 ef 01 00
	00		 je	 $LN369@inflateBac
  00b7d	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b80	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00b83	8b cb		 mov	 ecx, ebx
  00b85	83 c3 08	 add	 ebx, 8
  00b88	4e		 dec	 esi
  00b89	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00b8c	0f b6 de	 movzx	 ebx, dh
  00b8f	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00b92	47		 inc	 edi
  00b93	d3 e0		 shl	 eax, cl
  00b95	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00b98	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b9c	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00b9f	bf 01 00 00 00	 mov	 edi, 1
  00ba4	0f b6 ca	 movzx	 ecx, dl
  00ba7	03 cb		 add	 ecx, ebx
  00ba9	d3 e7		 shl	 edi, cl
  00bab	8b cb		 mov	 ecx, ebx
  00bad	4f		 dec	 edi
  00bae	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00bb1	d3 ef		 shr	 edi, cl
  00bb3	03 f8		 add	 edi, eax
  00bb5	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00bb8	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00bbb	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00bbe	8b c8		 mov	 ecx, eax
  00bc0	c1 e9 08	 shr	 ecx, 8
  00bc3	0f b6 c9	 movzx	 ecx, cl
  00bc6	03 cb		 add	 ecx, ebx
  00bc8	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00bcb	3b cb		 cmp	 ecx, ebx
  00bcd	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00bcf	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00bd2	0f b6 ce	 movzx	 ecx, dh
  00bd5	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bd8	d3 ef		 shr	 edi, cl
  00bda	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00bdc	8b c8		 mov	 ecx, eax
  00bde	c1 e9 08	 shr	 ecx, 8
  00be1	0f b6 c9	 movzx	 ecx, cl
  00be4	d3 ef		 shr	 edi, cl
  00be6	2b d9		 sub	 ebx, ecx
  00be8	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00beb	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 563  :             if (here.op & 64) {

  00bee	a8 40		 test	 al, 64			; 00000040H
  00bf0	74 16		 je	 SHORT $LN327@inflateBac

; 564  :                 strm->msg = (char *)"invalid distance code";

  00bf2	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bf5	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@

; 565  :                 state->mode = BAD;

  00bfc	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 566  :                 break;

  00c03	e9 38 01 00 00	 jmp	 $LN485@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00c08	8b c8		 mov	 ecx, eax
  00c0a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c0d	89 4d cc	 mov	 DWORD PTR $T1[ebp], ecx
  00c10	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00c13	0f b6 c8	 movzx	 ecx, al
  00c16	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00c19	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 572  :             if (state->extra != 0) {

  00c1c	74 60		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00c1e	3b d9		 cmp	 ebx, ecx
  00c20	73 3f		 jae	 SHORT $LN230@inflateBac
  00c22	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00c25	85 f6		 test	 esi, esi
  00c27	75 1d		 jne	 SHORT $LN238@inflateBac
  00c29	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00c2c	50		 push	 eax
  00c2d	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c30	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c33	8b f0		 mov	 esi, eax
  00c35	83 c4 08	 add	 esp, 8
  00c38	85 f6		 test	 esi, esi
  00c3a	0f 84 2c 01 00
	00		 je	 $LN369@inflateBac
  00c40	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c43	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c46	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c49	8b cb		 mov	 ecx, ebx
  00c4b	d3 e0		 shl	 eax, cl
  00c4d	83 c3 08	 add	 ebx, 8
  00c50	03 f8		 add	 edi, eax
  00c52	4e		 dec	 esi
  00c53	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00c56	40		 inc	 eax
  00c57	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00c5a	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00c5d	3b d9		 cmp	 ebx, ecx
  00c5f	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c61	b8 01 00 00 00	 mov	 eax, 1
  00c66	d3 e0		 shl	 eax, cl
  00c68	48		 dec	 eax
  00c69	23 c7		 and	 eax, edi

; 575  :                 DROPBITS(state->extra);

  00c6b	d3 ef		 shr	 edi, cl
  00c6d	01 42 48	 add	 DWORD PTR [edx+72], eax
  00c70	2b d9		 sub	 ebx, ecx
  00c72	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00c75	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
  00c78	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00c7b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c7e	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c81	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00c84	1b c0		 sbb	 eax, eax
  00c86	23 45 ec	 and	 eax, DWORD PTR _left$1$[ebp]
  00c89	2b c8		 sub	 ecx, eax
  00c8b	39 4d cc	 cmp	 DWORD PTR $T1[ebp], ecx
  00c8e	76 16		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c90	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c93	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 580  :                 state->mode = BAD;

  00c9a	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 581  :                 break;

  00ca1	e9 9a 00 00 00	 jmp	 $LN485@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00ca6	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00caa	75 25		 jne	 SHORT $LN247@inflateBac
  00cac	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00caf	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00cb2	51		 push	 ecx
  00cb3	50		 push	 eax
  00cb4	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00cb7	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00cba	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00cbd	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00cc0	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00cc3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cc6	85 c0		 test	 eax, eax
  00cc8	0f 85 a5 00 00
	00		 jne	 $LN372@inflateBac
  00cce	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00cd1	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00cd4	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]

; 589  :                 if (copy < left) {
; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;
; 592  :                 }
; 593  :                 else {
; 594  :                     from = put - state->offset;
; 595  :                     copy = left;
; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00cd7	8b 7d e8	 mov	 edi, DWORD PTR _put$1$[ebp]
  00cda	2b d0		 sub	 edx, eax
  00cdc	8b cf		 mov	 ecx, edi
  00cde	2b c8		 sub	 ecx, eax
  00ce0	3b 55 ec	 cmp	 edx, DWORD PTR _left$1$[ebp]
  00ce3	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00ce6	0f 43 c1	 cmovae	 eax, ecx
  00ce9	89 45 c8	 mov	 DWORD PTR _from$1$[ebp], eax
  00cec	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00cef	8b c8		 mov	 ecx, eax
  00cf1	2b ca		 sub	 ecx, edx
  00cf3	3b d0		 cmp	 edx, eax
  00cf5	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cf8	0f 43 c8	 cmovae	 ecx, eax
  00cfb	8b 42 44	 mov	 eax, DWORD PTR [edx+68]

; 598  :                 state->length -= copy;

  00cfe	3b c8		 cmp	 ecx, eax
  00d00	8b d0		 mov	 edx, eax
  00d02	0f 46 d1	 cmovbe	 edx, ecx
  00d05	8b 4d c8	 mov	 ecx, DWORD PTR _from$1$[ebp]
  00d08	2b c2		 sub	 eax, edx
  00d0a	89 55 cc	 mov	 DWORD PTR _copy$2$[ebp], edx
  00d0d	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d10	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 599  :                 left -= copy;

  00d13	8b 55 cc	 mov	 edx, DWORD PTR _copy$2$[ebp]
  00d16	29 55 ec	 sub	 DWORD PTR _left$1$[ebp], edx
  00d19	0f 1f 80 00 00
	00 00		 npad	 7
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00d20	8a 01		 mov	 al, BYTE PTR [ecx]
  00d22	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00d25	88 07		 mov	 BYTE PTR [edi], al
  00d27	47		 inc	 edi

; 602  :                 } while (--copy);

  00d28	83 ea 01	 sub	 edx, 1
  00d2b	75 f3		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00d2d	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d30	89 7d e8	 mov	 DWORD PTR _put$1$[ebp], edi
  00d33	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00d36	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00d3a	0f 85 66 ff ff
	ff		 jne	 $LL246@inflateBac
$LN485@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d40	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d43	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00d48	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d4b	0f 86 24 f3 ff
	ff		 jbe	 $LN496@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d51	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$inf_leave$500:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d56	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00d59	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 627  :     strm->avail_in = have;

  00d5c	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00d5f	89 08		 mov	 DWORD PTR [eax], ecx

; 628  :     return ret;

  00d61	8b c7		 mov	 eax, edi
  00d63	5f		 pop	 edi
  00d64	5e		 pop	 esi
  00d65	5b		 pop	 ebx

; 629  : }

  00d66	8b e5		 mov	 esp, ebp
  00d68	5d		 pop	 ebp
  00d69	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d6c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00d73	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d78	eb dc		 jmp	 SHORT $inf_leave$500
$LN371@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00d7a	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
  00d7d	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d82	eb d2		 jmp	 SHORT $inf_leave$500
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d84	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00d87	bf 01 00 00 00	 mov	 edi, 1
  00d8c	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d8f	3b c8		 cmp	 ecx, eax
  00d91	73 c3		 jae	 SHORT $inf_leave$500

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d93	2b c1		 sub	 eax, ecx
  00d95	50		 push	 eax
  00d96	ff 72 38	 push	 DWORD PTR [edx+56]
  00d99	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d9c	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d9f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00da2	85 c0		 test	 eax, eax
  00da4	74 b0		 je	 SHORT $inf_leave$500

; 611  :                     ret = Z_BUF_ERROR;

  00da6	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH

; 612  :             }
; 613  :             goto inf_leave;

  00dab	eb a9		 jmp	 SHORT $inf_leave$500
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00dad	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00db2	eb a2		 jmp	 SHORT $inf_leave$500
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00db4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00db9	8b e5		 mov	 esp, ebp
  00dbb	5d		 pop	 ebp
  00dbc	c2 14 00	 ret	 20			; 00000014H
  00dbf	90		 npad	 1
$LN498@inflateBac:
  00dc0	00 00 00 00	 DD	 $LN255@inflateBac
  00dc4	00 00 00 00	 DD	 $LN31@inflateBac
  00dc8	00 00 00 00	 DD	 $LN56@inflateBac
  00dcc	00 00 00 00	 DD	 $LN302@inflateBac
  00dd0	00 00 00 00	 DD	 $LN337@inflateBac
  00dd4	00 00 00 00	 DD	 $LN340@inflateBac
  00dd8	00 00 00 00	 DD	 $LN341@inflateBac
$LN478@inflateBac:
  00ddc	00		 DB	 0
  00ddd	06		 DB	 6
  00dde	01		 DB	 1
  00ddf	06		 DB	 6
  00de0	06		 DB	 6
  00de1	02		 DB	 2
  00de2	06		 DB	 6
  00de3	06		 DB	 6
  00de4	06		 DB	 6
  00de5	03		 DB	 3
  00de6	06		 DB	 6
  00de7	06		 DB	 6
  00de8	06		 DB	 6
  00de9	06		 DB	 6
  00dea	06		 DB	 6
  00deb	06		 DB	 6
  00dec	06		 DB	 6
  00ded	04		 DB	 4
  00dee	05		 DB	 5
  00def	90		 npad	 1
$LN499@inflateBac:
  00df0	00 00 00 00	 DD	 $LN259@inflateBac
  00df4	00 00 00 00	 DD	 $LN260@inflateBac
  00df8	00 00 00 00	 DD	 $LN261@inflateBac
  00dfc	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
