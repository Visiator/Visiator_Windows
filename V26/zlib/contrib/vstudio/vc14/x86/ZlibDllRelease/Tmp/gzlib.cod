; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	c:\prj\visiator_windows\v26\zlib\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs@		; `string'
EXTRN	_malloc:PROC
EXTRN	_free:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_wcstombs:PROC
EXTRN	__open:PROC
EXTRN	__wopen:PROC
EXTRN	__lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@ DB '<fd:%d>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@16
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzopen_w@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
PUBLIC	_snprintf
PUBLIC	_vsnprintf
PUBLIC	___local_stdio_printf_options
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
_vsnprintf PROC						; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1439 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00006	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 02	 or	 ecx, 2
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1445 :     }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00015	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	ff 70 04	 push	 DWORD PTR [eax+4]
  0001f	83 c9 02	 or	 ecx, 2
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00028	83 c9 ff	 or	 ecx, -1
  0002b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002e	85 c0		 test	 eax, eax
  00030	0f 48 c1	 cmovs	 eax, ecx

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);
; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1954 :         __crt_va_end(_ArgList);
; 1955 :         return _Result;
; 1956 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN2@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_path$1$ = -8						; size = 4
_exclusive$1$ = -4					; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b da		 mov	 ebx, edx

; 96   :     gz_statep state;
; 97   :     z_size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  00010	33 d2		 xor	 edx, edx
  00012	89 7c 24 10	 mov	 DWORD PTR _path$1$[esp+24], edi
  00016	89 54 24 14	 mov	 DWORD PTR _exclusive$1$[esp+24], edx

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  0001a	85 ff		 test	 edi, edi
  0001c	0f 84 f0 01 00
	00		 je	 $LN50@gz_open

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00022	68 a0 00 00 00	 push	 160			; 000000a0H
  00027	e8 00 00 00 00	 call	 _malloc
  0002c	8b f0		 mov	 esi, eax
  0002e	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  00031	85 f6		 test	 esi, esi
  00033	0f 84 d9 01 00
	00		 je	 $LN50@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  00039	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0003c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00043	c7 46 20 00 20
	00 00		 mov	 DWORD PTR [esi+32], 8192 ; 00002000H
  0004a	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00051	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00058	c7 46 48 ff ff
	ff ff		 mov	 DWORD PTR [esi+72], -1
  0005f	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00066	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0006d	8a 02		 mov	 al, BYTE PTR [edx]
  0006f	84 c0		 test	 al, al
  00071	0f 84 92 01 00
	00		 je	 $LN49@gz_open
$LL2@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00077	0f be c8	 movsx	 ecx, al
  0007a	2c 30		 sub	 al, 48			; 00000030H
  0007c	3c 09		 cmp	 al, 9
  0007e	77 08		 ja	 SHORT $LN8@gz_open

; 125  :             state->level = *mode - '0';

  00080	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00083	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00086	eb 66		 jmp	 SHORT $LN21@gz_open
$LN8@gz_open:

; 126  :         else
; 127  :             switch (*mode) {

  00088	8d 41 d5	 lea	 eax, DWORD PTR [ecx-43]
  0008b	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  0008e	77 5e		 ja	 SHORT $LN21@gz_open
  00090	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN51@gz_open[eax]
  00097	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN55@gz_open[eax*4]
$LN10@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  0009e	c7 46 10 4f 1c
	00 00		 mov	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000a5	eb 47		 jmp	 SHORT $LN21@gz_open
$LN11@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000a7	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H

; 134  :                 break;

  000ae	eb 3e		 jmp	 SHORT $LN21@gz_open
$LN12@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000b0	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 137  :                 break;

  000b7	eb 35		 jmp	 SHORT $LN21@gz_open
$LN15@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000b9	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _exclusive$1$[esp+24], 1

; 152  :                 break;

  000c1	eb 2b		 jmp	 SHORT $LN21@gz_open
$LN16@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000c3	c7 46 4c 01 00
	00 00		 mov	 DWORD PTR [esi+76], 1

; 156  :                 break;

  000ca	eb 22		 jmp	 SHORT $LN21@gz_open
$LN17@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000cc	c7 46 4c 02 00
	00 00		 mov	 DWORD PTR [esi+76], 2

; 159  :                 break;

  000d3	eb 19		 jmp	 SHORT $LN21@gz_open
$LN18@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000d5	c7 46 4c 03 00
	00 00		 mov	 DWORD PTR [esi+76], 3

; 162  :                 break;

  000dc	eb 10		 jmp	 SHORT $LN21@gz_open
$LN19@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000de	c7 46 4c 04 00
	00 00		 mov	 DWORD PTR [esi+76], 4

; 165  :                 break;

  000e5	eb 07		 jmp	 SHORT $LN21@gz_open
$LN20@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000e7	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN21@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000ee	8a 42 01	 mov	 al, BYTE PTR [edx+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000f1	42		 inc	 edx
  000f2	84 c0		 test	 al, al
  000f4	75 81		 jne	 SHORT $LL2@gz_open

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  000f6	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000f9	85 c0		 test	 eax, eax
  000fb	0f 84 08 01 00
	00		 je	 $LN49@gz_open

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  00101	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00106	75 11		 jne	 SHORT $LN23@gz_open

; 183  :         if (state->direct) {

  00108	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0010c	0f 85 f7 00 00
	00		 jne	 $LN49@gz_open

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  00112	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN23@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef WIDECHAR
; 192  :     if (fd == -2) {

  00119	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0011c	75 18		 jne	 SHORT $LN25@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  0011e	6a 00		 push	 0
  00120	57		 push	 edi
  00121	6a 00		 push	 0
  00123	e8 00 00 00 00	 call	 _wcstombs
  00128	8b f8		 mov	 edi, eax
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (z_size_t)-1)

  0012d	83 ff ff	 cmp	 edi, -1
  00130	75 17		 jne	 SHORT $LN26@gz_open

; 195  :             len = 0;

  00132	33 ff		 xor	 edi, edi

; 196  :     }

  00134	eb 13		 jmp	 SHORT $LN26@gz_open
$LN25@gz_open:

; 197  :     else
; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00136	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL52@gz_open:
  00140	8a 07		 mov	 al, BYTE PTR [edi]
  00142	47		 inc	 edi
  00143	84 c0		 test	 al, al
  00145	75 f9		 jne	 SHORT $LL52@gz_open
  00147	2b f9		 sub	 edi, ecx
$LN26@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  00149	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _malloc
  00152	83 c4 04	 add	 esp, 4
  00155	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 201  :     if (state->path == NULL) {

  00158	85 c0		 test	 eax, eax
  0015a	0f 84 a9 00 00
	00		 je	 $LN49@gz_open

; 202  :         free(state);
; 203  :         return NULL;
; 204  :     }
; 205  : #ifdef WIDECHAR
; 206  :     if (fd == -2)

  00160	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00163	75 1c		 jne	 SHORT $LN29@gz_open

; 207  :         if (len)

  00165	85 ff		 test	 edi, edi
  00167	74 13		 je	 SHORT $LN31@gz_open

; 208  :             wcstombs(state->path, path, len + 1);

  00169	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0016c	51		 push	 ecx
  0016d	ff 74 24 14	 push	 DWORD PTR _path$1$[esp+28]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _wcstombs
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017a	eb 1b		 jmp	 SHORT $LN30@gz_open
$LN31@gz_open:

; 209  :         else
; 210  :             *(state->path) = 0;

  0017c	c6 00 00	 mov	 BYTE PTR [eax], 0
  0017f	eb 16		 jmp	 SHORT $LN30@gz_open
$LN29@gz_open:

; 211  :     else
; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         (void)snprintf(state->path, len + 1, "%s", (const char *)path);

  00181	ff 74 24 10	 push	 DWORD PTR _path$1$[esp+24]
  00185	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0018d	51		 push	 ecx
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _snprintf
  00194	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =

  00197	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0019a	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0019f	75 04		 jne	 SHORT $LN38@gz_open
  001a1	33 c9		 xor	 ecx, ecx
  001a3	eb 26		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001a5	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  001aa	b9 08 00 00 00	 mov	 ecx, 8
  001af	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001b4	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  001b9	0f 44 ca	 cmove	 ecx, edx
  001bc	bf 01 05 00 00	 mov	 edi, 1281		; 00000501H
  001c1	83 7c 24 14 00	 cmp	 DWORD PTR _exclusive$1$[esp+24], 0
  001c6	0f 45 c7	 cmovne	 eax, edi
  001c9	0b c8		 or	 ecx, eax
$LN39@gz_open:
  001cb	81 c9 00 80 00
	00		 or	 ecx, 32768		; 00008000H

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  001d1	83 fb ff	 cmp	 ebx, -1
  001d4	7f 20		 jg	 SHORT $LN41@gz_open
  001d6	68 b6 01 00 00	 push	 438			; 000001b6H
  001db	51		 push	 ecx
  001dc	ff 74 24 18	 push	 DWORD PTR _path$1$[esp+32]
  001e0	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  001e3	75 07		 jne	 SHORT $LN40@gz_open
  001e5	e8 00 00 00 00	 call	 __wopen
  001ea	eb 05		 jmp	 SHORT $LN53@gz_open
$LN40@gz_open:
  001ec	e8 00 00 00 00	 call	 __open
$LN53@gz_open:
  001f1	8b d8		 mov	 ebx, eax
  001f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@gz_open:
  001f6	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 242  : #ifdef WIDECHAR
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));
; 246  :     if (state->fd == -1) {

  001f9	83 fb ff	 cmp	 ebx, -1
  001fc	75 1d		 jne	 SHORT $LN33@gz_open

; 247  :         free(state->path);

  001fe	ff 76 18	 push	 DWORD PTR [esi+24]
  00201	e8 00 00 00 00	 call	 _free
  00206	83 c4 04	 add	 esp, 4
$LN49@gz_open:

; 267  : }

  00209	56		 push	 esi
  0020a	e8 00 00 00 00	 call	 _free
  0020f	83 c4 04	 add	 esp, 4
$LN50@gz_open:
  00212	33 c0		 xor	 eax, eax
  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
$LN33@gz_open:

; 248  :         free(state);
; 249  :         return NULL;
; 250  :     }
; 251  :     if (state->mode == GZ_APPEND) {

  0021b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0021e	83 f8 01	 cmp	 eax, 1
  00221	75 26		 jne	 SHORT $LN34@gz_open

; 252  :         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */

  00223	6a 02		 push	 2
  00225	6a 00		 push	 0
  00227	6a 00		 push	 0
  00229	53		 push	 ebx
  0022a	e8 00 00 00 00	 call	 __lseeki64
  0022f	83 c4 10	 add	 esp, 16			; 00000010H

; 253  :         state->mode = GZ_WRITE;         /* simplify later checks */

  00232	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  00239	8b ce		 mov	 ecx, esi
  0023b	e8 00 00 00 00	 call	 _gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  00240	8b c6		 mov	 eax, esi

; 267  : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
$LN34@gz_open:

; 254  :     }
; 255  : 
; 256  :     /* save the current position for rewinding (only if reading) */
; 257  :     if (state->mode == GZ_READ) {

  00249	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0024e	75 2c		 jne	 SHORT $LN36@gz_open

; 258  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00250	6a 01		 push	 1
  00252	6a 00		 push	 0
  00254	6a 00		 push	 0
  00256	53		 push	 ebx
  00257	e8 00 00 00 00	 call	 __lseeki64

; 259  :         if (state->start == -1) state->start = 0;

  0025c	8b c8		 mov	 ecx, eax
  0025e	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00261	23 ca		 and	 ecx, edx
  00263	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  00266	83 c4 10	 add	 esp, 16			; 00000010H
  00269	83 f9 ff	 cmp	 ecx, -1
  0026c	75 0e		 jne	 SHORT $LN36@gz_open
  0026e	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00275	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN36@gz_open:

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  0027c	8b ce		 mov	 ecx, esi
  0027e	e8 00 00 00 00	 call	 _gz_reset

; 267  : }

  00283	5f		 pop	 edi
  00284	8b c6		 mov	 eax, esi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx
  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c3		 ret	 0
$LN55@gz_open:
  0028c	00 00 00 00	 DD	 $LN49@gz_open
  00290	00 00 00 00	 DD	 $LN19@gz_open
  00294	00 00 00 00	 DD	 $LN18@gz_open
  00298	00 00 00 00	 DD	 $LN20@gz_open
  0029c	00 00 00 00	 DD	 $LN12@gz_open
  002a0	00 00 00 00	 DD	 $LN16@gz_open
  002a4	00 00 00 00	 DD	 $LN17@gz_open
  002a8	00 00 00 00	 DD	 $LN10@gz_open
  002ac	00 00 00 00	 DD	 $LN11@gz_open
  002b0	00 00 00 00	 DD	 $LN15@gz_open
  002b4	00 00 00 00	 DD	 $LN21@gz_open
$LN51@gz_open:
  002b8	00		 DB	 0
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	0a		 DB	 10			; 0000000aH
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	0a		 DB	 10			; 0000000aH
  002c3	0a		 DB	 10			; 0000000aH
  002c4	0a		 DB	 10			; 0000000aH
  002c5	0a		 DB	 10			; 0000000aH
  002c6	0a		 DB	 10			; 0000000aH
  002c7	0a		 DB	 10			; 0000000aH
  002c8	0a		 DB	 10			; 0000000aH
  002c9	0a		 DB	 10			; 0000000aH
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	0a		 DB	 10			; 0000000aH
  002d0	0a		 DB	 10			; 0000000aH
  002d1	0a		 DB	 10			; 0000000aH
  002d2	0a		 DB	 10			; 0000000aH
  002d3	01		 DB	 1
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	0a		 DB	 10			; 0000000aH
  002d7	0a		 DB	 10			; 0000000aH
  002d8	0a		 DB	 10			; 0000000aH
  002d9	0a		 DB	 10			; 0000000aH
  002da	0a		 DB	 10			; 0000000aH
  002db	0a		 DB	 10			; 0000000aH
  002dc	0a		 DB	 10			; 0000000aH
  002dd	0a		 DB	 10			; 0000000aH
  002de	0a		 DB	 10			; 0000000aH
  002df	02		 DB	 2
  002e0	0a		 DB	 10			; 0000000aH
  002e1	03		 DB	 3
  002e2	0a		 DB	 10			; 0000000aH
  002e3	0a		 DB	 10			; 0000000aH
  002e4	0a		 DB	 10			; 0000000aH
  002e5	0a		 DB	 10			; 0000000aH
  002e6	0a		 DB	 10			; 0000000aH
  002e7	0a		 DB	 10			; 0000000aH
  002e8	0a		 DB	 10			; 0000000aH
  002e9	0a		 DB	 10			; 0000000aH
  002ea	0a		 DB	 10			; 0000000aH
  002eb	0a		 DB	 10			; 0000000aH
  002ec	0a		 DB	 10			; 0000000aH
  002ed	0a		 DB	 10			; 0000000aH
  002ee	04		 DB	 4
  002ef	0a		 DB	 10			; 0000000aH
  002f0	0a		 DB	 10			; 0000000aH
  002f1	0a		 DB	 10			; 0000000aH
  002f2	0a		 DB	 10			; 0000000aH
  002f3	05		 DB	 5
  002f4	0a		 DB	 10			; 0000000aH
  002f5	06		 DB	 6
  002f6	0a		 DB	 10			; 0000000aH
  002f7	0a		 DB	 10			; 0000000aH
  002f8	0a		 DB	 10			; 0000000aH
  002f9	0a		 DB	 10			; 0000000aH
  002fa	0a		 DB	 10			; 0000000aH
  002fb	0a		 DB	 10			; 0000000aH
  002fc	0a		 DB	 10			; 0000000aH
  002fd	0a		 DB	 10			; 0000000aH
  002fe	0a		 DB	 10			; 0000000aH
  002ff	07		 DB	 7
  00300	0a		 DB	 10			; 0000000aH
  00301	0a		 DB	 10			; 0000000aH
  00302	0a		 DB	 10			; 0000000aH
  00303	0a		 DB	 10			; 0000000aH
  00304	08		 DB	 8
  00305	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 275  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 290  :     char *path;         /* identifier for error messages */
; 291  :     gzFile gz;
; 292  : 
; 293  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3d		 je	 SHORT $LN3@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	e8 00 00 00 00	 call	 _malloc
  00014	8b f8		 mov	 edi, eax
  00016	83 c4 04	 add	 esp, 4
  00019	85 ff		 test	 edi, edi
  0001b	74 2d		 je	 SHORT $LN3@gzdopen

; 295  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 296  :     (void)snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd);

  0001d	56		 push	 esi
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
  00023	6a 13		 push	 19			; 00000013H
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 _snprintf

; 297  : #else
; 298  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 299  : #endif
; 300  :     gz = gz_open(path, fd, mode);

  0002b	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002e	8b d6		 mov	 edx, esi
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 _gz_open

; 301  :     free(path);

  00037	57		 push	 edi
  00038	8b f0		 mov	 esi, eax
  0003a	e8 00 00 00 00	 call	 _free
  0003f	83 c4 18	 add	 esp, 24			; 00000018H

; 302  :     return gz;

  00042	8b c6		 mov	 eax, esi
  00044	5f		 pop	 edi

; 303  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN3@gzdopen:
  0004a	5f		 pop	 edi

; 294  :         return NULL;

  0004b	33 c0		 xor	 eax, eax

; 303  : }

  0004d	5e		 pop	 esi
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 312  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  :     gz_statep state;
; 321  : 
; 322  :     /* get internal structure and check integrity */
; 323  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 34		 je	 SHORT $LN8@gzbuffer

; 324  :         return -1;
; 325  :     state = (gz_statep)file;
; 326  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gzbuffer
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 23		 jne	 SHORT $LN8@gzbuffer
$LN3@gzbuffer:

; 327  :         return -1;
; 328  : 
; 329  :     /* make sure we haven't already allocated memory */
; 330  :     if (state->size != 0)

  0001b	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  0001f	75 1d		 jne	 SHORT $LN8@gzbuffer

; 331  :         return -1;
; 332  : 
; 333  :     /* check and set requested size */
; 334  :     if ((size << 1) < size)

  00021	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00024	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00027	3b c2		 cmp	 eax, edx
  00029	72 13		 jb	 SHORT $LN8@gzbuffer

; 336  :     if (size < 2)
; 337  :         size = 2;               /* need two bytes to check magic header */
; 338  :     state->want = size;

  0002b	b8 02 00 00 00	 mov	 eax, 2
  00030	3b d0		 cmp	 edx, eax
  00032	0f 43 c2	 cmovae	 eax, edx
  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 339  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 340  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN8@gzbuffer:

; 335  :         return -1;              /* need to be able to double it */

  0003e	83 c8 ff	 or	 eax, -1

; 340  : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 346  :     gz_statep state;
; 347  : 
; 348  :     /* get internal structure */
; 349  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 3f		 je	 SHORT $LN4@gzrewind

; 350  :         return -1;
; 351  :     state = (gz_statep)file;
; 352  : 
; 353  :     /* check that we're reading and that there's no error */
; 354  :     if (state->mode != GZ_READ ||

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 36		 jne	 SHORT $LN4@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2a		 jne	 SHORT $LN4@gzrewind
$LN3@gzrewind:

; 357  : 
; 358  :     /* back up and start over */
; 359  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	e8 00 00 00 00	 call	 __lseeki64
  00034	23 c2		 and	 eax, edx
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	74 10		 je	 SHORT $LN4@gzrewind

; 360  :         return -1;
; 361  :     gz_reset(state);

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 _gz_reset

; 362  :     return 0;

  00045	33 c0		 xor	 eax, eax

; 363  : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN4@gzrewind:

; 355  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 356  :         return -1;

  0004e	83 c8 ff	 or	 eax, -1

; 363  : }

  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv490 = 8						; size = 8
_offset$ = 8						; size = 8
_gzseek64@16 PROC					; COMDAT
; _file$ = ecx
; _whence$ = edx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 371  :     unsigned n;
; 372  :     z_off64_t ret;
; 373  :     gz_statep state;
; 374  : 
; 375  :     /* get internal structure and check integrity */
; 376  :     if (file == NULL)

  00009	85 f6		 test	 esi, esi
  0000b	0f 84 71 01 00
	00		 je	 $LN25@gzseek64

; 377  :         return -1;
; 378  :     state = (gz_statep)file;
; 379  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00014	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  0001a	74 0c		 je	 SHORT $LN23@gzseek64
  0001c	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  00022	0f 85 5a 01 00
	00		 jne	 $LN25@gzseek64
$LN23@gzseek64:

; 380  :         return -1;
; 381  : 
; 382  :     /* check that there's no error */
; 383  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00028	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0002b	85 c0		 test	 eax, eax
  0002d	74 09		 je	 SHORT $LN4@gzseek64
  0002f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00032	0f 85 4a 01 00
	00		 jne	 $LN25@gzseek64
$LN4@gzseek64:

; 384  :         return -1;
; 385  : 
; 386  :     /* can only seek from start or relative to current position */
; 387  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00038	85 d2		 test	 edx, edx
  0003a	74 1d		 je	 SHORT $LN22@gzseek64
  0003c	83 fa 01	 cmp	 edx, 1
  0003f	0f 85 3d 01 00
	00		 jne	 $LN25@gzseek64

; 393  :     else if (state->seek)

  00045	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00049	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  0004c	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0004f	74 14		 je	 SHORT $LN8@gzseek64

; 394  :         offset += state->skip;

  00051	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00054	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00057	eb 0c		 jmp	 SHORT $LN8@gzseek64
$LN22@gzseek64:

; 388  :         return -1;
; 389  : 
; 390  :     /* normalize offset to a SEEK_CUR specification */
; 391  :     if (whence == SEEK_SET)
; 392  :         offset -= state->x.pos;

  00059	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  0005c	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0005f	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  00062	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN8@gzseek64:

; 395  :     state->seek = 0;

  00065	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 396  : 
; 397  :     /* if within raw area while reading, just go there */
; 398  :     if (state->mode == GZ_READ && state->how == COPY &&

  0006c	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00072	0f 85 8a 00 00
	00		 jne	 $LN9@gzseek64
  00078	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  0007c	0f 85 80 00 00
	00		 jne	 $LN9@gzseek64
  00082	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00085	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00088	03 d7		 add	 edx, edi
  0008a	13 c3		 adc	 eax, ebx
  0008c	89 45 0c	 mov	 DWORD PTR tv490[ebp+4], eax
  0008f	78 71		 js	 SHORT $LN9@gzseek64
  00091	7f 04		 jg	 SHORT $LN26@gzseek64
  00093	85 d2		 test	 edx, edx
  00095	72 6b		 jb	 SHORT $LN9@gzseek64
$LN26@gzseek64:

; 399  :             state->x.pos + offset >= 0) {
; 400  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00097	8b cf		 mov	 ecx, edi
  00099	8b c3		 mov	 eax, ebx
  0009b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0009d	6a 01		 push	 1
  0009f	83 d8 00	 sbb	 eax, 0
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	ff 76 14	 push	 DWORD PTR [esi+20]
  000a7	e8 00 00 00 00	 call	 __lseeki64

; 401  :         if (ret == -1)

  000ac	23 c2		 and	 eax, edx
  000ae	83 c4 10	 add	 esp, 16			; 00000010H
  000b1	83 f8 ff	 cmp	 eax, -1
  000b4	0f 84 c8 00 00
	00		 je	 $LN25@gzseek64

; 402  :             return -1;
; 403  :         state->x.have = 0;
; 404  :         state->eof = 0;
; 405  :         state->past = 0;
; 406  :         state->seek = 0;
; 407  :         gz_error(state, Z_OK, NULL);

  000ba	6a 00		 push	 0
  000bc	33 d2		 xor	 edx, edx
  000be	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000c4	8b ce		 mov	 ecx, esi
  000c6	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000cd	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000d4	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000db	e8 00 00 00 00	 call	 _gz_error

; 408  :         state->strm.avail_in = 0;
; 409  :         state->x.pos += offset;

  000e0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e3	83 c4 04	 add	 esp, 4
  000e6	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000e9	03 c7		 add	 eax, edi
  000eb	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  000f2	13 d3		 adc	 edx, ebx
  000f4	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f7	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 440  : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	59		 pop	 ecx
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
$LN9@gzseek64:

; 410  :         return state->x.pos;
; 411  :     }
; 412  : 
; 413  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 414  :     if (offset < 0) {

  00102	85 db		 test	 ebx, ebx
  00104	7f 27		 jg	 SHORT $LN20@gzseek64
  00106	7c 04		 jl	 SHORT $LN27@gzseek64
  00108	85 ff		 test	 edi, edi
  0010a	73 21		 jae	 SHORT $LN20@gzseek64
$LN27@gzseek64:

; 415  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  0010c	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00112	75 6e		 jne	 SHORT $LN25@gzseek64

; 416  :             return -1;
; 417  :         offset += state->x.pos;

  00114	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00117	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 418  :         if (offset < 0)                     /* before start of file! */

  0011a	78 66		 js	 SHORT $LN25@gzseek64
  0011c	7f 04		 jg	 SHORT $LN28@gzseek64
  0011e	85 ff		 test	 edi, edi
  00120	72 60		 jb	 SHORT $LN25@gzseek64
$LN28@gzseek64:

; 419  :             return -1;
; 420  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00122	56		 push	 esi
  00123	e8 00 00 00 00	 call	 _gzrewind@4
  00128	83 f8 ff	 cmp	 eax, -1
  0012b	74 55		 je	 SHORT $LN25@gzseek64
$LN20@gzseek64:

; 421  :             return -1;
; 422  :     }
; 423  : 
; 424  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 425  :     if (state->mode == GZ_READ) {

  0012d	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00134	75 27		 jne	 SHORT $LN24@gzseek64

; 426  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  00136	8b 06		 mov	 eax, DWORD PTR [esi]
  00138	33 c9		 xor	 ecx, ecx
  0013a	3b cb		 cmp	 ecx, ebx
  0013c	7f 0a		 jg	 SHORT $LN18@gzseek64
  0013e	7c 04		 jl	 SHORT $LN29@gzseek64
  00140	3b c7		 cmp	 eax, edi
  00142	77 04		 ja	 SHORT $LN18@gzseek64
$LN29@gzseek64:
  00144	8b c8		 mov	 ecx, eax
  00146	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  00148	8b cf		 mov	 ecx, edi
$LN19@gzseek64:

; 427  :             (unsigned)offset : state->x.have;
; 428  :         state->x.have -= n;
; 429  :         state->x.next += n;

  0014a	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  0014d	2b c1		 sub	 eax, ecx

; 430  :         state->x.pos += n;

  0014f	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  00152	89 06		 mov	 DWORD PTR [esi], eax
  00154	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 431  :         offset -= n;

  00158	2b f9		 sub	 edi, ecx
  0015a	83 db 00	 sbb	 ebx, 0
$LN24@gzseek64:

; 432  :     }
; 433  : 
; 434  :     /* request skip (if not zero) */
; 435  :     if (offset) {

  0015d	8b c7		 mov	 eax, edi
  0015f	0b c3		 or	 eax, ebx
  00161	74 0d		 je	 SHORT $LN16@gzseek64

; 436  :         state->seek = 1;

  00163	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 437  :         state->skip = offset;

  0016a	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  0016d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN16@gzseek64:

; 438  :     }
; 439  :     return state->x.pos + offset;

  00170	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00173	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00176	03 c7		 add	 eax, edi
  00178	13 d3		 adc	 edx, ebx

; 440  : }

  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	59		 pop	 ecx
  0017e	5d		 pop	 ebp
  0017f	c2 08 00	 ret	 8
$LN25@gzseek64:
  00182	5f		 pop	 edi
  00183	83 c8 ff	 or	 eax, -1
  00186	5e		 pop	 esi
  00187	0b d0		 or	 edx, eax
  00189	5b		 pop	 ebx
  0018a	59		 pop	 ecx
  0018b	5d		 pop	 ebp
  0018c	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 448  :     z_off64_t ret;
; 449  : 
; 450  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 452  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 452  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 458  :     gz_statep state;
; 459  : 
; 460  :     /* get internal structure and check integrity */
; 461  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	74 4a		 je	 SHORT $LN7@gztell64

; 462  :         return -1;
; 463  :     state = (gz_statep)file;
; 464  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gztell64
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 39		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  0001b	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  0001f	56		 push	 esi
  00020	74 15		 je	 SHORT $LN5@gztell64
  00022	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00028	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  0002b	03 c2		 add	 eax, edx
  0002d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00030	13 d6		 adc	 edx, esi
  00032	5e		 pop	 esi

; 469  : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN5@gztell64:

; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  00037	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  00042	8b 55 f8	 mov	 edx, DWORD PTR tv73[ebp]
  00045	03 c2		 add	 eax, edx
  00047	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  0004a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0004d	13 d6		 adc	 edx, esi
  0004f	5e		 pop	 esi

; 469  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN7@gztell64:

; 465  :         return -1;

  00054	83 c8 ff	 or	 eax, -1
  00057	0b d0		 or	 edx, eax

; 469  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 475  :     z_off64_t ret;
; 476  : 
; 477  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 479  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 479  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 484  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 485  :     z_off64_t offset;
; 486  :     gz_statep state;
; 487  : 
; 488  :     /* get internal structure and check integrity */
; 489  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	74 3c		 je	 SHORT $LN7@gzoffset64

; 490  :         return -1;
; 491  :     state = (gz_statep)file;
; 492  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000f	74 07		 je	 SHORT $LN3@gzoffset64
  00011	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00016	75 2b		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 493  :         return -1;
; 494  : 
; 495  :     /* compute and return effective offset in file */
; 496  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  00018	6a 01		 push	 1
  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	ff 76 14	 push	 DWORD PTR [esi+20]
  00021	e8 00 00 00 00	 call	 __lseeki64

; 497  :     if (offset == -1)

  00026	8b c8		 mov	 ecx, eax
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	23 ca		 and	 ecx, edx
  0002d	83 f9 ff	 cmp	 ecx, -1
  00030	74 11		 je	 SHORT $LN7@gzoffset64

; 499  :     if (state->mode == GZ_READ)             /* reading */

  00032	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00039	75 0d		 jne	 SHORT $LN1@gzoffset64

; 500  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  0003b	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  0003e	83 da 00	 sbb	 edx, 0

; 501  :     return offset;
; 502  : }

  00041	5e		 pop	 esi
  00042	c3		 ret	 0
$LN7@gzoffset64:

; 498  :         return -1;

  00043	83 c8 ff	 or	 eax, -1
  00046	0b d0		 or	 edx, eax
$LN1@gzoffset64:

; 501  :     return offset;
; 502  : }

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 508  :     z_off64_t ret;
; 509  : 
; 510  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 512  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 512  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  :     gz_statep state;
; 519  : 
; 520  :     /* get internal structure and check integrity */
; 521  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 12		 je	 SHORT $LN8@gzeof

; 522  :         return 0;
; 523  :     state = (gz_statep)file;
; 524  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00013	75 07		 jne	 SHORT $LN8@gzeof

; 525  :         return 0;
; 526  : 
; 527  :     /* return end-of-file state */
; 528  :     return state->mode == GZ_READ ? state->past : 0;

  00015	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 529  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN8@gzeof:
  0001c	33 c0		 xor	 eax, eax
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :     gz_statep state;
; 537  : 
; 538  :     /* get internal structure and check integrity */
; 539  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3d		 je	 SHORT $LN10@gzerror

; 540  :         return NULL;
; 541  :     state = (gz_statep)file;
; 542  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gzerror
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 2c		 jne	 SHORT $LN10@gzerror
$LN3@gzerror:

; 544  : 
; 545  :     /* return error information */
; 546  :     if (errnum != NULL)

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  0001e	85 d2		 test	 edx, edx
  00020	74 05		 je	 SHORT $LN4@gzerror

; 547  :         *errnum = state->err;

  00022	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN4@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00027	83 79 5c fc	 cmp	 DWORD PTR [ecx+92], -4	; fffffffcH
  0002b	75 09		 jne	 SHORT $LN8@gzerror
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN8@gzerror:

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00036	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  00039	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  0003e	85 c9		 test	 ecx, ecx
  00040	0f 45 c1	 cmovne	 eax, ecx

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN10@gzerror:

; 543  :         return NULL;

  00047	33 c0		 xor	 eax, eax

; 549  :                                        (state->msg == NULL ? "" : state->msg);
; 550  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  :     gz_statep state;
; 557  : 
; 558  :     /* get internal structure and check integrity */
; 559  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@gzclearerr

; 560  :         return;
; 561  :     state = (gz_statep)file;
; 562  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 17		 je	 SHORT $LN6@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 2a		 jne	 SHORT $LN1@gzclearerr

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;
; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  0001b	6a 00		 push	 0
  0001d	33 d2		 xor	 edx, edx
  0001f	e8 00 00 00 00	 call	 _gz_error
  00024	83 c4 04	 add	 esp, 4

; 571  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN6@gzclearerr:

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;
; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  0002b	6a 00		 push	 0
  0002d	33 d2		 xor	 edx, edx
  0002f	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  00036	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  0003d	e8 00 00 00 00	 call	 _gz_error
  00042	83 c4 04	 add	 esp, 4
$LN1@gzclearerr:

; 571  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv150 = 8						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx

; 584  :     /* free previously allocated message and clear */
; 585  :     if (state->msg != NULL) {

  0000a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 16		 je	 SHORT $LN2@gz_error

; 586  :         if (state->err != Z_MEM_ERROR)

  00011	83 7e 5c fc	 cmp	 DWORD PTR [esi+92], -4	; fffffffcH
  00015	74 09		 je	 SHORT $LN3@gz_error

; 587  :             free(state->msg);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
$LN3@gz_error:

; 588  :         state->msg = NULL;

  00020	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN2@gz_error:

; 589  :     }
; 590  : 
; 591  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 592  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00027	85 ff		 test	 edi, edi
  00029	74 0b		 je	 SHORT $LN4@gz_error
  0002b	83 ff fb	 cmp	 edi, -5			; fffffffbH
  0002e	74 06		 je	 SHORT $LN4@gz_error

; 593  :         state->x.have = 0;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@gz_error:

; 594  : 
; 595  :     /* set error code, and if no message, then done */
; 596  :     state->err = err;
; 597  :     if (msg == NULL)

  00036	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  00039	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  0003c	85 db		 test	 ebx, ebx
  0003e	0f 84 86 00 00
	00		 je	 $LN1@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* for an out of memory error, return literal string when requested */
; 601  :     if (err == Z_MEM_ERROR)

  00044	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00047	0f 84 7d 00 00
	00		 je	 $LN1@gz_error

; 602  :         return;
; 603  : 
; 604  :     /* construct error message with path */
; 605  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  0004d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00050	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@gz_error:
  00053	8a 01		 mov	 al, BYTE PTR [ecx]
  00055	41		 inc	 ecx
  00056	84 c0		 test	 al, al
  00058	75 f9		 jne	 SHORT $LL9@gz_error
  0005a	2b ca		 sub	 ecx, edx
  0005c	8b d3		 mov	 edx, ebx
  0005e	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL10@gz_error:
  00061	8a 02		 mov	 al, BYTE PTR [edx]
  00063	42		 inc	 edx
  00064	84 c0		 test	 al, al
  00066	75 f9		 jne	 SHORT $LL10@gz_error
  00068	2b d7		 sub	 edx, edi
  0006a	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006d	03 c2		 add	 eax, edx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _malloc
  00075	83 c4 04	 add	 esp, 4
  00078	89 45 08	 mov	 DWORD PTR tv150[ebp], eax
  0007b	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0007e	85 c0		 test	 eax, eax
  00080	75 0c		 jne	 SHORT $LN7@gz_error

; 606  :             NULL) {
; 607  :         state->err = Z_MEM_ERROR;

  00082	c7 46 5c fc ff
	ff ff		 mov	 DWORD PTR [esi+92], -4	; fffffffcH

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN7@gz_error:

; 608  :         return;
; 609  :     }
; 610  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 611  :     (void)snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  0008e	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00091	8b ce		 mov	 ecx, esi
  00093	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL11@gz_error:
  00096	8a 01		 mov	 al, BYTE PTR [ecx]
  00098	41		 inc	 ecx
  00099	84 c0		 test	 al, al
  0009b	75 f9		 jne	 SHORT $LL11@gz_error
  0009d	2b ca		 sub	 ecx, edx
  0009f	8b d3		 mov	 edx, ebx
  000a1	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL12@gz_error:
  000a4	8a 02		 mov	 al, BYTE PTR [edx]
  000a6	42		 inc	 edx
  000a7	84 c0		 test	 al, al
  000a9	75 f9		 jne	 SHORT $LL12@gz_error
  000ab	53		 push	 ebx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  000b1	56		 push	 esi
  000b2	2b d7		 sub	 edx, edi
  000b4	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
  000bc	03 c2		 add	 eax, edx
  000be	50		 push	 eax
  000bf	ff 75 08	 push	 DWORD PTR tv150[ebp]
  000c2	e8 00 00 00 00	 call	 _snprintf
  000c7	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@gz_error:

; 612  :                    "%s%s%s", state->path, ": ", msg);
; 613  : #else
; 614  :     strcpy(state->msg, state->path);
; 615  :     strcat(state->msg, ": ");
; 616  :     strcat(state->msg, msg);
; 617  : #endif
; 618  : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
