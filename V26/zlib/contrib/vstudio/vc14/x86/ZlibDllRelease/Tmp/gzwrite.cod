; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	c:\prj\visiator_windows\v26\zlib\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ ; `string'
EXTRN	__write:PROC
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ DB 'requested le'
	DB	'ngth does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ DB 'internal err'
	DB	'or: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams@12
PUBLIC	_gzflush@8
PUBLIC	_gzprintf
PUBLIC	_gzvprintf
PUBLIC	_gzputs@8
PUBLIC	_gzputc@8
PUBLIC	_gzfwrite@16
PUBLIC	_gzwrite@12
PUBLIC	_gzclose_w@4
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzclose_w@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w@4 PROC					; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	56		 push	 esi

; 630  :     int ret = Z_OK;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00007	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 ab 00 00
	00		 je	 $LN11@gzclose_w

; 635  :         return Z_STREAM_ERROR;
; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're writing */
; 639  :     if (state->mode != GZ_WRITE)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 9e 00 00
	00		 jne	 $LN11@gzclose_w

; 640  :         return Z_STREAM_ERROR;
; 641  : 
; 642  :     /* check for seek request */
; 643  :     if (state->seek) {

  00022	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00025	74 1b		 je	 SHORT $LN5@gzclose_w

; 644  :         state->seek = 0;
; 645  :         if (gz_zero(state, state->skip) == -1)

  00027	ff 76 54	 push	 DWORD PTR [esi+84]
  0002a	8b ce		 mov	 ecx, esi
  0002c	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  0002f	ff 76 50	 push	 DWORD PTR [esi+80]
  00032	e8 00 00 00 00	 call	 _gz_zero
  00037	83 c4 08	 add	 esp, 8
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	75 03		 jne	 SHORT $LN5@gzclose_w

; 646  :             ret = state->err;

  0003f	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN5@gzclose_w:

; 647  :     }
; 648  : 
; 649  :     /* flush, free memory, and close file */
; 650  :     if (gz_comp(state, Z_FINISH) == -1)

  00042	ba 04 00 00 00	 mov	 edx, 4
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 _gz_comp
  0004e	83 f8 ff	 cmp	 eax, -1
  00051	75 03		 jne	 SHORT $LN6@gzclose_w

; 651  :         ret = state->err;

  00053	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN6@gzclose_w:

; 652  :     if (state->size) {

  00056	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0005a	74 25		 je	 SHORT $LN7@gzclose_w

; 653  :         if (!state->direct) {

  0005c	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00060	75 14		 jne	 SHORT $LN8@gzclose_w

; 654  :             (void)deflateEnd(&(state->strm));

  00062	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _deflateEnd@4

; 655  :             free(state->out);

  0006b	ff 76 28	 push	 DWORD PTR [esi+40]
  0006e	e8 00 00 00 00	 call	 _free
  00073	83 c4 04	 add	 esp, 4
$LN8@gzclose_w:

; 656  :         }
; 657  :         free(state->in);

  00076	ff 76 24	 push	 DWORD PTR [esi+36]
  00079	e8 00 00 00 00	 call	 _free
  0007e	83 c4 04	 add	 esp, 4
$LN7@gzclose_w:

; 658  :     }
; 659  :     gz_error(state, Z_OK, NULL);

  00081	6a 00		 push	 0
  00083	33 d2		 xor	 edx, edx
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 _gz_error
  0008c	83 c4 04	 add	 esp, 4

; 660  :     free(state->path);

  0008f	ff 76 18	 push	 DWORD PTR [esi+24]
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4

; 661  :     if (close(state->fd) == -1)

  0009a	ff 76 14	 push	 DWORD PTR [esi+20]
  0009d	e8 00 00 00 00	 call	 __close
  000a2	83 c4 04	 add	 esp, 4
  000a5	83 c9 ff	 or	 ecx, -1
  000a8	3b c1		 cmp	 eax, ecx
  000aa	0f 44 f9	 cmove	 edi, ecx

; 662  :         ret = Z_ERRNO;
; 663  :     free(state);

  000ad	56		 push	 esi
  000ae	e8 00 00 00 00	 call	 _free
  000b3	83 c4 04	 add	 esp, 4

; 664  :     return ret;

  000b6	8b c7		 mov	 eax, edi

; 665  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
$LN11@gzclose_w:
  000c0	5f		 pop	 edi
  000c1	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c6	5e		 pop	 esi
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
_gzclose_w@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 19   : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 20   :     int ret;
; 21   :     z_streamp strm = &(state->strm);
; 22   : 
; 23   :     /* allocate input buffer (double size for gzprintf) */
; 24   :     state->in = (unsigned char *)malloc(state->want << 1);

  00005	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00008	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0000b	03 c0		 add	 eax, eax
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _malloc
  00013	83 c4 04	 add	 esp, 4
  00016	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 25   :     if (state->in == NULL) {

  00019	85 c0		 test	 eax, eax
  0001b	74 61		 je	 SHORT $LN8@gz_init

; 26   :         gz_error(state, Z_MEM_ERROR, "out of memory");
; 27   :         return -1;
; 28   :     }
; 29   : 
; 30   :     /* only need output buffer and deflate state if compressing */
; 31   :     if (!state->direct) {

  0001d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00020	85 c0		 test	 eax, eax
  00022	75 7e		 jne	 SHORT $LN3@gz_init

; 32   :         /* allocate output buffer */
; 33   :         state->out = (unsigned char *)malloc(state->want);

  00024	ff 76 20	 push	 DWORD PTR [esi+32]
  00027	e8 00 00 00 00	 call	 _malloc
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 34   :         if (state->out == NULL) {

  00032	85 c0		 test	 eax, eax
  00034	74 3d		 je	 SHORT $LN9@gz_init

; 35   :             free(state->in);
; 36   :             gz_error(state, Z_MEM_ERROR, "out of memory");
; 37   :             return -1;
; 38   :         }
; 39   : 
; 40   :         /* allocate deflate memory, set up for gzip compression */
; 41   :         strm->zalloc = Z_NULL;
; 42   :         strm->zfree = Z_NULL;
; 43   :         strm->opaque = Z_NULL;
; 44   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  00036	6a 38		 push	 56			; 00000038H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411@
  0003d	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00044	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  0004b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00052	ff 76 4c	 push	 DWORD PTR [esi+76]
  00055	6a 08		 push	 8
  00057	6a 1f		 push	 31			; 0000001fH
  00059	6a 08		 push	 8
  0005b	ff 76 48	 push	 DWORD PTR [esi+72]
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _deflateInit2_@32

; 45   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 46   :         if (ret != Z_OK) {

  00064	85 c0		 test	 eax, eax
  00066	74 31		 je	 SHORT $LN5@gz_init

; 47   :             free(state->out);

  00068	ff 76 28	 push	 DWORD PTR [esi+40]
  0006b	e8 00 00 00 00	 call	 _free
  00070	83 c4 04	 add	 esp, 4
$LN9@gz_init:

; 63   :     }
; 64   :     return 0;
; 65   : }

  00073	ff 76 24	 push	 DWORD PTR [esi+36]
  00076	e8 00 00 00 00	 call	 _free
  0007b	83 c4 04	 add	 esp, 4
$LN8@gz_init:
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@
  00083	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 _gz_error
  0008f	83 c4 04	 add	 esp, 4
  00092	83 c8 ff	 or	 eax, -1
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	59		 pop	 ecx
  00098	c3		 ret	 0
$LN5@gz_init:

; 48   :             free(state->in);
; 49   :             gz_error(state, Z_MEM_ERROR, "out of memory");
; 50   :             return -1;
; 51   :         }
; 52   :         strm->next_in = NULL;

  00099	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0009f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
$LN3@gz_init:

; 53   :     }
; 54   : 
; 55   :     /* mark state as initialized */
; 56   :     state->size = state->want;

  000a2	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000a5	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 57   : 
; 58   :     /* initialize write buffer if compressing */
; 59   :     if (!state->direct) {

  000a8	85 c0		 test	 eax, eax
  000aa	75 0c		 jne	 SHORT $LN6@gz_init

; 60   :         strm->avail_out = state->size;

  000ac	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 61   :         strm->next_out = state->out;

  000af	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000b2	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 62   :         state->x.next = strm->next_out;

  000b5	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN6@gz_init:

; 63   :     }
; 64   :     return 0;
; 65   : }

  000b8	5f		 pop	 edi
  000b9	33 c0		 xor	 eax, eax
  000bb	5e		 pop	 esi
  000bc	59		 pop	 ecx
  000bd	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	89 55 fc	 mov	 DWORD PTR _flush$1$[ebp], edx

; 77   :     int ret, writ;
; 78   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 79   :     z_streamp strm = &(state->strm);
; 80   : 
; 81   :     /* allocate memory if this is the first time through */
; 82   :     if (state->size == 0 && gz_init(state) == -1)

  0000c	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00010	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  00013	75 11		 jne	 SHORT $LN42@gz_comp
  00015	e8 00 00 00 00	 call	 _gz_init
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	0f 84 32 01 00
	00		 je	 $LN46@gz_comp
  00023	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
$LN42@gz_comp:

; 83   :         return -1;
; 84   : 
; 85   :     /* write directly if requested */
; 86   :     if (state->direct) {

  00026	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  0002a	74 6d		 je	 SHORT $LN10@gz_comp

; 87   :         while (strm->avail_in) {

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 01 01 00
	00		 je	 $LN18@gz_comp
  00037	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00039	bb 00 00 00 40	 mov	 ebx, 1073741824		; 40000000H
  0003e	66 90		 npad	 2
$LL2@gz_comp:

; 88   :             put = strm->avail_in > max ? max : strm->avail_in;

  00040	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  00045	0f 47 c3	 cmova	 eax, ebx

; 89   :             writ = write(state->fd, strm->next_in, put);

  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	ff 77 14	 push	 DWORD PTR [edi+20]
  0004d	e8 00 00 00 00	 call	 __write
  00052	8b c8		 mov	 ecx, eax
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :             if (writ < 0) {

  00057	85 c9		 test	 ecx, ecx
  00059	78 17		 js	 SHORT $LN27@gz_comp

; 91   :                 gz_error(state, Z_ERRNO, zstrerror());
; 92   :                 return -1;
; 93   :             }
; 94   :             strm->avail_in -= (unsigned)writ;

  0005b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 95   :             strm->next_in += writ;

  0005e	01 0e		 add	 DWORD PTR [esi], ecx
  00060	2b c1		 sub	 eax, ecx
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00067	85 c0		 test	 eax, eax
  00069	75 d5		 jne	 SHORT $LL2@gz_comp

; 141  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN27@gz_comp:
  00072	e8 00 00 00 00	 call	 __errno
  00077	ff 30		 push	 DWORD PTR [eax]
  00079	e8 00 00 00 00	 call	 _strerror
  0007e	83 c4 04	 add	 esp, 4
  00081	83 ca ff	 or	 edx, -1
  00084	8b cf		 mov	 ecx, edi
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _gz_error
  0008c	83 c4 04	 add	 esp, 4
  0008f	83 c8 ff	 or	 eax, -1
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN10@gz_comp:

; 96   :         }
; 97   :         return 0;
; 98   :     }
; 99   : 
; 100  :     /* run deflate() on provided input until it produces no more output */
; 101  :     ret = Z_OK;

  00099	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0009c	33 c9		 xor	 ecx, ecx
$LN48@gz_comp:

; 102  :     do {
; 103  :         /* write out current buffer contents if full, or if flushing, but if
; 104  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 105  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  0009e	bb 00 00 00 40	 mov	 ebx, 1073741824		; 40000000H
  000a3	85 c0		 test	 eax, eax
  000a5	74 15		 je	 SHORT $LN26@gz_comp
  000a7	8b d8		 mov	 ebx, eax
  000a9	85 d2		 test	 edx, edx
  000ab	74 62		 je	 SHORT $LN16@gz_comp
  000ad	83 fa 04	 cmp	 edx, 4
  000b0	75 05		 jne	 SHORT $LN45@gz_comp
  000b2	83 f9 01	 cmp	 ecx, 1
  000b5	75 58		 jne	 SHORT $LN16@gz_comp
$LN45@gz_comp:

; 106  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 107  :             while (strm->next_out > state->x.next) {

  000b7	bb 00 00 00 40	 mov	 ebx, 1073741824		; 40000000H
$LN26@gz_comp:
  000bc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000bf	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000c2	3b c1		 cmp	 eax, ecx
  000c4	76 2a		 jbe	 SHORT $LN41@gz_comp
$LL7@gz_comp:

; 108  :                 put = strm->next_out - state->x.next > (int)max ? max :

  000c6	2b c1		 sub	 eax, ecx
  000c8	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  000cd	0f 4f c3	 cmovg	 eax, ebx

; 109  :                       (unsigned)(strm->next_out - state->x.next);
; 110  :                 writ = write(state->fd, state->x.next, put);

  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	ff 77 14	 push	 DWORD PTR [edi+20]
  000d5	e8 00 00 00 00	 call	 __write
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  :                 if (writ < 0) {

  000dd	85 c0		 test	 eax, eax
  000df	78 91		 js	 SHORT $LN27@gz_comp

; 112  :                     gz_error(state, Z_ERRNO, zstrerror());
; 113  :                     return -1;
; 114  :                 }
; 115  :                 state->x.next += writ;

  000e1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e4	03 c8		 add	 ecx, eax
  000e6	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  000e9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ec	3b c1		 cmp	 eax, ecx
  000ee	77 d6		 ja	 SHORT $LL7@gz_comp
$LN41@gz_comp:

; 116  :             }
; 117  :             if (strm->avail_out == 0) {

  000f0	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  000f6	85 db		 test	 ebx, ebx
  000f8	75 15		 jne	 SHORT $LN16@gz_comp

; 118  :                 strm->avail_out = state->size;

  000fa	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000fd	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 119  :                 strm->next_out = state->out;

  00100	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00103	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 120  :                 state->x.next = state->out;

  00106	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00109	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0010c	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
$LN16@gz_comp:

; 121  :             }
; 122  :         }
; 123  : 
; 124  :         /* compress */
; 125  :         have = strm->avail_out;
; 126  :         ret = deflate(strm, flush);

  0010f	52		 push	 edx
  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 _deflate@8
  00116	8b c8		 mov	 ecx, eax

; 127  :         if (ret == Z_STREAM_ERROR) {

  00118	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0011b	74 24		 je	 SHORT $LN30@gz_comp

; 129  :                       "internal error: deflate stream corrupt");
; 130  :             return -1;
; 131  :         }
; 132  :         have -= strm->avail_out;

  0011d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00120	2b d8		 sub	 ebx, eax

; 133  :     } while (have);

  00122	74 08		 je	 SHORT $LN29@gz_comp
  00124	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  00127	e9 72 ff ff ff	 jmp	 $LN48@gz_comp
$LN29@gz_comp:

; 134  : 
; 135  :     /* if that completed a deflate stream, allow another to start */
; 136  :     if (flush == Z_FINISH)

  0012c	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  00130	75 06		 jne	 SHORT $LN18@gz_comp

; 137  :         deflateReset(strm);

  00132	56		 push	 esi
  00133	e8 00 00 00 00	 call	 _deflateReset@4
$LN18@gz_comp:

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  00138	33 c0		 xor	 eax, eax

; 141  : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN30@gz_comp:

; 128  :             gz_error(state, Z_STREAM_ERROR,

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
  00146	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH

; 141  : }

  0014b	8b cf		 mov	 ecx, edi
  0014d	e8 00 00 00 00	 call	 _gz_error
  00152	83 c4 04	 add	 esp, 4
$LN46@gz_comp:
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	83 c8 ff	 or	 eax, -1
  0015a	5b		 pop	 ebx
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 149  :     int first;
; 150  :     unsigned n;
; 151  :     z_streamp strm = &(state->strm);
; 152  : 
; 153  :     /* consume whatever's left in the input buffer */
; 154  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  0000b	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0000f	74 0c		 je	 SHORT $LN4@gz_zero
  00011	33 d2		 xor	 edx, edx
  00013	e8 00 00 00 00	 call	 _gz_comp
  00018	83 f8 ff	 cmp	 eax, -1
  0001b	74 7c		 je	 SHORT $LN11@gz_zero
$LN4@gz_zero:

; 155  :         return -1;
; 156  : 
; 157  :     /* compress len zeros (len guaranteed > 0) */
; 158  :     first = 1;
; 159  :     while (len) {

  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00028	8b c3		 mov	 eax, ebx
  0002a	0b c1		 or	 eax, ecx
  0002c	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  0002f	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  00032	74 5c		 je	 SHORT $LN3@gz_zero
$LL2@gz_zero:

; 160  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00034	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00037	33 c0		 xor	 eax, eax
  00039	3b c1		 cmp	 eax, ecx
  0003b	7f 06		 jg	 SHORT $LN8@gz_zero
  0003d	7c 06		 jl	 SHORT $LN9@gz_zero
  0003f	3b fb		 cmp	 edi, ebx
  00041	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  00043	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 161  :             (unsigned)len : state->size;
; 162  :         if (first) {

  00045	85 d2		 test	 edx, edx
  00047	74 15		 je	 SHORT $LN5@gz_zero

; 163  :             memset(state->in, 0, n);

  00049	57		 push	 edi
  0004a	6a 00		 push	 0
  0004c	ff 76 24	 push	 DWORD PTR [esi+36]
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  :             first = 0;

  00057	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN5@gz_zero:

; 165  :         }
; 166  :         strm->avail_in = n;

  0005e	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 167  :         strm->next_in = state->in;
; 168  :         state->x.pos += n;
; 169  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  00061	8b ce		 mov	 ecx, esi
  00063	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00066	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00069	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006c	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  00070	33 d2		 xor	 edx, edx
  00072	e8 00 00 00 00	 call	 _gz_comp
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	74 1d		 je	 SHORT $LN11@gz_zero

; 170  :             return -1;
; 171  :         len -= n;

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0007f	2b df		 sub	 ebx, edi
  00081	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00084	8b c3		 mov	 eax, ebx
  00086	83 d9 00	 sbb	 ecx, 0
  00089	0b c1		 or	 eax, ecx
  0008b	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0008e	75 a4		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:

; 172  :     }
; 173  :     return 0;

  00090	33 c0		 xor	 eax, eax

; 174  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN11@gz_zero:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gz_write
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_put$1$ = -4						; size = 4
_len$ = 8						; size = 4
_gz_write PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx

; 183  :     z_size_t put = len;

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0000d	89 5c 24 0c	 mov	 DWORD PTR _put$1$[esp+16], ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi
  00015	8b fa		 mov	 edi, edx
  00017	89 7c 24 10	 mov	 DWORD PTR _buf$1$[esp+24], edi

; 184  : 
; 185  :     /* if len is zero, avoid unnecessary operations */
; 186  :     if (len == 0)

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 93 00 00
	00		 je	 $LN25@gz_write

; 187  :         return 0;
; 188  : 
; 189  :     /* allocate memory if this is the first time through */
; 190  :     if (state->size == 0 && gz_init(state) == -1)

  00023	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00027	75 0e		 jne	 SHORT $LN33@gz_write
  00029	e8 00 00 00 00	 call	 _gz_init
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	0f 84 7f 00 00
	00		 je	 $LN25@gz_write
$LN33@gz_write:

; 191  :         return 0;
; 192  : 
; 193  :     /* check for seek request */
; 194  :     if (state->seek) {

  00037	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003b	74 1c		 je	 SHORT $LN11@gz_write

; 195  :         state->seek = 0;
; 196  :         if (gz_zero(state, state->skip) == -1)

  0003d	ff 76 54	 push	 DWORD PTR [esi+84]
  00040	8b ce		 mov	 ecx, esi
  00042	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00049	ff 76 50	 push	 DWORD PTR [esi+80]
  0004c	e8 00 00 00 00	 call	 _gz_zero
  00051	83 c4 08	 add	 esp, 8
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 5d		 je	 SHORT $LN25@gz_write
$LN11@gz_write:

; 197  :             return 0;
; 198  :     }
; 199  : 
; 200  :     /* for small len, copy to input buffer, otherwise compress directly */
; 201  :     if (len < state->size) {

  00059	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  0005c	73 61		 jae	 SHORT $LN12@gz_write
  0005e	66 90		 npad	 2
$LL4@gz_write:

; 202  :         /* copy to input buffer, compress when full */
; 203  :         do {
; 204  :             unsigned have, copy;
; 205  : 
; 206  :             if (state->strm.avail_in == 0)

  00060	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00063	85 c9		 test	 ecx, ecx
  00065	75 0a		 jne	 SHORT $LN30@gz_write

; 207  :                 state->strm.next_in = state->in;

  00067	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0006a	8b d0		 mov	 edx, eax
  0006c	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0006f	eb 06		 jmp	 SHORT $LN14@gz_write
$LN30@gz_write:
  00071	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00074	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
$LN14@gz_write:

; 208  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -
; 209  :                               state->in);
; 210  :             copy = state->size - have;

  00077	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0007a	2b ca		 sub	 ecx, edx
  0007c	03 c8		 add	 ecx, eax
  0007e	2b f9		 sub	 edi, ecx

; 211  :             if (copy > len)

  00080	3b fb		 cmp	 edi, ebx
  00082	0f 47 fb	 cmova	 edi, ebx

; 212  :                 copy = len;
; 213  :             memcpy(state->in + have, buf, copy);

  00085	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00088	57		 push	 edi
  00089	ff 74 24 14	 push	 DWORD PTR _buf$1$[esp+28]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _memcpy

; 214  :             state->strm.avail_in += copy;

  00093	01 7e 68	 add	 DWORD PTR [esi+104], edi
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  :             state->x.pos += copy;

  00099	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0009c	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 216  :             buf = (const char *)buf + copy;

  000a0	01 7c 24 10	 add	 DWORD PTR _buf$1$[esp+24], edi

; 217  :             len -= copy;

  000a4	2b df		 sub	 ebx, edi

; 218  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000a6	74 53		 je	 SHORT $LN6@gz_write
  000a8	33 d2		 xor	 edx, edx
  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 _gz_comp
  000b1	83 f8 ff	 cmp	 eax, -1
  000b4	75 aa		 jne	 SHORT $LL4@gz_write
$LN25@gz_write:

; 236  :                 return 0;

  000b6	33 c0		 xor	 eax, eax

; 243  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
$LN12@gz_write:

; 219  :                 return 0;
; 220  :         } while (len);
; 221  :     }
; 222  :     else {
; 223  :         /* consume whatever's left in the input buffer */
; 224  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000bf	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000c3	74 0e		 je	 SHORT $LN17@gz_write
  000c5	33 d2		 xor	 edx, edx
  000c7	8b ce		 mov	 ecx, esi
  000c9	e8 00 00 00 00	 call	 _gz_comp
  000ce	83 f8 ff	 cmp	 eax, -1
  000d1	74 e3		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 225  :             return 0;
; 226  : 
; 227  :         /* directly compress user buffer to file */
; 228  :         state->strm.next_in = (z_const Bytef *)buf;

  000d3	89 7e 64	 mov	 DWORD PTR [esi+100], edi
$LL7@gz_write:

; 229  :         do {
; 230  :             unsigned n = (unsigned)-1;

  000d6	83 cf ff	 or	 edi, -1

; 231  :             if (n > len)
; 232  :                 n = len;
; 233  :             state->strm.avail_in = n;
; 234  :             state->x.pos += n;
; 235  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  000d9	8b ce		 mov	 ecx, esi
  000db	83 fb ff	 cmp	 ebx, -1
  000de	0f 42 fb	 cmovb	 edi, ebx
  000e1	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000e4	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  000e7	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000eb	33 d2		 xor	 edx, edx
  000ed	e8 00 00 00 00	 call	 _gz_comp
  000f2	83 f8 ff	 cmp	 eax, -1
  000f5	74 bf		 je	 SHORT $LN25@gz_write

; 237  :             len -= n;

  000f7	2b df		 sub	 ebx, edi

; 238  :         } while (len);

  000f9	75 db		 jne	 SHORT $LL7@gz_write
$LN6@gz_write:

; 239  :     }
; 240  : 
; 241  :     /* input was all buffered or compressed */
; 242  :     return put;

  000fb	8b 44 24 14	 mov	 eax, DWORD PTR _put$1$[esp+24]

; 243  : }

  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
_gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzwrite@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzwrite@12 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     gz_statep state;
; 252  : 
; 253  :     /* get internal structure */
; 254  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 28		 je	 SHORT $LN4@gzwrite

; 255  :         return 0;
; 256  :     state = (gz_statep)file;
; 257  : 
; 258  :     /* check that we're writing and that there's no error */
; 259  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 1f		 jne	 SHORT $LN4@gzwrite
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 19		 jne	 SHORT $LN4@gzwrite

; 260  :         return 0;
; 261  : 
; 262  :     /* since an int is returned, make sure len fits in one, otherwise return
; 263  :        with an error (this avoids a flaw in the interface) */
; 264  :     if ((int)len < 0) {

  00019	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0001c	85 c0		 test	 eax, eax
  0001e	79 18		 jns	 SHORT $LN5@gzwrite

; 265  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
  00025	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002a	e8 00 00 00 00	 call	 _gz_error
  0002f	83 c4 04	 add	 esp, 4
$LN4@gzwrite:

; 271  : }

  00032	33 c0		 xor	 eax, eax
  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
$LN5@gzwrite:

; 266  :         return 0;
; 267  :     }
; 268  : 
; 269  :     /* write len bytes from buf (the return value will fit in an int) */
; 270  :     return (int)gz_write(state, buf, len);

  00038	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _gz_write
  00041	83 c4 04	 add	 esp, 4

; 271  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
_gzwrite@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzfwrite@16
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfwrite@16 PROC					; COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     z_size_t len;
; 281  :     gz_statep state;
; 282  : 
; 283  :     /* get internal structure */
; 284  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 5d		 je	 SHORT $LN4@gzfwrite

; 285  :         return 0;
; 286  :     state = (gz_statep)file;
; 287  : 
; 288  :     /* check that we're writing and that there's no error */
; 289  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 54		 jne	 SHORT $LN4@gzfwrite
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 4e		 jne	 SHORT $LN4@gzfwrite

; 291  : 
; 292  :     /* compute bytes to read -- error on overflow */
; 293  :     len = nitems * size;

  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  0001e	8b f7		 mov	 esi, edi
  00020	0f af 75 10	 imul	 esi, DWORD PTR _nitems$[ebp]

; 294  :     if (size && len / size != nitems) {

  00024	85 ff		 test	 edi, edi
  00026	74 25		 je	 SHORT $LN5@gzfwrite
  00028	33 d2		 xor	 edx, edx
  0002a	8b c6		 mov	 eax, esi
  0002c	f7 f7		 div	 edi
  0002e	3b 45 10	 cmp	 eax, DWORD PTR _nitems$[ebp]
  00031	74 1a		 je	 SHORT $LN5@gzfwrite

; 295  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@
  00038	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0003d	e8 00 00 00 00	 call	 _gz_error
  00042	83 c4 04	 add	 esp, 4
$LN7@gzfwrite:

; 296  :         return 0;

  00045	5f		 pop	 edi
  00046	33 c0		 xor	 eax, eax
  00048	5e		 pop	 esi

; 301  : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
$LN5@gzfwrite:

; 297  :     }
; 298  : 
; 299  :     /* write len bytes to buf, return the number of full items written */
; 300  :     return len ? gz_write(state, buf, len) / size : 0;

  0004d	85 f6		 test	 esi, esi
  0004f	74 f4		 je	 SHORT $LN7@gzfwrite
  00051	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _gz_write
  0005a	83 c4 04	 add	 esp, 4
  0005d	33 d2		 xor	 edx, edx
  0005f	f7 f7		 div	 edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 301  : }

  00063	5d		 pop	 ebp
  00064	c2 10 00	 ret	 16			; 00000010H
$LN4@gzfwrite:

; 290  :         return 0;

  00067	33 c0		 xor	 eax, eax

; 301  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
_gzfwrite@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzputc@8
_TEXT	SEGMENT
_buf$ = -1						; size = 1
_file$ = 8						; size = 4
_c$ = 12						; size = 4
_gzputc@8 PROC						; COMDAT

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 308  :     unsigned have;
; 309  :     unsigned char buf[1];
; 310  :     gz_statep state;
; 311  :     z_streamp strm;
; 312  : 
; 313  :     /* get internal structure */
; 314  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 a2 00 00
	00		 je	 $LN4@gzputc

; 315  :         return -1;
; 316  :     state = (gz_statep)file;
; 317  :     strm = &(state->strm);
; 318  : 
; 319  :     /* check that we're writing and that there's no error */
; 320  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 95 00 00
	00		 jne	 $LN4@gzputc
  00022	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00026	0f 85 8b 00 00
	00		 jne	 $LN4@gzputc

; 321  :         return -1;
; 322  : 
; 323  :     /* check for seek request */
; 324  :     if (state->seek) {

  0002c	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00030	74 1c		 je	 SHORT $LN6@gzputc

; 325  :         state->seek = 0;
; 326  :         if (gz_zero(state, state->skip) == -1)

  00032	ff 76 54	 push	 DWORD PTR [esi+84]
  00035	8b ce		 mov	 ecx, esi
  00037	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003e	ff 76 50	 push	 DWORD PTR [esi+80]
  00041	e8 00 00 00 00	 call	 _gz_zero
  00046	83 c4 08	 add	 esp, 8
  00049	83 f8 ff	 cmp	 eax, -1
  0004c	74 69		 je	 SHORT $LN4@gzputc
$LN6@gzputc:

; 327  :             return -1;
; 328  :     }
; 329  : 
; 330  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 331  :        initialized) */
; 332  :     if (state->size) {

  0004e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00051	85 c0		 test	 eax, eax
  00053	74 3a		 je	 SHORT $LN9@gzputc

; 333  :         if (strm->avail_in == 0)

  00055	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00058	85 c9		 test	 ecx, ecx
  0005a	75 08		 jne	 SHORT $LN12@gzputc

; 334  :             strm->next_in = state->in;

  0005c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0005f	89 56 64	 mov	 DWORD PTR [esi+100], edx
  00062	eb 03		 jmp	 SHORT $LN8@gzputc
$LN12@gzputc:
  00064	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
$LN8@gzputc:

; 335  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00067	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0006a	2b cf		 sub	 ecx, edi
  0006c	03 ca		 add	 ecx, edx

; 336  :         if (have < state->size) {

  0006e	3b c8		 cmp	 ecx, eax
  00070	73 1d		 jae	 SHORT $LN9@gzputc

; 337  :             state->in[have] = (unsigned char)c;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00075	88 04 0f	 mov	 BYTE PTR [edi+ecx], al

; 338  :             strm->avail_in++;

  00078	ff 46 68	 inc	 DWORD PTR [esi+104]

; 339  :             state->x.pos++;

  0007b	83 46 08 01	 add	 DWORD PTR [esi+8], 1

; 340  :             return c & 0xff;

  0007f	0f b6 c0	 movzx	 eax, al
  00082	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 349  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN9@gzputc:

; 341  :         }
; 342  :     }
; 343  : 
; 344  :     /* no room in buffer or not initialized, use gz_write() */
; 345  :     buf[0] = (unsigned char)c;

  0008f	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 346  :     if (gz_write(state, buf, 1) != 1)

  00092	8d 54 24 0f	 lea	 edx, DWORD PTR _buf$[esp+16]
  00096	6a 01		 push	 1
  00098	8b ce		 mov	 ecx, esi
  0009a	88 5c 24 13	 mov	 BYTE PTR _buf$[esp+20], bl
  0009e	e8 00 00 00 00	 call	 _gz_write
  000a3	83 c4 04	 add	 esp, 4
  000a6	83 f8 01	 cmp	 eax, 1
  000a9	75 0c		 jne	 SHORT $LN4@gzputc

; 347  :         return -1;
; 348  :     return c & 0xff;

  000ab	0f b6 c3	 movzx	 eax, bl

; 349  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
$LN4@gzputc:
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	83 c8 ff	 or	 eax, -1
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
_gzputc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzputs@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs@8 PROC						; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     int ret;
; 357  :     z_size_t len;
; 358  :     gz_statep state;
; 359  : 
; 360  :     /* get internal structure */
; 361  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3c		 je	 SHORT $LN4@gzputs

; 362  :         return -1;
; 363  :     state = (gz_statep)file;
; 364  : 
; 365  :     /* check that we're writing and that there's no error */
; 366  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 33		 jne	 SHORT $LN4@gzputs
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 2d		 jne	 SHORT $LN4@gzputs

; 368  : 
; 369  :     /* write string */
; 370  :     len = strlen(str);

  00019	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  0001c	56		 push	 esi
  0001d	8b f2		 mov	 esi, edx
  0001f	57		 push	 edi
  00020	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL8@gzputs:
  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL8@gzputs
  0002a	2b f7		 sub	 esi, edi

; 371  :     ret = gz_write(state, str, len);

  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _gz_write
  00032	83 c4 04	 add	 esp, 4

; 372  :     return ret == 0 && len != 0 ? -1 : ret;

  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN6@gzputs
  00039	85 f6		 test	 esi, esi
  0003b	74 03		 je	 SHORT $LN6@gzputs
  0003d	83 c8 ff	 or	 eax, -1
$LN6@gzputs:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 373  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN4@gzputs:

; 367  :         return -1;

  00046	83 c8 ff	 or	 eax, -1

; 373  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzputs@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzvprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_va$ = 16						; size = 4
_gzvprintf PROC						; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 381  :     int len;
; 382  :     unsigned left;
; 383  :     char *next;
; 384  :     gz_statep state;
; 385  :     z_streamp strm;
; 386  : 
; 387  :     /* get internal structure */
; 388  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 0b 01 00
	00		 je	 $LN4@gzvprintf

; 389  :         return Z_STREAM_ERROR;
; 390  :     state = (gz_statep)file;
; 391  :     strm = &(state->strm);
; 392  : 
; 393  :     /* check that we're writing and that there's no error */
; 394  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 fe 00 00
	00		 jne	 $LN4@gzvprintf
  00022	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00026	0f 85 f4 00 00
	00		 jne	 $LN4@gzvprintf

; 395  :         return Z_STREAM_ERROR;
; 396  : 
; 397  :     /* make sure we have some buffer space */
; 398  :     if (state->size == 0 && gz_init(state) == -1)

  0002c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00030	75 16		 jne	 SHORT $LN18@gzvprintf
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 _gz_init
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	75 0a		 jne	 SHORT $LN18@gzvprintf
$LN19@gzvprintf:

; 449  : }

  0003e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN18@gzvprintf:

; 399  :         return state->err;
; 400  : 
; 401  :     /* check for seek request */
; 402  :     if (state->seek) {

  00048	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0004c	74 1c		 je	 SHORT $LN7@gzvprintf

; 403  :         state->seek = 0;
; 404  :         if (gz_zero(state, state->skip) == -1)

  0004e	ff 76 54	 push	 DWORD PTR [esi+84]
  00051	8b ce		 mov	 ecx, esi
  00053	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0005a	ff 76 50	 push	 DWORD PTR [esi+80]
  0005d	e8 00 00 00 00	 call	 _gz_zero
  00062	83 c4 08	 add	 esp, 8
  00065	83 f8 ff	 cmp	 eax, -1
  00068	74 d4		 je	 SHORT $LN19@gzvprintf
$LN7@gzvprintf:

; 405  :             return state->err;
; 406  :     }
; 407  : 
; 408  :     /* do the printf() into the input buffer, put length in len -- the input
; 409  :        buffer is double-sized just for this function, so there is guaranteed to
; 410  :        be state->size bytes available after the current contents */
; 411  :     if (strm->avail_in == 0)

  0006a	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0006d	85 c9		 test	 ecx, ecx
  0006f	75 08		 jne	 SHORT $LN17@gzvprintf

; 412  :         strm->next_in = state->in;

  00071	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00074	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00077	eb 03		 jmp	 SHORT $LN8@gzvprintf
$LN17@gzvprintf:
  00079	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
$LN8@gzvprintf:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1440 :         int const _Result = __stdio_common_vsprintf(

  0007c	ff 75 10	 push	 DWORD PTR _va$[ebp]
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c

; 413  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);

  0007f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]

; 414  :     next[state->size - 1] = 0;

  00082	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00085	6a 00		 push	 0
  00087	ff 75 0c	 push	 DWORD PTR _format$[ebp]
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c

; 414  :     next[state->size - 1] = 0;

  0008a	c6 44 18 ff 00	 mov	 BYTE PTR [eax+ebx-1], 0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1440 :         int const _Result = __stdio_common_vsprintf(

  0008f	ff 76 1c	 push	 DWORD PTR [esi+28]
  00092	53		 push	 ebx
  00093	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	ff 70 04	 push	 DWORD PTR [eax+4]
  0009d	83 c9 02	 or	 ecx, 2
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  000a6	8b f8		 mov	 edi, eax
  000a8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  000ab	83 c8 ff	 or	 eax, -1
  000ae	85 ff		 test	 edi, edi
  000b0	0f 48 f8	 cmovs	 edi, eax
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c

; 433  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  000b3	85 ff		 test	 edi, edi
  000b5	74 60		 je	 SHORT $LN10@gzvprintf
  000b7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000ba	3b f8		 cmp	 edi, eax
  000bc	73 59		 jae	 SHORT $LN10@gzvprintf
  000be	80 7c 18 ff 00	 cmp	 BYTE PTR [eax+ebx-1], 0
  000c3	75 52		 jne	 SHORT $LN10@gzvprintf

; 435  : 
; 436  :     /* update buffer and position, compress first half if past that */
; 437  :     strm->avail_in += (unsigned)len;

  000c5	01 7e 68	 add	 DWORD PTR [esi+104], edi

; 438  :     state->x.pos += len;

  000c8	8b c7		 mov	 eax, edi
  000ca	99		 cdq
  000cb	01 46 08	 add	 DWORD PTR [esi+8], eax

; 439  :     if (strm->avail_in >= state->size) {

  000ce	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d1	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000d4	8b 5e 68	 mov	 ebx, DWORD PTR [esi+104]
  000d7	3b d8		 cmp	 ebx, eax
  000d9	72 33		 jb	 SHORT $LN11@gzvprintf

; 440  :         left = strm->avail_in - state->size;
; 441  :         strm->avail_in = state->size;
; 442  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000db	33 d2		 xor	 edx, edx
  000dd	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000e0	8b ce		 mov	 ecx, esi
  000e2	2b d8		 sub	 ebx, eax
  000e4	e8 00 00 00 00	 call	 _gz_comp
  000e9	83 f8 ff	 cmp	 eax, -1
  000ec	0f 84 4c ff ff
	ff		 je	 $LN19@gzvprintf

; 443  :             return state->err;
; 444  :         memcpy(state->in, state->in + state->size, left);

  000f2	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  000f5	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000f8	53		 push	 ebx
  000f9	03 ca		 add	 ecx, edx
  000fb	51		 push	 ecx
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 _memcpy

; 445  :         strm->next_in = state->in;

  00102	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	89 4e 64	 mov	 DWORD PTR [esi+100], ecx

; 446  :         strm->avail_in = left;

  0010b	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
$LN11@gzvprintf:

; 447  :     }
; 448  :     return len;

  0010e	8b c7		 mov	 eax, edi

; 449  : }

  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
$LN10@gzvprintf:

; 434  :         return 0;

  00117	33 c0		 xor	 eax, eax

; 449  : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN4@gzvprintf:
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00127	5b		 pop	 ebx
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
_gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     va_list va;
; 454  :     int ret;
; 455  : 
; 456  :     va_start(va, format);
; 457  :     ret = gzvprintf(file, format, va);

  00003	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _gzvprintf
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  :     va_end(va);
; 459  :     return ret;
; 460  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzflush@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush@8 PROC						; COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 557  :     gz_statep state;
; 558  : 
; 559  :     /* get internal structure */
; 560  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 4b		 je	 SHORT $LN4@gzflush

; 561  :         return Z_STREAM_ERROR;
; 562  :     state = (gz_statep)file;
; 563  : 
; 564  :     /* check that we're writing and that there's no error */
; 565  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000f	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00016	75 42		 jne	 SHORT $LN4@gzflush
  00018	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001c	75 3c		 jne	 SHORT $LN4@gzflush

; 567  : 
; 568  :     /* check flush parameter */
; 569  :     if (flush < 0 || flush > Z_FINISH)

  0001e	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00022	77 36		 ja	 SHORT $LN4@gzflush

; 570  :         return Z_STREAM_ERROR;
; 571  : 
; 572  :     /* check for seek request */
; 573  :     if (state->seek) {

  00024	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00028	74 1c		 je	 SHORT $LN11@gzflush

; 574  :         state->seek = 0;
; 575  :         if (gz_zero(state, state->skip) == -1)

  0002a	ff 76 54	 push	 DWORD PTR [esi+84]
  0002d	8b ce		 mov	 ecx, esi
  0002f	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00036	ff 76 50	 push	 DWORD PTR [esi+80]
  00039	e8 00 00 00 00	 call	 _gz_zero
  0003e	83 c4 08	 add	 esp, 8
  00041	83 f8 ff	 cmp	 eax, -1
  00044	74 0a		 je	 SHORT $LN12@gzflush
$LN11@gzflush:

; 576  :             return state->err;
; 577  :     }
; 578  : 
; 579  :     /* compress remaining data with requested flush */
; 580  :     (void)gz_comp(state, flush);

  00046	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_comp
$LN12@gzflush:

; 581  :     return state->err;
; 582  : }

  00050	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN4@gzflush:

; 566  :         return Z_STREAM_ERROR;

  0005a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 581  :     return state->err;
; 582  : }

  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_gzflush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\gzwrite.c
;	COMDAT _gzsetparams@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams@12 PROC					; COMDAT

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 590  :     gz_statep state;
; 591  :     z_streamp strm;
; 592  : 
; 593  :     /* get internal structure */
; 594  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 90 00 00
	00		 je	 $LN4@gzsetparam

; 595  :         return Z_STREAM_ERROR;
; 596  :     state = (gz_statep)file;
; 597  :     strm = &(state->strm);
; 598  : 
; 599  :     /* check that we're writing and that there's no error */
; 600  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0001f	0f 85 80 00 00
	00		 jne	 $LN4@gzsetparam
  00025	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00029	75 7a		 jne	 SHORT $LN4@gzsetparam

; 601  :         return Z_STREAM_ERROR;
; 602  : 
; 603  :     /* if no change is requested, then do nothing */
; 604  :     if (level == state->level && strategy == state->strategy)

  0002b	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0002e	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  00031	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  00034	75 05		 jne	 SHORT $LN5@gzsetparam
  00036	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00039	74 5f		 je	 SHORT $LN15@gzsetparam
$LN5@gzsetparam:

; 605  :         return Z_OK;
; 606  : 
; 607  :     /* check for seek request */
; 608  :     if (state->seek) {

  0003b	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003f	74 2b		 je	 SHORT $LN12@gzsetparam

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  00041	ff 76 54	 push	 DWORD PTR [esi+84]
  00044	8b ce		 mov	 ecx, esi
  00046	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004d	ff 76 50	 push	 DWORD PTR [esi+80]
  00050	e8 00 00 00 00	 call	 _gz_zero
  00055	83 c4 08	 add	 esp, 8
  00058	83 f8 ff	 cmp	 eax, -1
  0005b	75 0c		 jne	 SHORT $LN14@gzsetparam
$LN16@gzsetparam:

; 623  :     return Z_OK;
; 624  : }

  0005d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
$LN14@gzsetparam:

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  00069	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN12@gzsetparam:

; 611  :             return state->err;
; 612  :     }
; 613  : 
; 614  :     /* change compression parameters for subsequent input */
; 615  :     if (state->size) {

  0006c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00070	74 22		 je	 SHORT $LN8@gzsetparam

; 616  :         /* flush previous input with previous parameters before changing */
; 617  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  00072	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00076	74 14		 je	 SHORT $LN9@gzsetparam
  00078	ba 05 00 00 00	 mov	 edx, 5
  0007d	8b ce		 mov	 ecx, esi
  0007f	e8 00 00 00 00	 call	 _gz_comp
  00084	83 f8 ff	 cmp	 eax, -1
  00087	74 d4		 je	 SHORT $LN16@gzsetparam
  00089	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN9@gzsetparam:

; 618  :             return state->err;
; 619  :         deflateParams(strm, level, strategy);

  0008c	57		 push	 edi
  0008d	53		 push	 ebx
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 _deflateParams@12
$LN8@gzsetparam:

; 620  :     }
; 621  :     state->level = level;

  00094	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 622  :     state->strategy = strategy;

  00097	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN15@gzsetparam:

; 623  :     return Z_OK;
; 624  : }

  0009a	33 c0		 xor	 eax, eax
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH
$LN4@gzsetparam:
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 0c 00	 ret	 12			; 0000000cH
_gzsetparams@12 ENDP
_TEXT	ENDS
END
