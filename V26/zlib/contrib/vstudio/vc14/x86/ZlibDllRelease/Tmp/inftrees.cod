; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	c:\prj\visiator_windows\v26\zlib\inftrees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	0caH
	ORG $+2
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
PUBLIC	_inflate_table
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\inftrees.c
;	COMDAT _inflate_table
_TEXT	SEGMENT
_offs$ = -128						; size = 32
_count$ = -96						; size = 32
_min$2$ = -64						; size = 4
_mask$1$ = -60						; size = 4
tv1926 = -56						; size = 4
tv1913 = -56						; size = 4
_low$1$ = -52						; size = 4
_used$1$ = -48						; size = 4
_type$1$ = -44						; size = 4
_curr$1$ = -40						; size = 4
tv1918 = -40						; size = 4
_lens$1$ = -36						; size = 4
_base$1$ = -32						; size = 4
_extra$1$ = -28						; size = 4
_match$1$ = -24						; size = 4
tv1931 = -20						; size = 4
_len$2$ = -16						; size = 4
_huff$1$ = -12						; size = 4
_next$1$ = -8						; size = 4
_drop$1$ = -4						; size = 4
_here$ = 8						; size = 4
_codes$ = 8						; size = 4
_table$ = 12						; size = 4
_bits$ = 16						; size = 4
_work$ = 20						; size = 4
_inflate_table PROC					; COMDAT
; _type$ = ecx
; _lens$ = edx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	89 4d d4	 mov	 DWORD PTR _type$1$[ebp], ecx
  0000e	0f 57 c0	 xorps	 xmm0, xmm0

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;
; 109  :     for (sym = 0; sym < codes; sym++)

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _codes$[ebp]
  00014	8b c2		 mov	 eax, edx
  00016	33 f6		 xor	 esi, esi
  00018	89 45 dc	 mov	 DWORD PTR _lens$1$[ebp], eax
  0001b	57		 push	 edi
  0001c	0f 11 45 a0	 movups	 XMMWORD PTR _count$[ebp], xmm0
  00020	0f 11 45 b0	 movups	 XMMWORD PTR _count$[ebp+16], xmm0
  00024	85 c9		 test	 ecx, ecx
  00026	74 18		 je	 SHORT $LN6@inflate_ta
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@inflate_ta:

; 110  :         count[lens[sym]]++;

  00030	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00034	46		 inc	 esi
  00035	66 ff 44 45 a0	 inc	 WORD PTR _count$[ebp+eax*2]
  0003a	8b c2		 mov	 eax, edx
  0003c	3b f1		 cmp	 esi, ecx
  0003e	72 f0		 jb	 SHORT $LL7@inflate_ta
$LN6@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00040	8b 5d 10	 mov	 ebx, DWORD PTR _bits$[ebp]
  00043	8d 45 ba	 lea	 eax, DWORD PTR _count$[ebp+26]

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00046	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0004b	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004d	0f 1f 00	 npad	 3
$LL10@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00050	66 83 78 04 00	 cmp	 WORD PTR [eax+4], 0
  00055	75 38		 jne	 SHORT $LN78@inflate_ta
  00057	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  0005c	75 30		 jne	 SHORT $LN111@inflate_ta
  0005e	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00062	75 25		 jne	 SHORT $LN112@inflate_ta
  00064	66 83 78 fe 00	 cmp	 WORD PTR [eax-2], 0
  00069	75 19		 jne	 SHORT $LN113@inflate_ta
  0006b	66 83 78 fc 00	 cmp	 WORD PTR [eax-4], 0
  00070	75 0d		 jne	 SHORT $LN114@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00072	83 ef 05	 sub	 edi, 5
  00075	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00078	83 ff 01	 cmp	 edi, 1
  0007b	73 d3		 jae	 SHORT $LL10@inflate_ta
  0007d	eb 10		 jmp	 SHORT $LN78@inflate_ta
$LN114@inflate_ta:

; 115  :         if (count[max] != 0) break;

  0007f	83 ef 04	 sub	 edi, 4
  00082	eb 0b		 jmp	 SHORT $LN78@inflate_ta
$LN113@inflate_ta:
  00084	83 ef 03	 sub	 edi, 3
  00087	eb 06		 jmp	 SHORT $LN78@inflate_ta
$LN112@inflate_ta:
  00089	83 ef 02	 sub	 edi, 2
  0008c	eb 01		 jmp	 SHORT $LN78@inflate_ta
$LN111@inflate_ta:
  0008e	4f		 dec	 edi
$LN78@inflate_ta:

; 116  :     if (root > max) root = max;
; 117  :     if (max == 0) {                     /* no symbols to code at all */

  0008f	3b cf		 cmp	 ecx, edi
  00091	8b c7		 mov	 eax, edi
  00093	0f 46 c1	 cmovbe	 eax, ecx
  00096	85 ff		 test	 edi, edi
  00098	75 2a		 jne	 SHORT $LN37@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  0009a	8b 55 0c	 mov	 edx, DWORD PTR _table$[ebp]
  0009d	c7 45 08 40 01
	00 00		 mov	 DWORD PTR _here$[ebp], 320 ; 00000140H
  000a4	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  000a7	5f		 pop	 edi
  000a8	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 303  :     return 0;
; 304  : }

  000aa	5e		 pop	 esi
  000ab	89 01		 mov	 DWORD PTR [ecx], eax
  000ad	83 02 04	 add	 DWORD PTR [edx], 4
  000b0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b2	89 01		 mov	 DWORD PTR [ecx], eax
  000b4	83 02 04	 add	 DWORD PTR [edx], 4
  000b7	33 c0		 xor	 eax, eax
  000b9	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$LN37@inflate_ta:

; 122  :         *(*table)++ = here;
; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */
; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000c4	bb 01 00 00 00	 mov	 ebx, 1
  000c9	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
  000cc	3b fb		 cmp	 edi, ebx
  000ce	76 10		 jbe	 SHORT $LN79@inflate_ta
$LL13@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000d0	66 83 7c 5d a0
	00		 cmp	 WORD PTR _count$[ebp+ebx*2], 0
  000d6	75 05		 jne	 SHORT $LN136@inflate_ta

; 122  :         *(*table)++ = here;
; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */
; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000d8	43		 inc	 ebx
  000d9	3b df		 cmp	 ebx, edi
  000db	72 f3		 jb	 SHORT $LL13@inflate_ta
$LN136@inflate_ta:
  000dd	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN79@inflate_ta:

; 128  :     if (root < min) root = min;
; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000e0	3b c3		 cmp	 eax, ebx
  000e2	8b cb		 mov	 ecx, ebx
  000e4	ba 01 00 00 00	 mov	 edx, 1
  000e9	0f 43 c8	 cmovae	 ecx, eax
  000ec	89 4d ec	 mov	 DWORD PTR tv1931[ebp], ecx

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000ef	8b ca		 mov	 ecx, edx
$LL16@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  000f1	0f b7 44 4d a0	 movzx	 eax, WORD PTR _count$[ebp+ecx*2]
  000f6	03 d2		 add	 edx, edx
  000f8	2b d0		 sub	 edx, eax

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  000fa	0f 88 fc 02 00
	00		 js	 $LN42@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  00100	41		 inc	 ecx
  00101	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00104	76 eb		 jbe	 SHORT $LL16@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  00106	85 d2		 test	 edx, edx
  00108	7e 13		 jle	 SHORT $LN41@inflate_ta
  0010a	83 7d d4 00	 cmp	 DWORD PTR _type$1$[ebp], 0
  0010e	0f 84 e8 02 00
	00		 je	 $LN42@inflate_ta
  00114	83 ff 01	 cmp	 edi, 1
  00117	0f 85 df 02 00
	00		 jne	 $LN42@inflate_ta
$LN41@inflate_ta:

; 138  :         return -1;                      /* incomplete set */
; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  0011d	33 c0		 xor	 eax, eax
  0011f	b9 02 00 00 00	 mov	 ecx, 2
  00124	66 89 45 82	 mov	 WORD PTR _offs$[ebp+2], ax
  00128	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL19@inflate_ta:

; 142  :     for (len = 1; len < MAXBITS; len++)
; 143  :         offs[len + 1] = offs[len] + count[len];

  00130	66 8b 44 0d a0	 mov	 ax, WORD PTR _count$[ebp+ecx]
  00135	66 03 44 0d 80	 add	 ax, WORD PTR _offs$[ebp+ecx]
  0013a	66 89 44 0d 82	 mov	 WORD PTR _offs$[ebp+ecx+2], ax
  0013f	83 c1 02	 add	 ecx, 2
  00142	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00145	72 e9		 jb	 SHORT $LL19@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00147	8b 55 08	 mov	 edx, DWORD PTR _codes$[ebp]
  0014a	33 c9		 xor	 ecx, ecx
  0014c	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  0014f	85 d2		 test	 edx, edx
  00151	74 26		 je	 SHORT $LN21@inflate_ta
  00153	8b 5d dc	 mov	 ebx, DWORD PTR _lens$1$[ebp]
$LL22@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00156	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  0015a	66 85 c0	 test	 ax, ax
  0015d	74 12		 je	 SHORT $LN20@inflate_ta
  0015f	0f b7 44 45 80	 movzx	 eax, WORD PTR _offs$[ebp+eax*2]
  00164	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00168	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  0016c	66 ff 44 45 80	 inc	 WORD PTR _offs$[ebp+eax*2]
$LN20@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00171	41		 inc	 ecx
  00172	3b ca		 cmp	 ecx, edx
  00174	72 e0		 jb	 SHORT $LL22@inflate_ta
  00176	8b 5d f0	 mov	 ebx, DWORD PTR _len$2$[ebp]
$LN21@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00179	8b 55 d4	 mov	 edx, DWORD PTR _type$1$[ebp]
  0017c	8b c2		 mov	 eax, edx
  0017e	83 e8 00	 sub	 eax, 0
  00181	74 32		 je	 SHORT $LN44@inflate_ta
  00183	83 e8 01	 sub	 eax, 1
  00186	74 15		 je	 SHORT $LN45@inflate_ta

; 191  :     default:    /* DISTS */
; 192  :         base = dbase;
; 193  :         extra = dext;
; 194  :         match = 0;

  00188	33 c0		 xor	 eax, eax
  0018a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?dbase@?1??inflate_table@@9@9
  00191	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?dext@?1??inflate_table@@9@9
  00198	89 45 e8	 mov	 DWORD PTR _match$1$[ebp], eax
  0019b	eb 25		 jmp	 SHORT $LN23@inflate_ta
$LN45@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;
; 188  :         extra = lext;
; 189  :         match = 257;

  0019d	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  001a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?lbase@?1??inflate_table@@9@9
  001a9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?lext@?1??inflate_table@@9@9
  001b0	89 45 e8	 mov	 DWORD PTR _match$1$[ebp], eax

; 190  :         break;

  001b3	eb 0d		 jmp	 SHORT $LN23@inflate_ta
$LN44@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  001b5	89 75 e4	 mov	 DWORD PTR _extra$1$[ebp], esi
  001b8	89 75 e0	 mov	 DWORD PTR _base$1$[ebp], esi

; 184  :         match = 20;

  001bb	c7 45 e8 14 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 20 ; 00000014H
$LN23@inflate_ta:

; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  001c2	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  001c5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0

; 202  :     curr = root;                /* current table index bits */
; 203  :     drop = 0;                   /* current bits to drop from code for index */

  001cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drop$1$[ebp], 0

; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */

  001d3	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  001da	8b 01		 mov	 eax, DWORD PTR [ecx]

; 205  :     used = 1U << root;          /* use root table entries */

  001dc	8b 4d ec	 mov	 ecx, DWORD PTR tv1931[ebp]
  001df	89 45 f8	 mov	 DWORD PTR _next$1$[ebp], eax
  001e2	b8 01 00 00 00	 mov	 eax, 1
  001e7	d3 e0		 shl	 eax, cl
  001e9	89 45 d8	 mov	 DWORD PTR tv1918[ebp], eax
  001ec	89 45 d0	 mov	 DWORD PTR _used$1$[ebp], eax

; 206  :     mask = used - 1;            /* mask for comparing low */

  001ef	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  001f2	89 4d c4	 mov	 DWORD PTR _mask$1$[ebp], ecx

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  001f5	83 fa 01	 cmp	 edx, 1
  001f8	75 13		 jne	 SHORT $LN49@inflate_ta
  001fa	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  001ff	76 22		 jbe	 SHORT $LL25@inflate_ta
$LN62@inflate_ta:
  00201	5f		 pop	 edi

; 303  :     return 0;
; 304  : }

  00202	5e		 pop	 esi
  00203	b8 01 00 00 00	 mov	 eax, 1
  00208	5b		 pop	 ebx
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
$LN49@inflate_ta:

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  0020d	83 fa 02	 cmp	 edx, 2
  00210	75 11		 jne	 SHORT $LL25@inflate_ta
  00212	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
  00217	77 e8		 ja	 SHORT $LN62@inflate_ta

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  00219	eb 08		 jmp	 SHORT $LL25@inflate_ta
  0021b	0f 1f 44 00 00	 npad	 5
$LL138@inflate_ta:

; 210  :         (type == DISTS && used > ENOUGH_DISTS))
; 211  :         return 1;
; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);

  00220	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
$LL25@inflate_ta:

; 217  :         if (work[sym] + 1U < match) {

  00223	0f b7 16	 movzx	 edx, WORD PTR [esi]
  00226	8a c3		 mov	 al, bl
  00228	2a 45 fc	 sub	 al, BYTE PTR _drop$1$[ebp]
  0022b	8b ca		 mov	 ecx, edx
  0022d	8b 75 e8	 mov	 esi, DWORD PTR _match$1$[ebp]
  00230	88 45 09	 mov	 BYTE PTR _here$[ebp+1], al
  00233	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00236	3b c6		 cmp	 eax, esi
  00238	73 0a		 jae	 SHORT $LN50@inflate_ta

; 218  :             here.op = (unsigned char)0;

  0023a	c6 45 08 00	 mov	 BYTE PTR _here$[ebp], 0

; 219  :             here.val = work[sym];

  0023e	66 89 55 0a	 mov	 WORD PTR _here$[ebp+2], dx

; 220  :         }

  00242	eb 22		 jmp	 SHORT $LN53@inflate_ta
$LN50@inflate_ta:

; 221  :         else if (work[sym] >= match) {

  00244	3b ce		 cmp	 ecx, esi
  00246	72 14		 jb	 SHORT $LN52@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  00248	8b 45 e4	 mov	 eax, DWORD PTR _extra$1$[ebp]
  0024b	2b ce		 sub	 ecx, esi
  0024d	8a 04 48	 mov	 al, BYTE PTR [eax+ecx*2]
  00250	88 45 08	 mov	 BYTE PTR _here$[ebp], al

; 223  :             here.val = base[work[sym] - match];

  00253	8b 45 e0	 mov	 eax, DWORD PTR _base$1$[ebp]
  00256	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]

; 224  :         }

  0025a	eb 06		 jmp	 SHORT $LN144@inflate_ta
$LN52@inflate_ta:

; 225  :         else {
; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  0025c	c6 45 08 60	 mov	 BYTE PTR _here$[ebp], 96 ; 00000060H

; 227  :             here.val = 0;

  00260	33 c0		 xor	 eax, eax
$LN144@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);

  00262	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
$LN53@inflate_ta:

; 232  :         fill = 1U << curr;

  00266	8b 55 d8	 mov	 edx, DWORD PTR tv1918[ebp]
  00269	8b cb		 mov	 ecx, ebx
  0026b	2b 4d fc	 sub	 ecx, DWORD PTR _drop$1$[ebp]
  0026e	be 01 00 00 00	 mov	 esi, 1
  00273	d3 e6		 shl	 esi, cl
  00275	8b 4d fc	 mov	 ecx, DWORD PTR _drop$1$[ebp]

; 233  :         min = fill;                 /* save offset to next table */

  00278	89 55 c0	 mov	 DWORD PTR _min$2$[ebp], edx
  0027b	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  00282	89 45 c8	 mov	 DWORD PTR tv1913[ebp], eax
  00285	8b 45 f4	 mov	 eax, DWORD PTR _huff$1$[ebp]
  00288	d3 e8		 shr	 eax, cl
  0028a	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  0028d	03 c2		 add	 eax, edx
  0028f	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00292	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
$LL30@inflate_ta:

; 234  :         do {
; 235  :             fill -= incr;

  00295	2b 4d c8	 sub	 ecx, DWORD PTR tv1913[ebp]

; 236  :             next[(huff >> drop) + fill] = here;

  00298	89 01		 mov	 DWORD PTR [ecx], eax
  0029a	2b d6		 sub	 edx, esi

; 237  :         } while (fill != 0);

  0029c	75 f7		 jne	 SHORT $LL30@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0029e	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  002a1	ba 01 00 00 00	 mov	 edx, 1
  002a6	d3 e2		 shl	 edx, cl

; 241  :         while (huff & incr)

  002a8	8b 4d f4	 mov	 ecx, DWORD PTR _huff$1$[ebp]
  002ab	85 d1		 test	 edx, ecx
  002ad	74 07		 je	 SHORT $LN32@inflate_ta
  002af	90		 npad	 1
$LL31@inflate_ta:

; 242  :             incr >>= 1;

  002b0	d1 ea		 shr	 edx, 1
  002b2	85 d1		 test	 edx, ecx
  002b4	75 fa		 jne	 SHORT $LL31@inflate_ta
$LN32@inflate_ta:

; 243  :         if (incr != 0) {

  002b6	85 d2		 test	 edx, edx
  002b8	74 0e		 je	 SHORT $LN54@inflate_ta

; 244  :             huff &= incr - 1;

  002ba	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  002bd	23 c1		 and	 eax, ecx

; 245  :             huff += incr;

  002bf	03 c2		 add	 eax, edx
  002c1	8b f0		 mov	 esi, eax
  002c3	89 45 f4	 mov	 DWORD PTR _huff$1$[ebp], eax

; 246  :         }

  002c6	eb 05		 jmp	 SHORT $LN55@inflate_ta
$LN54@inflate_ta:

; 247  :         else
; 248  :             huff = 0;

  002c8	33 f6		 xor	 esi, esi
  002ca	89 75 f4	 mov	 DWORD PTR _huff$1$[ebp], esi
$LN55@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  002cd	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]

; 252  :         if (--(count[len]) == 0) {

  002d0	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  002d5	83 c0 02	 add	 eax, 2
  002d8	66 01 4c 5d a0	 add	 WORD PTR _count$[ebp+ebx*2], cx
  002dd	89 45 14	 mov	 DWORD PTR _work$[ebp], eax
  002e0	75 15		 jne	 SHORT $LN56@inflate_ta

; 253  :             if (len == max) break;

  002e2	3b df		 cmp	 ebx, edi
  002e4	0f 84 df 00 00
	00		 je	 $LN82@inflate_ta

; 254  :             len = lens[work[sym]];

  002ea	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002ed	8b 4d dc	 mov	 ecx, DWORD PTR _lens$1$[ebp]
  002f0	0f b7 1c 41	 movzx	 ebx, WORD PTR [ecx+eax*2]
  002f4	89 5d f0	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN56@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  002f7	8b 45 ec	 mov	 eax, DWORD PTR tv1931[ebp]
  002fa	3b d8		 cmp	 ebx, eax
  002fc	0f 86 1e ff ff
	ff		 jbe	 $LL138@inflate_ta
  00302	8b 55 c4	 mov	 edx, DWORD PTR _mask$1$[ebp]
  00305	23 d6		 and	 edx, esi
  00307	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  0030a	89 55 c8	 mov	 DWORD PTR tv1926[ebp], edx
  0030d	3b 55 cc	 cmp	 edx, DWORD PTR _low$1$[ebp]
  00310	0f 84 0d ff ff
	ff		 je	 $LL25@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  00316	8b 4d fc	 mov	 ecx, DWORD PTR _drop$1$[ebp]
  00319	85 c9		 test	 ecx, ecx
  0031b	0f 45 c1	 cmovne	 eax, ecx
  0031e	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  00321	89 45 fc	 mov	 DWORD PTR _drop$1$[ebp], eax
  00324	8b 45 c0	 mov	 eax, DWORD PTR _min$2$[ebp]
  00327	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;
; 268  :             left = (int)(1 << curr);

  0032a	b8 01 00 00 00	 mov	 eax, 1
  0032f	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  00332	8b cb		 mov	 ecx, ebx
  00334	2b 4d fc	 sub	 ecx, DWORD PTR _drop$1$[ebp]
  00337	d3 e0		 shl	 eax, cl
  00339	89 4d d8	 mov	 DWORD PTR _curr$1$[ebp], ecx

; 269  :             while (curr + drop < max) {

  0033c	3b df		 cmp	 ebx, edi
  0033e	73 30		 jae	 SHORT $LN81@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  00340	8d 55 a0	 lea	 edx, DWORD PTR _count$[ebp]
  00343	8b f3		 mov	 esi, ebx
  00345	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00348	8b d9		 mov	 ebx, ecx
  0034a	66 0f 1f 44 00
	00		 npad	 6
$LL33@inflate_ta:

; 270  :                 left -= count[curr + drop];

  00350	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00353	2b c1		 sub	 eax, ecx

; 271  :                 if (left <= 0) break;

  00355	85 c0		 test	 eax, eax
  00357	7e 0b		 jle	 SHORT $LN137@inflate_ta

; 272  :                 curr++;

  00359	46		 inc	 esi
  0035a	43		 inc	 ebx
  0035b	83 c2 02	 add	 edx, 2

; 273  :                 left <<= 1;

  0035e	03 c0		 add	 eax, eax
  00360	3b f7		 cmp	 esi, edi
  00362	72 ec		 jb	 SHORT $LL33@inflate_ta
$LN137@inflate_ta:
  00364	8b 55 c8	 mov	 edx, DWORD PTR tv1926[ebp]
  00367	89 5d d8	 mov	 DWORD PTR _curr$1$[ebp], ebx
  0036a	8b 5d f0	 mov	 ebx, DWORD PTR _len$2$[ebp]
  0036d	8b 4d d8	 mov	 ecx, DWORD PTR _curr$1$[ebp]
$LN81@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;

  00370	8b 45 d0	 mov	 eax, DWORD PTR _used$1$[ebp]
  00373	be 01 00 00 00	 mov	 esi, 1
  00378	d3 e6		 shl	 esi, cl
  0037a	03 c6		 add	 eax, esi
  0037c	89 75 d8	 mov	 DWORD PTR tv1918[ebp], esi

; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||

  0037f	8b 75 d4	 mov	 esi, DWORD PTR _type$1$[ebp]
  00382	89 45 d0	 mov	 DWORD PTR _used$1$[ebp], eax
  00385	83 fe 01	 cmp	 esi, 1
  00388	75 07		 jne	 SHORT $LN63@inflate_ta
  0038a	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  0038f	eb 0a		 jmp	 SHORT $LN145@inflate_ta
$LN63@inflate_ta:
  00391	83 fe 02	 cmp	 esi, 2
  00394	75 0b		 jne	 SHORT $LN61@inflate_ta
  00396	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
$LN145@inflate_ta:

; 279  :                 (type == DISTS && used > ENOUGH_DISTS))
; 280  :                 return 1;
; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;

  0039b	0f 87 60 fe ff
	ff		 ja	 $LN62@inflate_ta
$LN61@inflate_ta:

; 284  :             (*table)[low].op = (unsigned char)curr;

  003a1	8b 75 0c	 mov	 esi, DWORD PTR _table$[ebp]
  003a4	89 55 cc	 mov	 DWORD PTR _low$1$[ebp], edx
  003a7	8b 06		 mov	 eax, DWORD PTR [esi]
  003a9	88 0c 90	 mov	 BYTE PTR [eax+edx*4], cl

; 285  :             (*table)[low].bits = (unsigned char)root;

  003ac	8b 06		 mov	 eax, DWORD PTR [esi]
  003ae	8b 4d ec	 mov	 ecx, DWORD PTR tv1931[ebp]
  003b1	88 4c 90 01	 mov	 BYTE PTR [eax+edx*4+1], cl

; 286  :             (*table)[low].val = (unsigned short)(next - *table);

  003b5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003b7	8b 45 f8	 mov	 eax, DWORD PTR _next$1$[ebp]
  003ba	2b c1		 sub	 eax, ecx
  003bc	c1 f8 02	 sar	 eax, 2
  003bf	66 89 44 91 02	 mov	 WORD PTR [ecx+edx*4+2], ax

; 287  :         }
; 288  :     }

  003c4	e9 57 fe ff ff	 jmp	 $LL138@inflate_ta
$LN82@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  003c9	85 f6		 test	 esi, esi
  003cb	74 13		 je	 SHORT $LN64@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);
; 296  :         here.val = (unsigned short)0;
; 297  :         next[huff] = here;

  003cd	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  003d0	33 c0		 xor	 eax, eax
  003d2	c6 45 08 40	 mov	 BYTE PTR _here$[ebp], 64 ; 00000040H
  003d6	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
  003da	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  003dd	89 04 b1	 mov	 DWORD PTR [ecx+esi*4], eax
$LN64@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  003e0	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  003e3	8b 45 d0	 mov	 eax, DWORD PTR _used$1$[ebp]
  003e6	c1 e0 02	 shl	 eax, 2
  003e9	5f		 pop	 edi
  003ea	01 01		 add	 DWORD PTR [ecx], eax

; 302  :     *bits = root;

  003ec	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  003ef	8b 45 ec	 mov	 eax, DWORD PTR tv1931[ebp]

; 303  :     return 0;
; 304  : }

  003f2	5e		 pop	 esi
  003f3	5b		 pop	 ebx
  003f4	89 01		 mov	 DWORD PTR [ecx], eax
  003f6	33 c0		 xor	 eax, eax
  003f8	8b e5		 mov	 esp, ebp
  003fa	5d		 pop	 ebp
  003fb	c3		 ret	 0
$LN42@inflate_ta:
  003fc	5f		 pop	 edi
  003fd	5e		 pop	 esi
  003fe	83 c8 ff	 or	 eax, -1
  00401	5b		 pop	 ebx
  00402	8b e5		 mov	 esp, ebp
  00404	5d		 pop	 ebp
  00405	c3		 ret	 0
_inflate_table ENDP
_TEXT	ENDS
END
