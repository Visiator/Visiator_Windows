; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	c:\prj\visiator_windows\v26\zlib\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_longest_match:PROC
EXTRN	_match_init:PROC
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
$T1 = -8						; size = 4
_beg$1$ = -4						; size = 4
$T2 = 8							; size = 4
_beg$1$ = 8						; size = 4
_beg$1$ = 8						; size = 4
_left$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00008	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 _deflateStateCheck
  00012	85 c0		 test	 eax, eax
  00014	0f 85 97 08 00
	00		 jne	 $LN29@deflate
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001d	83 fb 05	 cmp	 ebx, 5
  00020	0f 87 8b 08 00
	00		 ja	 $LN29@deflate

; 772  :     }
; 773  :     s = strm->state;

  00026	56		 push	 esi
  00027	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  0002a	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002d	0f 84 68 08 00
	00		 je	 $LN31@deflate
  00033	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00036	74 08		 je	 SHORT $LN32@deflate
  00038	39 07		 cmp	 DWORD PTR [edi], eax
  0003a	0f 84 5b 08 00
	00		 je	 $LN31@deflate
$LN32@deflate:
  00040	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00043	81 f9 9a 02 00
	00		 cmp	 ecx, 666		; 0000029aH
  00049	75 09		 jne	 SHORT $LN30@deflate
  0004b	83 fb 04	 cmp	 ebx, 4
  0004e	0f 85 47 08 00
	00		 jne	 $LN31@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00054	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00058	74 5c		 je	 SHORT $LN141@deflate

; 781  : 
; 782  :     old_flush = s->last_flush;
; 783  :     s->last_flush = flush;
; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  0005a	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005e	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00061	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00064	74 16		 je	 SHORT $LN34@deflate

; 787  :         flush_pending(strm);

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 _flush_pending

; 788  :         if (strm->avail_out == 0) {

  0006d	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00071	0f 84 12 08 00
	00		 je	 $LN140@deflate

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }

  00077	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007a	eb 53		 jmp	 SHORT $LN37@deflate
$LN34@deflate:

; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  0007c	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00080	8b c1		 mov	 eax, ecx
  00082	75 4b		 jne	 SHORT $LN37@deflate
  00084	33 c0		 xor	 eax, eax
  00086	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00089	83 fa 04	 cmp	 edx, 4
  0008c	b9 09 00 00 00	 mov	 ecx, 9
  00091	0f 4f c1	 cmovg	 eax, ecx
  00094	03 d2		 add	 edx, edx
  00096	2b d0		 sub	 edx, eax
  00098	33 c9		 xor	 ecx, ecx
  0009a	83 fb 04	 cmp	 ebx, 4
  0009d	b8 09 00 00 00	 mov	 eax, 9
  000a2	0f 4f c8	 cmovg	 ecx, eax
  000a5	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000a8	2b c1		 sub	 eax, ecx
  000aa	3b c2		 cmp	 eax, edx
  000ac	7f 1e		 jg	 SHORT $LN144@deflate
  000ae	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b1	83 fb 04	 cmp	 ebx, 4
  000b4	74 19		 je	 SHORT $LN37@deflate
$LN141@deflate:

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000b6	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  000bb	5e		 pop	 esi
  000bc	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000bf	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000c4	5f		 pop	 edi

; 1073 : }

  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
$LN144@deflate:

; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  000cc	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
$LN37@deflate:

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000cf	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000d4	75 0c		 jne	 SHORT $LN38@deflate
  000d6	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000da	0f 84 c0 00 00
	00		 je	 $LN124@deflate
  000e0	eb d4		 jmp	 SHORT $LN141@deflate
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  000e2	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000e5	0f 85 b5 00 00
	00		 jne	 $LN124@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  000eb	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000ee	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000f1	2d 00 78 00 00	 sub	 eax, 30720		; 00007800H

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000f6	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  000fd	7d 30		 jge	 SHORT $LN135@deflate
  000ff	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  00105	83 f9 02	 cmp	 ecx, 2
  00108	7c 25		 jl	 SHORT $LN135@deflate

; 821  :         else if (s->level < 6)

  0010a	83 f9 06	 cmp	 ecx, 6
  0010d	7d 0a		 jge	 SHORT $LN43@deflate

; 822  :             level_flags = 1;

  0010f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00114	8d 4a 20	 lea	 ecx, DWORD PTR [edx+32]
  00117	eb 1d		 jmp	 SHORT $LN46@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

  00119	75 0a		 jne	 SHORT $LN45@deflate

; 824  :             level_flags = 2;

  0011b	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00120	8d 4a 20	 lea	 ecx, DWORD PTR [edx+32]
  00123	eb 11		 jmp	 SHORT $LN46@deflate
$LN45@deflate:

; 825  :         else
; 826  :             level_flags = 3;

  00125	ba c0 00 00 00	 mov	 edx, 192		; 000000c0H
  0012a	8d 4a 20	 lea	 ecx, DWORD PTR [edx+32]
  0012d	eb 07		 jmp	 SHORT $LN46@deflate
$LN135@deflate:

; 820  :             level_flags = 0;

  0012f	33 d2		 xor	 edx, edx
  00131	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
$LN46@deflate:

; 827  :         header |= (level_flags << 6);
; 828  :         if (s->strstart != 0) header |= PRESET_DICT;
; 829  :         header += 31 - (header % 31);

  00136	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0013a	0f 44 ca	 cmove	 ecx, edx
  0013d	0b c8		 or	 ecx, eax
  0013f	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00144	f7 e1		 mul	 ecx
  00146	2b ca		 sub	 ecx, edx
  00148	d1 e9		 shr	 ecx, 1
  0014a	03 ca		 add	 ecx, edx
  0014c	c1 e9 04	 shr	 ecx, 4
  0014f	41		 inc	 ecx
  00150	8b d1		 mov	 edx, ecx
  00152	c1 e2 05	 shl	 edx, 5
  00155	2b d1		 sub	 edx, ecx

; 830  : 
; 831  :         putShortMSB(s, header);

  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 _putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0015e	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00162	74 16		 je	 SHORT $LN48@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00164	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00168	8b ce		 mov	 ecx, esi
  0016a	e8 00 00 00 00	 call	 _putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0016f	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00173	8b ce		 mov	 ecx, esi
  00175	e8 00 00 00 00	 call	 _putShortMSB
$LN48@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  0017a	6a 00		 push	 0
  0017c	6a 00		 push	 0
  0017e	6a 00		 push	 0
  00180	e8 00 00 00 00	 call	 _adler32@12
  00185	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 839  :         s->status = BUSY_STATE;
; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  00188	8b cf		 mov	 ecx, edi
  0018a	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00191	e8 00 00 00 00	 call	 _flush_pending

; 843  :         if (s->pending != 0) {

  00196	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0019a	0f 85 e9 06 00
	00		 jne	 $LN140@deflate
$LN124@deflate:

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  001a0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001a3	83 f8 39	 cmp	 eax, 57			; 00000039H
  001a6	0f 85 ff 01 00
	00		 jne	 $LN52@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	6a 00		 push	 0
  001b2	e8 00 00 00 00	 call	 _crc32@12
  001b7	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 852  :         put_byte(s, 31);

  001ba	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001bd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001c0	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001c4	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 853  :         put_byte(s, 139);

  001ca	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001cd	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001d1	ff 46 14	 inc	 DWORD PTR [esi+20]
  001d4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 854  :         put_byte(s, 8);

  001d7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001da	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001de	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 855  :         if (s->gzhead == Z_NULL) {

  001e1	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  001e4	42		 inc	 edx
  001e5	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001e8	85 db		 test	 ebx, ebx
  001ea	0f 85 96 00 00
	00		 jne	 $LN51@deflate

; 856  :             put_byte(s, 0);

  001f0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f3	88 1c 02	 mov	 BYTE PTR [edx+eax], bl
  001f6	ff 46 14	 inc	 DWORD PTR [esi+20]
  001f9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 857  :             put_byte(s, 0);

  001fc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ff	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00202	ff 46 14	 inc	 DWORD PTR [esi+20]
  00205	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 858  :             put_byte(s, 0);

  00208	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020b	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0020e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00211	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 859  :             put_byte(s, 0);

  00214	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00217	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0021a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0021d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 860  :             put_byte(s, 0);

  00220	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00223	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00226	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 861  :             put_byte(s, s->level == 9 ? 2 :

  00229	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0022f	42		 inc	 edx
  00230	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00233	83 f8 09	 cmp	 eax, 9
  00236	75 04		 jne	 SHORT $LN100@deflate
  00238	b1 02		 mov	 cl, 2
  0023a	eb 14		 jmp	 SHORT $LN99@deflate
$LN100@deflate:
  0023c	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00243	7d 09		 jge	 SHORT $LN98@deflate
  00245	83 f8 02	 cmp	 eax, 2
  00248	7c 04		 jl	 SHORT $LN98@deflate
  0024a	32 c9		 xor	 cl, cl
  0024c	eb 02		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  0024e	b1 04		 mov	 cl, 4
$LN99@deflate:
  00250	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00253	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00256	ff 46 14	 inc	 DWORD PTR [esi+20]
  00259	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

  0025c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0025f	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 865  :             s->status = BUSY_STATE;
; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  00263	8b cf		 mov	 ecx, edi
  00265	ff 46 14	 inc	 DWORD PTR [esi+20]
  00268	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  0026f	e8 00 00 00 00	 call	 _flush_pending

; 869  :             if (s->pending != 0) {

  00274	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00278	0f 85 0b 06 00
	00		 jne	 $LN140@deflate

; 870  :                 s->last_flush = -1;
; 871  :                 return Z_OK;
; 872  :             }
; 873  :         }

  0027e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00281	e9 25 01 00 00	 jmp	 $LN52@deflate
$LN51@deflate:

; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  00286	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00289	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0028c	f7 d9		 neg	 ecx
  0028e	1a c9		 sbb	 cl, cl
  00290	80 e1 10	 and	 cl, 16			; 00000010H
  00293	f7 d8		 neg	 eax
  00295	1a c0		 sbb	 al, al
  00297	24 02		 and	 al, 2
  00299	02 c8		 add	 cl, al
  0029b	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0029e	f7 d8		 neg	 eax
  002a0	1a c0		 sbb	 al, al
  002a2	24 08		 and	 al, 8
  002a4	02 c8		 add	 cl, al
  002a6	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  002a9	f7 d8		 neg	 eax
  002ab	1a c0		 sbb	 al, al
  002ad	24 04		 and	 al, 4
  002af	02 c8		 add	 cl, al
  002b1	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  002b4	0f 95 c0	 setne	 al
  002b7	02 c8		 add	 cl, al
  002b9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002bc	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002bf	ff 46 14	 inc	 DWORD PTR [esi+20]
  002c2	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002c5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002c8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002cb	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002cf	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002d2	ff 46 14	 inc	 DWORD PTR [esi+20]
  002d5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002d8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002de	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  002e2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002e5	ff 46 14	 inc	 DWORD PTR [esi+20]
  002e8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  002eb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002ee	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002f1	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  002f5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f8	ff 46 14	 inc	 DWORD PTR [esi+20]

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  002fb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002fe	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00301	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00304	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  00308	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0030b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 885  :             put_byte(s, s->level == 9 ? 2 :

  0030e	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00314	42		 inc	 edx
  00315	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00318	83 f8 09	 cmp	 eax, 9
  0031b	75 04		 jne	 SHORT $LN104@deflate
  0031d	b1 02		 mov	 cl, 2
  0031f	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00321	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00328	7d 09		 jge	 SHORT $LN102@deflate
  0032a	83 f8 02	 cmp	 eax, 2
  0032d	7c 04		 jl	 SHORT $LN102@deflate
  0032f	32 c9		 xor	 cl, cl
  00331	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  00333	b1 04		 mov	 cl, 4
$LN103@deflate:
  00335	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00338	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0033b	ff 46 14	 inc	 DWORD PTR [esi+20]

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  0033e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00341	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00344	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00347	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0034a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0034d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00350	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00353	42		 inc	 edx
  00354	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00357	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0035b	74 26		 je	 SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  0035d	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  00361	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00364	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00367	ff 46 14	 inc	 DWORD PTR [esi+20]

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  0036a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0036d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00370	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00373	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00377	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0037a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0037d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00380	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  00383	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00387	74 0f		 je	 SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  00389	52		 push	 edx
  0038a	ff 76 08	 push	 DWORD PTR [esi+8]
  0038d	ff 77 30	 push	 DWORD PTR [edi+48]
  00390	e8 00 00 00 00	 call	 _crc32@12
  00395	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

  00398	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 897  :             s->status = EXTRA_STATE;

  0039f	b8 45 00 00 00	 mov	 eax, 69			; 00000045H
  003a4	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN52@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  003ab	83 f8 45	 cmp	 eax, 69			; 00000045H
  003ae	0f 85 fa 00 00
	00		 jne	 $LN138@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  003b4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003b7	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003bb	0f 84 e1 00 00
	00		 je	 $LN136@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003c1	0f b7 50 14	 movzx	 edx, WORD PTR [eax+20]
  003c5	2b 56 20	 sub	 edx, DWORD PTR [esi+32]
  003c8	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 904  :             while (s->pending + left > s->pending_buf_size) {

  003cb	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003ce	89 4d fc	 mov	 DWORD PTR _beg$1$[ebp], ecx
  003d1	89 55 08	 mov	 DWORD PTR _left$1$[ebp], edx
  003d4	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  003d7	3b c3		 cmp	 eax, ebx
  003d9	76 78		 jbe	 SHORT $LN145@deflate
  003db	8b c1		 mov	 eax, ecx
  003dd	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
$LL2@deflate:

; 905  :                 uInt copy = s->pending_buf_size - s->pending;

  003e0	2b d8		 sub	 ebx, eax

; 906  :                 zmemcpy(s->pending_buf + s->pending,

  003e2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003e5	53		 push	 ebx
  003e6	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003e9	03 46 20	 add	 eax, DWORD PTR [esi+32]
  003ec	50		 push	 eax
  003ed	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003f0	03 45 f8	 add	 eax, DWORD PTR $T1[ebp]
  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 _memcpy

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;
; 909  :                 HCRC_UPDATE(beg);

  003f9	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ff	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00402	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00405	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00409	74 1b		 je	 SHORT $LN4@deflate
  0040b	8b 4d fc	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  0040e	3b d1		 cmp	 edx, ecx
  00410	76 14		 jbe	 SHORT $LN4@deflate
  00412	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00415	2b d1		 sub	 edx, ecx
  00417	52		 push	 edx
  00418	03 c1		 add	 eax, ecx
  0041a	50		 push	 eax
  0041b	ff 77 30	 push	 DWORD PTR [edi+48]
  0041e	e8 00 00 00 00	 call	 _crc32@12
  00423	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 910  :                 s->gzindex += copy;

  00426	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 911  :                 flush_pending(strm);

  00429	8b cf		 mov	 ecx, edi
  0042b	e8 00 00 00 00	 call	 _flush_pending

; 912  :                 if (s->pending != 0) {

  00430	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00434	0f 85 4f 04 00
	00		 jne	 $LN140@deflate

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;
; 917  :                 left -= copy;

  0043a	8b 55 08	 mov	 edx, DWORD PTR _left$1$[ebp]
  0043d	33 c9		 xor	 ecx, ecx
  0043f	2b d3		 sub	 edx, ebx
  00441	89 4d fc	 mov	 DWORD PTR _beg$1$[ebp], ecx
  00444	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00447	33 c0		 xor	 eax, eax
  00449	89 55 08	 mov	 DWORD PTR _left$1$[ebp], edx
  0044c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0044f	3b d3		 cmp	 edx, ebx
  00451	77 8d		 ja	 SHORT $LL2@deflate
$LN145@deflate:

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,

  00453	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00456	8b 5e 20	 mov	 ebx, DWORD PTR [esi+32]
  00459	52		 push	 edx
  0045a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0045d	03 c3		 add	 eax, ebx
  0045f	50		 push	 eax
  00460	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00463	03 c1		 add	 eax, ecx
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _memcpy

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  0046b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0046e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  :             HCRC_UPDATE(beg);

  00471	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00474	03 55 08	 add	 edx, DWORD PTR _left$1$[ebp]
  00477	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0047a	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0047e	74 1b		 je	 SHORT $LN7@deflate
  00480	8b 4d fc	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00483	3b d1		 cmp	 edx, ecx
  00485	76 14		 jbe	 SHORT $LN7@deflate
  00487	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0048a	2b d1		 sub	 edx, ecx
  0048c	52		 push	 edx
  0048d	03 c1		 add	 eax, ecx
  0048f	50		 push	 eax
  00490	ff 77 30	 push	 DWORD PTR [edi+48]
  00493	e8 00 00 00 00	 call	 _crc32@12
  00498	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN7@deflate:

; 923  :             s->gzindex = 0;

  0049b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN136@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  004a2	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
  004a9	b8 49 00 00 00	 mov	 eax, 73			; 00000049H
$LN138@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  004ae	83 f8 49	 cmp	 eax, 73			; 00000049H
  004b1	0f 85 b8 00 00
	00		 jne	 $LN139@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  004b7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004ba	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004be	0f 84 9f 00 00
	00		 je	 $LN137@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  004c4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  004c7	8b d9		 mov	 ebx, ecx
  004c9	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx
  004cc	0f 1f 40 00	 npad	 4
$LL12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  004d0	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  004d3	75 3b		 jne	 SHORT $LN63@deflate

; 933  :                     HCRC_UPDATE(beg);

  004d5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004d8	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004dc	74 18		 je	 SHORT $LN13@deflate
  004de	3b d9		 cmp	 ebx, ecx
  004e0	76 14		 jbe	 SHORT $LN13@deflate
  004e2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004e5	2b d9		 sub	 ebx, ecx
  004e7	53		 push	 ebx
  004e8	03 c1		 add	 eax, ecx
  004ea	50		 push	 eax
  004eb	ff 77 30	 push	 DWORD PTR [edi+48]
  004ee	e8 00 00 00 00	 call	 _crc32@12
  004f3	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 934  :                     flush_pending(strm);

  004f6	8b cf		 mov	 ecx, edi
  004f8	e8 00 00 00 00	 call	 _flush_pending

; 935  :                     if (s->pending != 0) {

  004fd	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00501	0f 85 82 03 00
	00		 jne	 $LN140@deflate

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  00507	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  0050e	33 db		 xor	 ebx, ebx
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  00510	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00513	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00516	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00519	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0051c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0051f	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 942  :                 put_byte(s, val);

  00522	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00525	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  00528	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0052b	43		 inc	 ebx
  0052c	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 943  :             } while (val != 0);

  0052f	84 d2		 test	 dl, dl
  00531	74 05		 je	 SHORT $LN117@deflate
  00533	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00536	eb 98		 jmp	 SHORT $LL12@deflate
$LN117@deflate:

; 944  :             HCRC_UPDATE(beg);

  00538	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0053b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0053f	74 1b		 je	 SHORT $LN16@deflate
  00541	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00544	3b d9		 cmp	 ebx, ecx
  00546	76 14		 jbe	 SHORT $LN16@deflate
  00548	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0054b	2b d9		 sub	 ebx, ecx
  0054d	53		 push	 ebx
  0054e	03 c1		 add	 eax, ecx
  00550	50		 push	 eax
  00551	ff 77 30	 push	 DWORD PTR [edi+48]
  00554	e8 00 00 00 00	 call	 _crc32@12
  00559	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 945  :             s->gzindex = 0;

  0055c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN137@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  00563	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
  0056a	b8 5b 00 00 00	 mov	 eax, 91			; 0000005bH
$LN139@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  0056f	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00572	0f 85 ad 00 00
	00		 jne	 $LN67@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  00578	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0057b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0057f	0f 84 97 00 00
	00		 je	 $LN26@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00585	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00588	8b d9		 mov	 ebx, ecx
  0058a	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx
  0058d	0f 1f 00	 npad	 3
$LL21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  00590	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  00593	75 3b		 jne	 SHORT $LN69@deflate

; 955  :                     HCRC_UPDATE(beg);

  00595	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00598	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0059c	74 18		 je	 SHORT $LN22@deflate
  0059e	3b d9		 cmp	 ebx, ecx
  005a0	76 14		 jbe	 SHORT $LN22@deflate
  005a2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  005a5	2b d9		 sub	 ebx, ecx
  005a7	53		 push	 ebx
  005a8	03 c1		 add	 eax, ecx
  005aa	50		 push	 eax
  005ab	ff 77 30	 push	 DWORD PTR [edi+48]
  005ae	e8 00 00 00 00	 call	 _crc32@12
  005b3	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 956  :                     flush_pending(strm);

  005b6	8b cf		 mov	 ecx, edi
  005b8	e8 00 00 00 00	 call	 _flush_pending

; 957  :                     if (s->pending != 0) {

  005bd	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  005c1	0f 85 c2 02 00
	00		 jne	 $LN140@deflate

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  005c7	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  005ce	33 db		 xor	 ebx, ebx
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  005d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005d3	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  005d6	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  005d9	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  005dc	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  005df	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 964  :                 put_byte(s, val);

  005e2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  005e5	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  005e8	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  005eb	43		 inc	 ebx
  005ec	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 965  :             } while (val != 0);

  005ef	84 d2		 test	 dl, dl
  005f1	74 05		 je	 SHORT $LN119@deflate
  005f3	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  005f6	eb 98		 jmp	 SHORT $LL21@deflate
$LN119@deflate:

; 966  :             HCRC_UPDATE(beg);

  005f8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005fb	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  005ff	74 1b		 je	 SHORT $LN26@deflate
  00601	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00604	3b d9		 cmp	 ebx, ecx
  00606	76 14		 jbe	 SHORT $LN26@deflate
  00608	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0060b	2b d9		 sub	 ebx, ecx
  0060d	53		 push	 ebx
  0060e	03 c1		 add	 eax, ecx
  00610	50		 push	 eax
  00611	ff 77 30	 push	 DWORD PTR [edi+48]
  00614	e8 00 00 00 00	 call	 _crc32@12
  00619	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN26@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  0061c	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  00623	eb 05		 jmp	 SHORT $LN134@deflate
$LN67@deflate:
  00625	83 f8 67	 cmp	 eax, 103		; 00000067H
  00628	75 69		 jne	 SHORT $LN130@deflate
$LN134@deflate:

; 971  :         if (s->gzhead->hcrc) {

  0062a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0062d	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00631	74 48		 je	 SHORT $LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  00633	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00636	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00639	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0063c	76 12		 jbe	 SHORT $LN129@deflate

; 973  :                 flush_pending(strm);

  0063e	8b cf		 mov	 ecx, edi
  00640	e8 00 00 00 00	 call	 _flush_pending

; 974  :                 if (s->pending != 0) {

  00645	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00648	85 d2		 test	 edx, edx
  0064a	0f 85 39 02 00
	00		 jne	 $LN140@deflate
$LN129@deflate:

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;
; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00650	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00653	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00657	6a 00		 push	 0
  00659	6a 00		 push	 0
  0065b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0065e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00661	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00664	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00667	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  0066b	6a 00		 push	 0
  0066d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00670	ff 46 14	 inc	 DWORD PTR [esi+20]
  00673	e8 00 00 00 00	 call	 _crc32@12
  00678	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;
; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  0067b	8b cf		 mov	 ecx, edi
  0067d	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00684	e8 00 00 00 00	 call	 _flush_pending

; 987  :         if (s->pending != 0) {

  00689	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0068d	0f 85 f6 01 00
	00		 jne	 $LN140@deflate
$LN130@deflate:

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;
; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  00693	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00697	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0069a	75 1b		 jne	 SHORT $LN79@deflate
  0069c	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  006a0	75 15		 jne	 SHORT $LN79@deflate
  006a2	85 db		 test	 ebx, ebx
  006a4	0f 84 f8 00 00
	00		 je	 $LN91@deflate
  006aa	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  006b1	0f 84 eb 00 00
	00		 je	 $LN91@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  006b7	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  006bd	85 c0		 test	 eax, eax
  006bf	75 09		 jne	 SHORT $LN110@deflate
  006c1	53		 push	 ebx
  006c2	56		 push	 esi
  006c3	e8 00 00 00 00	 call	 _deflate_stored
  006c8	eb 34		 jmp	 SHORT $LN147@deflate
$LN110@deflate:
  006ca	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  006d0	83 f9 02	 cmp	 ecx, 2
  006d3	75 0b		 jne	 SHORT $LN108@deflate
  006d5	8b d3		 mov	 edx, ebx
  006d7	8b ce		 mov	 ecx, esi
  006d9	e8 00 00 00 00	 call	 _deflate_huff
  006de	eb 21		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  006e0	83 f9 03	 cmp	 ecx, 3
  006e3	75 0b		 jne	 SHORT $LN106@deflate
  006e5	8b d3		 mov	 edx, ebx
  006e7	8b ce		 mov	 ecx, esi
  006e9	e8 00 00 00 00	 call	 _deflate_rle
  006ee	eb 11		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  006f0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  006f3	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  006fa	53		 push	 ebx
  006fb	56		 push	 esi
  006fc	ff d0		 call	 eax
$LN147@deflate:

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  006fe	83 c4 08	 add	 esp, 8
$LN107@deflate:
  00701	83 f8 02	 cmp	 eax, 2
  00704	74 05		 je	 SHORT $LN81@deflate
  00706	83 f8 03	 cmp	 eax, 3
  00709	75 07		 jne	 SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

  0070b	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  00712	85 c0		 test	 eax, eax
  00714	0f 84 69 01 00
	00		 je	 $LN83@deflate
  0071a	83 f8 02	 cmp	 eax, 2
  0071d	0f 84 60 01 00
	00		 je	 $LN83@deflate

; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  00723	83 f8 01	 cmp	 eax, 1
  00726	75 7a		 jne	 SHORT $LN91@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00728	3b d8		 cmp	 ebx, eax
  0072a	75 09		 jne	 SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

  0072c	8b ce		 mov	 ecx, esi
  0072e	e8 00 00 00 00	 call	 __tr_align
  00733	eb 5c		 jmp	 SHORT $LN90@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00735	83 fb 05	 cmp	 ebx, 5
  00738	74 57		 je	 SHORT $LN90@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  0073a	6a 00		 push	 0
  0073c	6a 00		 push	 0
  0073e	33 d2		 xor	 edx, edx
  00740	8b ce		 mov	 ecx, esi
  00742	e8 00 00 00 00	 call	 __tr_stored_block
  00747	83 c4 08	 add	 esp, 8

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  0074a	83 fb 03	 cmp	 ebx, 3
  0074d	75 42		 jne	 SHORT $LN90@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  0074f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00752	33 d2		 xor	 edx, edx
  00754	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00757	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0075c	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0075f	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00766	50		 push	 eax
  00767	52		 push	 edx
  00768	ff 76 44	 push	 DWORD PTR [esi+68]
  0076b	e8 00 00 00 00	 call	 _memset
  00770	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  00773	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00777	75 18		 jne	 SHORT $LN90@deflate

; 1032 :                         s->strstart = 0;

  00779	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1033 :                         s->block_start = 0L;

  00780	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1034 :                         s->insert = 0;

  00787	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN90@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  00791	8b cf		 mov	 ecx, edi
  00793	e8 00 00 00 00	 call	 _flush_pending

; 1039 :             if (strm->avail_out == 0) {

  00798	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0079c	0f 84 e7 00 00
	00		 je	 $LN140@deflate
$LN91@deflate:

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  007a2	83 fb 04	 cmp	 ebx, 4
  007a5	0f 85 e5 00 00
	00		 jne	 $LN84@deflate

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  007ab	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  007ae	85 c0		 test	 eax, eax
  007b0	7f 0c		 jg	 SHORT $LN93@deflate
  007b2	5e		 pop	 esi
  007b3	5f		 pop	 edi
  007b4	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]

; 1073 : }

  007b7	5b		 pop	 ebx
  007b8	8b e5		 mov	 esp, ebp
  007ba	5d		 pop	 ebp
  007bb	c2 08 00	 ret	 8
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  007be	83 f8 02	 cmp	 eax, 2
  007c1	0f 85 82 00 00
	00		 jne	 $LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  007c7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007ca	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  007ce	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007d1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007d4	ff 46 14	 inc	 DWORD PTR [esi+20]
  007d7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  007da	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  007de	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007e1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007e4	ff 46 14	 inc	 DWORD PTR [esi+20]
  007e7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  007ea	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  007ee	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007f1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007f4	ff 46 14	 inc	 DWORD PTR [esi+20]
  007f7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  007fa	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  007fe	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00801	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00804	ff 46 14	 inc	 DWORD PTR [esi+20]
  00807	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  0080a	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  0080e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00811	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00814	ff 46 14	 inc	 DWORD PTR [esi+20]
  00817	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  0081a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0081d	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00821	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00824	ff 46 14	 inc	 DWORD PTR [esi+20]
  00827	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  0082a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0082d	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00831	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00834	ff 46 14	 inc	 DWORD PTR [esi+20]
  00837	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  0083a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0083d	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00841	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00844	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1060 :     }

  00847	eb 16		 jmp	 SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00849	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  0084d	8b ce		 mov	 ecx, esi
  0084f	e8 00 00 00 00	 call	 _putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00854	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00858	8b ce		 mov	 ecx, esi
  0085a	e8 00 00 00 00	 call	 _putShortMSB
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  0085f	8b cf		 mov	 ecx, edi
  00861	e8 00 00 00 00	 call	 _flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00866	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00869	85 c0		 test	 eax, eax
  0086b	7e 05		 jle	 SHORT $LN96@deflate
  0086d	f7 d8		 neg	 eax
  0086f	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN96@deflate:

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00872	33 c0		 xor	 eax, eax
  00874	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00877	5e		 pop	 esi
  00878	5f		 pop	 edi
  00879	0f 94 c0	 sete	 al

; 1073 : }

  0087c	5b		 pop	 ebx
  0087d	8b e5		 mov	 esp, ebp
  0087f	5d		 pop	 ebp
  00880	c2 08 00	 ret	 8
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

  00883	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00887	75 07		 jne	 SHORT $LN84@deflate
$LN140@deflate:

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  00889	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN84@deflate:
  00890	5e		 pop	 esi
  00891	5f		 pop	 edi

; 1011 :             }
; 1012 :             return Z_OK;

  00892	33 c0		 xor	 eax, eax

; 1073 : }

  00894	5b		 pop	 ebx
  00895	8b e5		 mov	 esp, ebp
  00897	5d		 pop	 ebp
  00898	c2 08 00	 ret	 8
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  0089b	a1 10 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+16
  008a0	5e		 pop	 esi
  008a1	89 47 18	 mov	 DWORD PTR [edi+24], eax
  008a4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  008a9	5f		 pop	 edi

; 1073 : }

  008aa	5b		 pop	 ebx
  008ab	8b e5		 mov	 esp, ebp
  008ad	5d		 pop	 ebp
  008ae	c2 08 00	 ret	 8
$LN29@deflate:
  008b1	5f		 pop	 edi

; 771  :         return Z_STREAM_ERROR;

  008b2	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1073 : }

  008b7	5b		 pop	 ebx
  008b8	8b e5		 mov	 esp, ebp
  008ba	5d		 pop	 ebp
  008bb	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5e		 pop	 esi

; 1095 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	57		 push	 edi

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00026	85 c9		 test	 ecx, ecx
  00028	74 0f		 je	 SHORT $LN3@deflateEnd
  0002a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002d	51		 push	 ecx
  0002e	ff 76 28	 push	 DWORD PTR [esi+40]
  00031	ff d0		 call	 eax
  00033	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00036	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00039	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0003c	85 c9		 test	 ecx, ecx
  0003e	74 0f		 je	 SHORT $LN4@deflateEnd
  00040	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00043	51		 push	 ecx
  00044	ff 76 28	 push	 DWORD PTR [esi+40]
  00047	ff d0		 call	 eax
  00049	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004c	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  0004f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00052	85 c9		 test	 ecx, ecx
  00054	74 0f		 je	 SHORT $LN5@deflateEnd
  00056	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00059	51		 push	 ecx
  0005a	ff 76 28	 push	 DWORD PTR [esi+40]
  0005d	ff d0		 call	 eax
  0005f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00062	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  00065	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00068	85 c9		 test	 ecx, ecx
  0006a	74 0f		 je	 SHORT $LN6@deflateEnd
  0006c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0006f	51		 push	 ecx
  00070	ff 76 28	 push	 DWORD PTR [esi+40]
  00073	ff d0		 call	 eax
  00075	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00078	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  0007b	50		 push	 eax
  0007c	ff 76 28	 push	 DWORD PTR [esi+40]
  0007f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00082	ff d0		 call	 eax
  00084	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;

  00087	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008e	33 c0		 xor	 eax, eax
  00090	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  00095	83 ff 71	 cmp	 edi, 113		; 00000071H
  00098	5f		 pop	 edi
  00099	0f 44 c1	 cmove	 eax, ecx
  0009c	5e		 pop	 esi

; 1095 : }

  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv243 = -4						; size = 4
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;

  00009	8b 7b 4c	 mov	 edi, DWORD PTR [ebx+76]

; 209  :     p = &s->head[n];

  0000c	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  0000f	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00012	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
$LL4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00015	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00019	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0001c	8b c1		 mov	 eax, ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  00025	2b c2		 sub	 eax, edx
  00027	3b ca		 cmp	 ecx, edx
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	0f 42 45 fc	 cmovb	 eax, DWORD PTR tv243[ebp]
  00030	66 89 06	 mov	 WORD PTR [esi], ax

; 213  :     } while (--n);

  00033	83 ef 01	 sub	 edi, 1
  00036	75 dd		 jne	 SHORT $LL4@slide_hash

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00038	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0003b	8b fa		 mov	 edi, edx
  0003d	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  00040	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00044	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00047	8b c1		 mov	 eax, ecx
  00049	33 db		 xor	 ebx, ebx
  0004b	2b c2		 sub	 eax, edx
  0004d	3b ca		 cmp	 ecx, edx
  0004f	0f b7 c0	 movzx	 eax, ax
  00052	0f 42 c3	 cmovb	 eax, ebx
  00055	66 89 06	 mov	 WORD PTR [esi], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00058	83 ef 01	 sub	 edi, 1
  0005b	75 e3		 jne	 SHORT $LL7@slide_hash

; 224  : #endif
; 225  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
tv474 = 36						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;
; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	be 01 00 00 00	 mov	 esi, 1
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 12 02 00
	00		 je	 $LN3@deflateIni
  00014	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00017	0f 85 09 02 00
	00		 jne	 $LN3@deflateIni
  0001d	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00021	0f 85 ff 01 00
	00		 jne	 $LN3@deflateIni

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002c	85 ff		 test	 edi, edi
  0002e	0f 84 e6 01 00
	00		 je	 $LN12@deflateIni

; 265  : 
; 266  :     strm->msg = Z_NULL;
; 267  :     if (strm->zalloc == (alloc_func)0) {

  00034	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  00038	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0003f	75 0e		 jne	 SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00041	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  00048	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  0004f	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00053	75 07		 jne	 SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  00055	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0005c	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00060	b9 06 00 00 00	 mov	 ecx, 6
  00065	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00068	0f 45 4d 0c	 cmovne	 ecx, DWORD PTR _level$[ebp]
  0006c	89 4d 24	 mov	 DWORD PTR tv474[ebp], ecx
  0006f	85 db		 test	 ebx, ebx
  00071	79 06		 jns	 SHORT $LN8@deflateIni

; 289  :         wrap = 0;

  00073	33 f6		 xor	 esi, esi

; 290  :         windowBits = -windowBits;

  00075	f7 db		 neg	 ebx

; 291  :     }

  00077	eb 0d		 jmp	 SHORT $LN10@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  00079	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0007c	7e 08		 jle	 SHORT $LN10@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  0007e	be 02 00 00 00	 mov	 esi, 2

; 295  :         windowBits -= 16;

  00083	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN10@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  00086	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  00089	48		 dec	 eax
  0008a	83 f8 08	 cmp	 eax, 8
  0008d	0f 87 87 01 00
	00		 ja	 $LN12@deflateIni
  00093	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  00097	0f 85 7d 01 00
	00		 jne	 $LN12@deflateIni
  0009d	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000a0	83 f8 07	 cmp	 eax, 7
  000a3	0f 87 71 01 00
	00		 ja	 $LN12@deflateIni
  000a9	83 f9 09	 cmp	 ecx, 9
  000ac	0f 87 68 01 00
	00		 ja	 $LN12@deflateIni
  000b2	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000b6	0f 87 5e 01 00
	00		 ja	 $LN12@deflateIni
  000bc	83 fb 08	 cmp	 ebx, 8
  000bf	75 0c		 jne	 SHORT $LN13@deflateIni
  000c1	83 fe 01	 cmp	 esi, 1
  000c4	0f 85 50 01 00
	00		 jne	 $LN12@deflateIni

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000ca	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000cd	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d0	68 c4 16 00 00	 push	 5828			; 000016c4H
  000d5	6a 01		 push	 1
  000d7	ff 77 28	 push	 DWORD PTR [edi+40]
  000da	ff d0		 call	 eax
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000df	85 c0		 test	 eax, eax
  000e1	0f 84 27 01 00
	00		 je	 $LN21@deflateIni

; 306  :     strm->state = (struct internal_state FAR *)s;

  000e7	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 309  : 
; 310  :     s->wrap = wrap;
; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  000ea	8b cb		 mov	 ecx, ebx
  000ec	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000ef	be 01 00 00 00	 mov	 esi, 1
  000f4	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  000f7	8b d8		 mov	 ebx, eax
  000f9	d3 e6		 shl	 esi, cl

; 314  :     s->w_mask = s->w_size - 1;
; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  000fb	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  000fe	89 38		 mov	 DWORD PTR [eax], edi
  00100	83 c1 07	 add	 ecx, 7
  00103	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  0010a	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00111	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00114	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 317  :     s->hash_size = 1 << s->hash_bits;

  00117	b8 01 00 00 00	 mov	 eax, 1
  0011c	d3 e0		 shl	 eax, cl
  0011e	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 318  :     s->hash_mask = s->hash_size - 1;

  00121	48		 dec	 eax
  00122	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  00125	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0012a	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  0012d	83 c1 02	 add	 ecx, 2
  00130	f7 e1		 mul	 ecx

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00132	6a 02		 push	 2
  00134	d1 ea		 shr	 edx, 1
  00136	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  00139	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  0013c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0013f	56		 push	 esi
  00140	ff 77 28	 push	 DWORD PTR [edi+40]
  00143	ff d0		 call	 eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  00145	6a 02		 push	 2
  00147	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0014a	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  0014d	ff 77 28	 push	 DWORD PTR [edi+40]
  00150	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00153	ff d0		 call	 eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  00155	6a 02		 push	 2
  00157	ff 73 4c	 push	 DWORD PTR [ebx+76]
  0015a	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  0015d	ff 77 28	 push	 DWORD PTR [edi+40]
  00160	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00163	ff d0		 call	 eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  00165	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00168	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  0016b	b8 01 00 00 00	 mov	 eax, 1

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00170	6a 04		 push	 4
  00172	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  0017c	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  0017f	d3 e0		 shl	 eax, cl
  00181	50		 push	 eax
  00182	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  00188	ff 77 28	 push	 DWORD PTR [edi+40]
  0018b	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0018e	ff d0		 call	 eax

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00190	8b b3 9c 16 00
	00		 mov	 esi, DWORD PTR [ebx+5788]
  00196	83 c4 30	 add	 esp, 48			; 00000030H

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  00199	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  0019d	8b d0		 mov	 edx, eax
  0019f	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  001a2	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  001a9	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001ac	74 4b		 je	 SHORT $LN16@deflateIni
  001ae	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001b2	74 45		 je	 SHORT $LN16@deflateIni
  001b4	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001b8	74 3f		 je	 SHORT $LN16@deflateIni
  001ba	85 d2		 test	 edx, edx
  001bc	74 3b		 je	 SHORT $LN16@deflateIni

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001be	8b c6		 mov	 eax, esi

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 342  : 
; 343  :     s->level = level;
; 344  :     s->strategy = strategy;
; 345  :     s->method = (Byte)method;

  001c0	c6 43 24 08	 mov	 BYTE PTR [ebx+36], 8
  001c4	d1 e8		 shr	 eax, 1

; 346  : 
; 347  :     return deflateReset(strm);

  001c6	57		 push	 edi
  001c7	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001ca	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001d0	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  001d3	03 c6		 add	 eax, esi
  001d5	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax
  001db	8b 45 24	 mov	 eax, DWORD PTR tv474[ebp]
  001de	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001e4	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001e7	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001ed	e8 00 00 00 00	 call	 _deflateReset@4
  001f2	5f		 pop	 edi
  001f3	5b		 pop	 ebx
  001f4	5e		 pop	 esi

; 348  : }

  001f5	5d		 pop	 ebp
  001f6	c2 20 00	 ret	 32			; 00000020H
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;
; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001f9	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  001fe	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 337  :         deflateEnd (strm);

  00205	57		 push	 edi
  00206	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00209	e8 00 00 00 00	 call	 _deflateEnd@4
$LN21@deflateIni:

; 338  :         return Z_MEM_ERROR;

  0020e	5f		 pop	 edi
  0020f	5b		 pop	 ebx
  00210	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00215	5e		 pop	 esi

; 348  : }

  00216	5d		 pop	 ebp
  00217	c2 20 00	 ret	 32			; 00000020H
$LN12@deflateIni:
  0021a	5f		 pop	 edi
  0021b	5b		 pop	 ebx

; 301  :         return Z_STREAM_ERROR;

  0021c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00221	5e		 pop	 esi

; 348  : }

  00222	5d		 pop	 ebp
  00223	c2 20 00	 ret	 32			; 00000020H
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  00226	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0022b	5e		 pop	 esi

; 348  : }

  0022c	5d		 pop	 ebp
  0022d	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 360  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;
; 372  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 373  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 359  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 373  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 77 01 00
	00		 jne	 $LN8@deflateSet
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _dictionary$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 6c 01 00
	00		 je	 $LN8@deflateSet

; 389  :     s = strm->state;

  00023	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 390  :     wrap = s->wrap;

  00026	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00029	89 55 fc	 mov	 DWORD PTR _wrap$1$[ebp], edx

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002c	83 fa 02	 cmp	 edx, 2
  0002f	0f 84 5a 01 00
	00		 je	 $LN8@deflateSet
  00035	83 fa 01	 cmp	 edx, 1
  00038	75 0a		 jne	 SHORT $LN11@deflateSet
  0003a	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  0003e	0f 85 4b 01 00
	00		 jne	 $LN8@deflateSet
$LN11@deflateSet:
  00044	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00048	0f 85 41 01 00
	00		 jne	 $LN8@deflateSet

; 392  :         return Z_STREAM_ERROR;
; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  0004e	57		 push	 edi
  0004f	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00052	83 fa 01	 cmp	 edx, 1
  00055	75 13		 jne	 SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00057	57		 push	 edi
  00058	53		 push	 ebx
  00059	ff 71 30	 push	 DWORD PTR [ecx+48]
  0005c	e8 00 00 00 00	 call	 _adler32@12
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	8b 55 fc	 mov	 edx, DWORD PTR _wrap$1$[ebp]
  00067	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */
; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  0006a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0006d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00074	3b f8		 cmp	 edi, eax
  00076	72 47		 jb	 SHORT $LN27@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  00078	85 d2		 test	 edx, edx
  0007a	75 3d		 jne	 SHORT $LN26@deflateSet

; 402  :             CLEAR_HASH(s);

  0007c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0007f	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00082	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00087	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008a	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00091	50		 push	 eax
  00092	52		 push	 edx
  00093	ff 76 44	 push	 DWORD PTR [esi+68]
  00096	e8 00 00 00 00	 call	 _memset

; 403  :             s->strstart = 0;
; 404  :             s->block_start = 0L;
; 405  :             s->insert = 0;

  0009b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  000a8	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  000af	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN26@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000b9	2b f8		 sub	 edi, eax
  000bb	03 df		 add	 ebx, edi

; 408  :         dictLength = s->w_size;

  000bd	8b f8		 mov	 edi, eax
$LN27@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  000bf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	89 4d f8	 mov	 DWORD PTR _avail$1$[ebp], ecx

; 413  :     next = strm->next_in;

  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	89 4d 10	 mov	 DWORD PTR _next$1$[ebp], ecx

; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;
; 416  :     fill_window(s);

  000cd	8b ce		 mov	 ecx, esi
  000cf	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000d2	89 18		 mov	 DWORD PTR [eax], ebx
  000d4	e8 00 00 00 00	 call	 _fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000d9	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000dc	83 f9 03	 cmp	 ecx, 3
  000df	72 64		 jb	 SHORT $LN3@deflateSet
$LL2@deflateSet:

; 418  :         str = s->strstart;

  000e1	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000e4	83 c1 fe	 add	 ecx, -2			; fffffffeH
  000e7	89 4d 0c	 mov	 DWORD PTR _n$1$[ebp], ecx
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 426  :             str++;

  00125	43		 inc	 ebx

; 427  :         } while (--n);

  00126	83 6d 0c 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL6@deflateSet

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00140	83 f9 03	 cmp	 ecx, 3
  00143	73 9c		 jae	 SHORT $LL2@deflateSet
$LN3@deflateSet:

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  00145	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  00148	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 433  :     s->block_start = (long)s->strstart;
; 434  :     s->insert = s->lookahead;

  0014b	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx

; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  0015a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00161	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00168	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0016f	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00176	89 01		 mov	 DWORD PTR [ecx], eax

; 439  :     strm->avail_in = avail;

  00178	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 440  :     s->wrap = wrap;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]

; 441  :     return Z_OK;

  00181	5f		 pop	 edi
  00182	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00185	33 c0		 xor	 eax, eax
  00187	5e		 pop	 esi

; 442  : }

  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflateSet:
  0018f	5e		 pop	 esi

; 388  :         return Z_STREAM_ERROR;

  00190	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 442  : }

  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 464  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflateGet:

; 455  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 456  :     len = s->strstart + s->lookahead;

  0001d	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00020	8b 79 6c	 mov	 edi, DWORD PTR [ecx+108]

; 457  :     if (len > s->w_size)

  00023	8b 71 2c	 mov	 esi, DWORD PTR [ecx+44]
  00026	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]

; 458  :         len = s->w_size;
; 459  :     if (dictionary != Z_NULL && len)

  00029	3b c6		 cmp	 eax, esi
  0002b	0f 46 f0	 cmovbe	 esi, eax
  0002e	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  00032	74 1a		 je	 SHORT $LN4@deflateGet
  00034	85 f6		 test	 esi, esi
  00036	74 16		 je	 SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00038	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  0003b	2b c6		 sub	 eax, esi
  0003d	03 c7		 add	 eax, edi
  0003f	56		 push	 esi
  00040	03 c2		 add	 eax, edx
  00042	50		 push	 eax
  00043	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  00046	e8 00 00 00 00	 call	 _memcpy
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  0004e	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  00051	85 c0		 test	 eax, eax
  00053	74 02		 je	 SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

  00055	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 463  :     return Z_OK;

  00057	5f		 pop	 edi
  00058	33 c0		 xor	 eax, eax
  0005a	5e		 pop	 esi

; 464  : }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 502  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateRes:
  0001c	56		 push	 esi

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;
; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 478  :     strm->data_type = Z_UNKNOWN;
; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  0001d	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00020	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00027	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00035	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;

  0003c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003f	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 483  : 
; 484  :     if (s->wrap < 0) {

  00042	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00045	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004c	85 c0		 test	 eax, eax
  0004e	79 05		 jns	 SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00050	f7 d8		 neg	 eax
  00052	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

  00055	83 f8 02	 cmp	 eax, 2
  00058	75 05		 jne	 SHORT $LN5@deflateRes
  0005a	8d 48 37	 lea	 ecx, DWORD PTR [eax+55]
  0005d	eb 0f		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  0005f	85 c0		 test	 eax, eax
  00061	b9 71 00 00 00	 mov	 ecx, 113		; 00000071H
  00066	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  0006b	0f 45 ca	 cmovne	 ecx, edx
$LN6@deflateRes:
  0006e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	6a 00		 push	 0
  00077	83 f8 02	 cmp	 eax, 2
  0007a	75 07		 jne	 SHORT $LN7@deflateRes
  0007c	e8 00 00 00 00	 call	 _crc32@12
  00081	eb 05		 jmp	 SHORT $LN8@deflateRes
$LN7@deflateRes:
  00083	e8 00 00 00 00	 call	 _adler32@12
$LN8@deflateRes:
  00088	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  0008b	8b ce		 mov	 ecx, esi
  0008d	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00094	e8 00 00 00 00	 call	 __tr_init

; 500  : 
; 501  :     return Z_OK;

  00099	5e		 pop	 esi
  0009a	33 c0		 xor	 eax, eax
  0009c	5f		 pop	 edi

; 502  : }

  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 511  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 513  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN2@deflateRes:

; 514  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 15		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0c		 jne	 SHORT $LN3@deflateSet

; 523  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 524  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 525  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 525  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 539  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	74 08		 je	 SHORT $LN3@deflatePen

; 535  :         *pending = strm->state->pending;

  0001f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN3@deflatePen:

; 536  :     if (bits != Z_NULL)

  00027	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  0002a	85 d2		 test	 edx, edx
  0002c	74 0b		 je	 SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00037	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 538  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 539  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN5@deflatePri
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 565  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePri:
  00018	56		 push	 esi

; 551  :     s = strm->state;

  00019	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	83 c0 02	 add	 eax, 2
  00022	39 86 a4 16 00
	00		 cmp	 DWORD PTR [esi+5796], eax
  00028	73 0a		 jae	 SHORT $LN11@deflatePri

; 553  :         return Z_BUF_ERROR;

  0002a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002f	5e		 pop	 esi

; 565  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflatePri:
  00034	53		 push	 ebx
  00035	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  00038	57		 push	 edi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00040	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	2b c2		 sub	 eax, edx

; 556  :         if (put > bits)
; 557  :             put = bits;
; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	8b fb		 mov	 edi, ebx
  0004f	3b c3		 cmp	 eax, ebx
  00051	0f 4e f8	 cmovle	 edi, eax
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	8b cf		 mov	 ecx, edi
  0005b	66 d3 e0	 shl	 ax, cl
  0005e	8b ca		 mov	 ecx, edx
  00060	66 48		 dec	 ax
  00062	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00066	66 d3 e0	 shl	 ax, cl

; 559  :         s->bi_valid += put;
; 560  :         _tr_flush_bits(s);

  00069	8b ce		 mov	 ecx, esi
  0006b	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00072	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00075	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  0007b	e8 00 00 00 00	 call	 __tr_flush_bits

; 561  :         value >>= put;

  00080	8b cf		 mov	 ecx, edi
  00082	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 562  :         bits -= put;

  00085	2b df		 sub	 ebx, edi

; 563  :     } while (bits);

  00087	75 b7		 jne	 SHORT $LL4@deflatePri

; 564  :     return Z_OK;

  00089	5f		 pop	 edi
  0008a	5b		 pop	 ebx
  0008b	33 c0		 xor	 eax, eax
  0008d	5e		 pop	 esi

; 565  : }

  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 1e 01 00
	00		 jne	 $LN5@deflatePar

; 577  :     s = strm->state;
; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00018	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  0001c	bf 06 00 00 00	 mov	 edi, 6
  00021	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00024	0f 45 7d 0c	 cmovne	 edi, DWORD PTR _level$[ebp]
  00028	83 ff 09	 cmp	 edi, 9
  0002b	0f 87 05 01 00
	00		 ja	 $LN5@deflatePar
  00031	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00034	83 f8 04	 cmp	 eax, 4
  00037	0f 87 f9 00 00
	00		 ja	 $LN5@deflatePar

; 585  :         return Z_STREAM_ERROR;
; 586  :     }
; 587  :     func = configuration_table[s->level].func;
; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0003d	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00043	75 1c		 jne	 SHORT $LN16@deflatePar
  00045	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0004b	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0004e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00051	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00058	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  0005f	74 2c		 je	 SHORT $LN9@deflatePar
$LN16@deflatePar:
  00061	83 be c0 16 00
	00 00		 cmp	 DWORD PTR [esi+5824], 0
  00068	74 23		 je	 SHORT $LN9@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  0006a	6a 05		 push	 5
  0006c	53		 push	 ebx
  0006d	e8 00 00 00 00	 call	 _deflate@8

; 593  :         if (err == Z_STREAM_ERROR)

  00072	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00075	0f 84 bb 00 00
	00		 je	 $LN5@deflatePar

; 594  :             return err;
; 595  :         if (strm->avail_out == 0)

  0007b	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  0007f	75 0c		 jne	 SHORT $LN9@deflatePar

; 614  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00088	5b		 pop	 ebx
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
$LN9@deflatePar:

; 596  :             return Z_BUF_ERROR;
; 597  :     }
; 598  :     if (s->level != level) {

  0008d	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00093	3b c7		 cmp	 eax, edi
  00095	0f 84 89 00 00
	00		 je	 $LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  0009b	85 c0		 test	 eax, eax
  0009d	75 47		 jne	 SHORT $LN11@deflatePar
  0009f	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000a5	85 c0		 test	 eax, eax
  000a7	74 3d		 je	 SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

  000a9	83 f8 01	 cmp	 eax, 1
  000ac	75 09		 jne	 SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 _slide_hash
  000b5	eb 0d		 jmp	 SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  000b7	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000ba	33 d2		 xor	 edx, edx
  000bc	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000bf	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
$LN13@deflatePar:
  000c4	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000c7	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000ce	50		 push	 eax
  000cf	6a 00		 push	 0
  000d1	ff 76 44	 push	 DWORD PTR [esi+68]
  000d4	e8 00 00 00 00	 call	 _memset
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  000dc	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;
; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000e6	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000e9	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  000ef	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  000f7	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 608  :         s->good_match       = configuration_table[level].good_length;

  000fd	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  00105	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  0010b	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  00113	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  00119	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  00121	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  00124	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00127	5f		 pop	 edi
  00128	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 613  :     return Z_OK;

  0012e	33 c0		 xor	 eax, eax

; 614  : }

  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	5d		 pop	 ebp
  00133	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePar:
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0013d	5b		 pop	 ebx
  0013e	5d		 pop	 ebp
  0013f	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00014	5d		 pop	 ebp
  00015	c2 14 00	 ret	 20			; 00000014H
$LN2@deflateTun:

; 627  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 628  :     s->good_match = (uInt)good_length;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001e	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00024	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00027	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 630  :     s->nice_match = nice_length;

  0002d	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00030	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 631  :     s->max_chain_length = (uInt)max_chain;

  00036	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00039	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 632  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 633  : }

  0003e	5d		 pop	 ebp
  0003f	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _sourceLen$[ebp]
  0000a	57		 push	 edi
  0000b	8d 7e 3f	 lea	 edi, DWORD PTR [esi+63]
  0000e	8d 46 07	 lea	 eax, DWORD PTR [esi+7]
  00011	c1 ef 06	 shr	 edi, 6
  00014	c1 e8 03	 shr	 eax, 3
  00017	03 fe		 add	 edi, esi
  00019	83 c0 05	 add	 eax, 5
  0001c	03 f8		 add	 edi, eax
  0001e	e8 00 00 00 00	 call	 _deflateStateCheck
  00023	85 c0		 test	 eax, eax
  00025	74 09		 je	 SHORT $LN10@deflateBou

; 665  :         return complen + 6;

  00027	8d 47 06	 lea	 eax, DWORD PTR [edi+6]
  0002a	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN10@deflateBou:

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00030	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00033	53		 push	 ebx

; 669  :     switch (s->wrap) {

  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	83 e8 00	 sub	 eax, 0
  0003a	74 71		 je	 SHORT $LN11@deflateBou
  0003c	83 e8 01	 sub	 eax, 1
  0003f	74 5b		 je	 SHORT $LN12@deflateBou
  00041	83 e8 01	 sub	 eax, 1
  00044	74 07		 je	 SHORT $LN13@deflateBou

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00046	bb 06 00 00 00	 mov	 ebx, 6
  0004b	eb 62		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0004d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00050	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H
  00055	85 c0		 test	 eax, eax
  00057	74 56		 je	 SHORT $LN2@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  00059	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0005d	74 06		 je	 SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  0005f	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
  00062	83 c3 14	 add	 ebx, 20			; 00000014H
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

  00065	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]

; 684  :             if (str != Z_NULL)

  00068	85 c9		 test	 ecx, ecx
  0006a	74 11		 je	 SHORT $LN5@deflateBou
  0006c	0f 1f 40 00	 npad	 4
$LL6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00075	43		 inc	 ebx
  00076	84 c0		 test	 al, al
  00078	75 f6		 jne	 SHORT $LL6@deflateBou
  0007a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
$LN5@deflateBou:

; 688  :             str = s->gzhead->comment;

  0007d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]

; 689  :             if (str != Z_NULL)

  00080	85 c9		 test	 ecx, ecx
  00082	74 0d		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00084	8a 01		 mov	 al, BYTE PTR [ecx]
  00086	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00089	43		 inc	 ebx
  0008a	84 c0		 test	 al, al
  0008c	75 f6		 jne	 SHORT $LL9@deflateBou
  0008e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
$LN8@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  00091	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00095	74 18		 je	 SHORT $LN2@deflateBou

; 694  :                 wraplen += 2;

  00097	83 c3 02	 add	 ebx, 2

; 695  :         }
; 696  :         break;

  0009a	eb 13		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  0009c	33 db		 xor	 ebx, ebx
  0009e	39 5a 6c	 cmp	 DWORD PTR [edx+108], ebx
  000a1	0f 95 c3	 setne	 bl
  000a4	8d 1c 9d 06 00
	00 00		 lea	 ebx, DWORD PTR [ebx*4+6]

; 675  :         break;

  000ab	eb 02		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000ad	33 db		 xor	 ebx, ebx
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000af	83 7a 30 0f	 cmp	 DWORD PTR [edx+48], 15	; 0000000fH
  000b3	75 27		 jne	 SHORT $LN21@deflateBou
  000b5	83 7a 50 0f	 cmp	 DWORD PTR [edx+80], 15	; 0000000fH
  000b9	75 21		 jne	 SHORT $LN21@deflateBou

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000bb	8b ce		 mov	 ecx, esi
  000bd	8b d6		 mov	 edx, esi
  000bf	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000c2	8b c6		 mov	 eax, esi
  000c4	03 cb		 add	 ecx, ebx
  000c6	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000c9	c1 ea 19	 shr	 edx, 25			; 00000019H
  000cc	83 c0 07	 add	 eax, 7
  000cf	03 ca		 add	 ecx, edx
  000d1	5b		 pop	 ebx
  000d2	03 c1		 add	 eax, ecx
  000d4	5f		 pop	 edi
  000d5	03 c6		 add	 eax, esi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000d7	5e		 pop	 esi
  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
$LN21@deflateBou:

; 704  :         return complen + wraplen;

  000dc	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  000df	5b		 pop	 ebx
  000e0	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000e1	5e		 pop	 esi
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 719  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 720  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 722  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 732  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 735  : 
; 736  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 737  :     len = s->pending;
; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]

; 739  :     if (len == 0) return;

  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	0f 46 7e 14	 cmovbe	 edi, DWORD PTR [esi+20]
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 742  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 744  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 745  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 746  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 747  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 749  :     }
; 750  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_overlay$1$ = 12					; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	85 c0		 test	 eax, eax
  0000e	0f 85 7d 01 00
	00		 jne	 $LN3@deflateCop
  00014	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00017	85 f6		 test	 esi, esi
  00019	0f 84 72 01 00
	00		 je	 $LN3@deflateCop

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;
; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	53		 push	 ebx
  00023	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00026	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00029	57		 push	 edi
  0002a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	68 c4 16 00 00	 push	 5828			; 000016c4H
  00033	6a 01		 push	 1
  00035	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00039	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003d	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00041	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00046	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0004b	ff 76 28	 push	 DWORD PTR [esi+40]
  0004e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00051	ff d0		 call	 eax
  00053	8b f8		 mov	 edi, eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00058	85 ff		 test	 edi, edi
  0005a	0f 84 25 01 00
	00		 je	 $LN10@deflateCop

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00060	68 c4 16 00 00	 push	 5828			; 000016c4H
  00065	53		 push	 ebx
  00066	57		 push	 edi
  00067	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0006a	e8 00 00 00 00	 call	 _memcpy

; 1126 :     ds->strm = dest;
; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0006f	6a 02		 push	 2
  00071	ff 77 2c	 push	 DWORD PTR [edi+44]
  00074	89 37		 mov	 DWORD PTR [edi], esi
  00076	ff 76 28	 push	 DWORD PTR [esi+40]
  00079	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007c	ff d0		 call	 eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007e	6a 02		 push	 2
  00080	ff 77 2c	 push	 DWORD PTR [edi+44]
  00083	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00086	ff 76 28	 push	 DWORD PTR [esi+40]
  00089	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008c	ff d0		 call	 eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008e	6a 02		 push	 2
  00090	ff 77 4c	 push	 DWORD PTR [edi+76]
  00093	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00096	ff 76 28	 push	 DWORD PTR [esi+40]
  00099	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0009c	ff d0		 call	 eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0009e	6a 04		 push	 4
  000a0	ff b7 9c 16 00
	00		 push	 DWORD PTR [edi+5788]
  000a6	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000a9	ff 76 28	 push	 DWORD PTR [esi+40]
  000ac	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000af	ff d0		 call	 eax

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b1	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000b4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b7	89 45 0c	 mov	 DWORD PTR _overlay$1$[ebp], eax
  000ba	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000bd	85 c9		 test	 ecx, ecx
  000bf	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  000c5	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  000c9	0f 84 b0 00 00
	00		 je	 $LN6@deflateCop
  000cf	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  000d3	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 9e 00 00
	00		 je	 $LN6@deflateCop

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000e1	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000e4	03 c0		 add	 eax, eax
  000e6	50		 push	 eax
  000e7	ff 73 38	 push	 DWORD PTR [ebx+56]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000f0	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000f3	03 c0		 add	 eax, eax
  000f5	50		 push	 eax
  000f6	ff 73 40	 push	 DWORD PTR [ebx+64]
  000f9	ff 77 40	 push	 DWORD PTR [edi+64]
  000fc	e8 00 00 00 00	 call	 _memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00101	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00104	03 c0		 add	 eax, eax
  00106	50		 push	 eax
  00107	ff 73 44	 push	 DWORD PTR [ebx+68]
  0010a	ff 77 44	 push	 DWORD PTR [edi+68]
  0010d	e8 00 00 00 00	 call	 _memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00112	ff 77 0c	 push	 DWORD PTR [edi+12]
  00115	ff 73 08	 push	 DWORD PTR [ebx+8]
  00118	ff 77 08	 push	 DWORD PTR [edi+8]
  0011b	e8 00 00 00 00	 call	 _memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00120	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00123	83 c4 30	 add	 esp, 48			; 00000030H
  00126	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  00129	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0012c	03 c2		 add	 eax, edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0012e	8b 8f 9c 16 00
	00		 mov	 ecx, DWORD PTR [edi+5788]
  00134	8b 75 0c	 mov	 esi, DWORD PTR _overlay$1$[ebp]
  00137	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0013a	8b c1		 mov	 eax, ecx
  0013c	d1 e8		 shr	 eax, 1
  0013e	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00141	89 87 a4 16 00
	00		 mov	 DWORD PTR [edi+5796], eax

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00147	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0014a	03 c1		 add	 eax, ecx
  0014c	89 87 98 16 00
	00		 mov	 DWORD PTR [edi+5784], eax

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00152	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
  00158	89 87 18 0b 00
	00		 mov	 DWORD PTR [edi+2840], eax

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0015e	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  00164	89 87 24 0b 00
	00		 mov	 DWORD PTR [edi+2852], eax

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0016a	8d 87 7c 0a 00
	00		 lea	 eax, DWORD PTR [edi+2684]
  00170	89 87 30 0b 00
	00		 mov	 DWORD PTR [edi+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  00176	33 c0		 xor	 eax, eax
  00178	5f		 pop	 edi
  00179	5b		 pop	 ebx
  0017a	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  0017f	56		 push	 esi
  00180	e8 00 00 00 00	 call	 _deflateEnd@4
$LN10@deflateCop:

; 1137 :         return Z_MEM_ERROR;

  00185	5f		 pop	 edi
  00186	5b		 pop	 ebx
  00187	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0018c	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  00191	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00196	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00197	5d		 pop	 ebp
  00198	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 1169 :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1170 : 
; 1171 :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 1172 :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf

; 1189 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;
; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 1177 :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 1186 :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1187 : 
; 1188 :     return len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi

; 1189 : }

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN4@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN6@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN6@read_buf:
  00068	01 3e		 add	 DWORD PTR [esi], edi

; 1187 : 
; 1188 :     return len;

  0006a	8b c7		 mov	 eax, edi
  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	5f		 pop	 edi

; 1189 : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 1196 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1197 :     s->window_size = (ulg)2L*s->w_size;
; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1207 : 
; 1208 :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1209 :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1210 :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1211 :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1213 :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1214 :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */

  000a8	5e		 pop	 esi
  000a9	e9 00 00 00 00	 jmp	 _match_init
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  0000f	89 45 fc	 mov	 DWORD PTR _wsize$1$[ebp], eax
$LL4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00012	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00015	2b 5e 6c	 sub	 ebx, DWORD PTR [esi+108]

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00018	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001b	2b df		 sub	 ebx, edi
  0001d	8b 7d fc	 mov	 edi, DWORD PTR _wsize$1$[ebp]
  00020	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  00025	03 c7		 add	 eax, edi
  00027	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  0002a	72 27		 jb	 SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  0002c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002f	8b c7		 mov	 eax, edi
  00031	2b c3		 sub	 eax, ebx
  00033	50		 push	 eax
  00034	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00037	50		 push	 eax
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _memcpy

; 1513 :             s->match_start -= wsize;

  0003e	29 7e 70	 sub	 DWORD PTR [esi+112], edi
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00044	29 7e 6c	 sub	 DWORD PTR [esi+108], edi

; 1515 :             s->block_start -= (long) wsize;
; 1516 :             slide_hash(s);

  00047	8b ce		 mov	 ecx, esi
  00049	29 7e 5c	 sub	 DWORD PTR [esi+92], edi
  0004c	e8 00 00 00 00	 call	 _slide_hash

; 1517 :             more += wsize;

  00051	03 df		 add	 ebx, edi
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  00053	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00055	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00059	0f 84 b7 00 00
	00		 je	 $LN3@fill_windo

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0005f	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00062	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00065	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00068	53		 push	 ebx
  00069	e8 00 00 00 00	 call	 _read_buf

; 1535 :         s->lookahead += n;

  0006e	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00071	83 c4 04	 add	 esp, 4

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00074	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  0007a	03 f8		 add	 edi, eax
  0007c	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  0007f	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00082	83 f8 03	 cmp	 eax, 3
  00085	72 7b		 jb	 SHORT $LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00087	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 1540 :             s->ins_h = s->window[str];

  0008a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0008d	2b d9		 sub	 ebx, ecx

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  0008f	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00092	0f b6 14 03	 movzx	 edx, BYTE PTR [ebx+eax]
  00096	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00099	0f b6 44 03 01	 movzx	 eax, BYTE PTR [ebx+eax+1]
  0009e	d3 e2		 shl	 edx, cl
  000a0	33 d0		 xor	 edx, eax
  000a2	23 56 54	 and	 edx, DWORD PTR [esi+84]

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000a5	83 be b4 16 00
	00 00		 cmp	 DWORD PTR [esi+5812], 0
  000ac	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000af	74 51		 je	 SHORT $LN2@fill_windo
$LL5@fill_windo:

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000b1	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000b4	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000b7	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000ba	23 d3		 and	 edx, ebx
  000bc	0f b6 7c 03 02	 movzx	 edi, BYTE PTR [ebx+eax+2]
  000c1	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000c4	d3 e0		 shl	 eax, cl
  000c6	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000c9	33 f8		 xor	 edi, eax
  000cb	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000ce	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000d1	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000d4	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000d8	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  000dc	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000df	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000e2	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 1551 :                 str++;

  000e6	43		 inc	 ebx

; 1552 :                 s->insert--;

  000e7	ff 8e b4 16 00
	00		 dec	 DWORD PTR [esi+5812]
  000ed	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  000f3	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  000f6	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000f9	83 f8 03	 cmp	 eax, 3
  000fc	72 04		 jb	 SHORT $LN2@fill_windo

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000fe	85 c9		 test	 ecx, ecx
  00100	75 af		 jne	 SHORT $LL5@fill_windo
$LN2@fill_windo:

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00102	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  00108	73 0c		 jae	 SHORT $LN3@fill_windo
  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00110	0f 85 fc fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  00116	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  0011c	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0011f	3b cf		 cmp	 ecx, edi
  00121	73 67		 jae	 SHORT $LN20@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  00123	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  00126	03 5e 6c	 add	 ebx, DWORD PTR [esi+108]

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00129	3b cb		 cmp	 ecx, ebx
  0012b	73 2d		 jae	 SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;
; 1579 :             if (init > WIN_INIT)

  0012d	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00132	2b fb		 sub	 edi, ebx
  00134	3b f8		 cmp	 edi, eax
  00136	0f 47 f8	 cmova	 edi, eax

; 1580 :                 init = WIN_INIT;
; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  00139	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0013c	57		 push	 edi
  0013d	03 c3		 add	 eax, ebx
  0013f	6a 00		 push	 0
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _memset
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  0014a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0014d	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  00153	5f		 pop	 edi

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
$LN17@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  0015a	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00160	3b c8		 cmp	 ecx, eax
  00162	73 26		 jae	 SHORT $LN20@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  00164	2b d9		 sub	 ebx, ecx

; 1590 :             if (init > s->window_size - s->high_water)

  00166	2b f9		 sub	 edi, ecx
  00168	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]

; 1591 :                 init = s->window_size - s->high_water;
; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  0016e	3b c7		 cmp	 eax, edi
  00170	0f 46 f8	 cmovbe	 edi, eax
  00173	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00176	57		 push	 edi
  00177	03 c1		 add	 eax, ecx
  00179	6a 00		 push	 0
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 _memset
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  00184	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN20@fill_windo:

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv1556 = -16						; size = 4
tv1552 = -16						; size = 4
_have$2$ = -16						; size = 4
tv1473 = -12						; size = 4
_last$1$ = -12						; size = 4
_left$1$ = -8						; size = 4
$T1 = -4						; size = 4
_used$2$ = -4						; size = 4
$T2 = 8							; size = 4
_len$4$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  0000c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00012	83 c0 fb	 add	 eax, -5			; fffffffbH

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;

  00015	3b c1		 cmp	 eax, ecx
  00017	0f 46 c8	 cmovbe	 ecx, eax

; 1658 :     unsigned used = s->strm->avail_in;

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	89 4d f0	 mov	 DWORD PTR tv1556[ebp], ecx
  0001f	33 ff		 xor	 edi, edi
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	89 45 fc	 mov	 DWORD PTR _used$2$[ebp], eax
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00036	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  0003b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0003d	83 c0 2a	 add	 eax, 42			; 0000002aH
  00040	c1 f8 03	 sar	 eax, 3
  00043	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]
  00046	3b d8		 cmp	 ebx, eax
  00048	0f 82 09 01 00
	00		 jb	 $LN3@deflate_st

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;

  0004e	2b d8		 sub	 ebx, eax

; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00050	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00053	2b 46 5c	 sub	 eax, DWORD PTR [esi+92]
  00056	89 45 f8	 mov	 DWORD PTR _left$1$[ebp], eax

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  00059	8b 06		 mov	 eax, DWORD PTR [esi]

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1673 :         if (len > have)
; 1674 :             len = have;                         /* limit len to the output */
; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  0005b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0005e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00061	03 45 f8	 add	 eax, DWORD PTR _left$1$[ebp]
  00064	3b c2		 cmp	 eax, edx
  00066	0f 42 d0	 cmovb	 edx, eax
  00069	3b d3		 cmp	 edx, ebx
  0006b	0f 46 da	 cmovbe	 ebx, edx
  0006e	3b 5d f0	 cmp	 ebx, DWORD PTR tv1556[ebp]
  00071	73 1d		 jae	 SHORT $LN47@deflate_st
  00073	85 db		 test	 ebx, ebx
  00075	75 09		 jne	 SHORT $LN10@deflate_st
  00077	83 f9 04	 cmp	 ecx, 4
  0007a	0f 85 d7 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  00080	85 c9		 test	 ecx, ecx
  00082	0f 84 cf 00 00
	00		 je	 $LN3@deflate_st
  00088	3b d8		 cmp	 ebx, eax
  0008a	0f 85 c7 00 00
	00		 jne	 $LN3@deflate_st
$LN47@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00090	83 f9 04	 cmp	 ecx, 4
  00093	75 09		 jne	 SHORT $LN52@deflate_st
  00095	3b d8		 cmp	 ebx, eax
  00097	75 05		 jne	 SHORT $LN52@deflate_st
  00099	8d 79 fd	 lea	 edi, DWORD PTR [ecx-3]
  0009c	eb 02		 jmp	 SHORT $LN56@deflate_st
$LN52@deflate_st:
  0009e	33 ff		 xor	 edi, edi
$LN56@deflate_st:

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  000a0	57		 push	 edi
  000a1	6a 00		 push	 0
  000a3	33 d2		 xor	 edx, edx
  000a5	89 7d f4	 mov	 DWORD PTR _last$1$[ebp], edi
  000a8	8b ce		 mov	 ecx, esi
  000aa	e8 00 00 00 00	 call	 __tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000af	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000b2	8b d3		 mov	 edx, ebx
  000b4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b7	83 c4 08	 add	 esp, 8
  000ba	c1 ea 08	 shr	 edx, 8
  000bd	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  000c1	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c7	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000cb	8a d3		 mov	 dl, bl
  000cd	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000d0	f6 d2		 not	 dl
  000d2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d5	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000d9	8b d3		 mov	 edx, ebx
  000db	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000de	f7 d2		 not	 edx
  000e0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e3	c1 ea 08	 shr	 edx, 8
  000e6	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  000ea	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ec	e8 00 00 00 00	 call	 _flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _left$1$[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	74 33		 je	 SHORT $LN46@deflate_st

; 1709 :             if (left > len)
; 1710 :                 left = len;
; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  000f8	3b c3		 cmp	 eax, ebx
  000fa	8b fb		 mov	 edi, ebx
  000fc	0f 46 f8	 cmovbe	 edi, eax
  000ff	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00102	03 46 5c	 add	 eax, DWORD PTR [esi+92]
  00105	57		 push	 edi
  00106	50		 push	 eax
  00107	8b 06		 mov	 eax, DWORD PTR [esi]
  00109	ff 70 0c	 push	 DWORD PTR [eax+12]
  0010c	e8 00 00 00 00	 call	 _memcpy

; 1712 :             s->strm->next_out += left;

  00111	8b 06		 mov	 eax, DWORD PTR [esi]
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
  00116	01 78 0c	 add	 DWORD PTR [eax+12], edi

; 1713 :             s->strm->avail_out -= left;

  00119	8b 06		 mov	 eax, DWORD PTR [esi]
  0011b	29 78 10	 sub	 DWORD PTR [eax+16], edi

; 1714 :             s->strm->total_out += left;

  0011e	8b 06		 mov	 eax, DWORD PTR [esi]
  00120	01 78 14	 add	 DWORD PTR [eax+20], edi

; 1715 :             s->block_start += left;

  00123	01 7e 5c	 add	 DWORD PTR [esi+92], edi

; 1716 :             len -= left;

  00126	2b df		 sub	 ebx, edi
  00128	8b 7d f4	 mov	 edi, DWORD PTR _last$1$[ebp]
$LN46@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  0012b	85 db		 test	 ebx, ebx
  0012d	74 1d		 je	 SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  0012f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00131	53		 push	 ebx
  00132	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00135	e8 00 00 00 00	 call	 _read_buf

; 1724 :             s->strm->next_out += len;

  0013a	8b 06		 mov	 eax, DWORD PTR [esi]
  0013c	83 c4 04	 add	 esp, 4
  0013f	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1725 :             s->strm->avail_out -= len;

  00142	8b 06		 mov	 eax, DWORD PTR [esi]
  00144	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1726 :             s->strm->total_out += len;

  00147	8b 06		 mov	 eax, DWORD PTR [esi]
  00149	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  0014c	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  0014f	85 ff		 test	 edi, edi
  00151	0f 84 d9 fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00157	8b 06		 mov	 eax, DWORD PTR [esi]
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _used$2$[ebp]
  0015c	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0015f	89 4d fc	 mov	 DWORD PTR _used$2$[ebp], ecx

; 1737 :     if (used) {

  00162	0f 84 a2 00 00
	00		 je	 $LN49@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  00168	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0016b	3b cb		 cmp	 ecx, ebx
  0016d	72 25		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  0016f	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  00179	8b 00		 mov	 eax, DWORD PTR [eax]
  0017b	53		 push	 ebx
  0017c	2b c3		 sub	 eax, ebx
  0017e	50		 push	 eax
  0017f	ff 76 38	 push	 DWORD PTR [esi+56]
  00182	e8 00 00 00 00	 call	 _memcpy

; 1744 :             s->strstart = s->w_size;

  00187	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0018a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018d	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00190	8b da		 mov	 ebx, edx

; 1745 :         }

  00192	eb 5a		 jmp	 SHORT $LN57@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  00194	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00197	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0019a	2b c2		 sub	 eax, edx
  0019c	3b c1		 cmp	 eax, ecx
  0019e	77 2b		 ja	 SHORT $LN18@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;
; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001a0	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a3	2b d3		 sub	 edx, ebx
  001a5	52		 push	 edx
  001a6	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  001a9	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001ac	50		 push	 eax
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _memcpy

; 1751 :                 if (s->matches < 2)

  001b3	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _used$2$[ebp]
  001bf	83 f8 02	 cmp	 eax, 2
  001c2	73 07		 jae	 SHORT $LN18@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  001c4	40		 inc	 eax
  001c5	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001cb	8b 06		 mov	 eax, DWORD PTR [esi]
  001cd	51		 push	 ecx
  001ce	8b 00		 mov	 eax, DWORD PTR [eax]
  001d0	2b c1		 sub	 eax, ecx
  001d2	50		 push	 eax
  001d3	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001d6	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _memcpy

; 1755 :             s->strstart += used;

  001df	8b 45 fc	 mov	 eax, DWORD PTR _used$2$[ebp]
  001e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e5	01 46 6c	 add	 DWORD PTR [esi+108], eax
  001e8	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001eb	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
$LN57@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;
; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  001ee	8b 86 b4 16 00
	00		 mov	 eax, DWORD PTR [esi+5812]
  001f4	2b d8		 sub	 ebx, eax
  001f6	39 5d fc	 cmp	 DWORD PTR _used$2$[ebp], ebx
  001f9	89 56 5c	 mov	 DWORD PTR [esi+92], edx
  001fc	0f 46 5d fc	 cmovbe	 ebx, DWORD PTR _used$2$[ebp]
  00200	03 d8		 add	 ebx, eax
  00202	89 9e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ebx
  00208	eb 03		 jmp	 SHORT $LN58@deflate_st
$LN49@deflate_st:
  0020a	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
$LN58@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  0020d	8b ca		 mov	 ecx, edx
  0020f	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  00215	73 06		 jae	 SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

  00217	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  0021d	85 ff		 test	 edi, edi
  0021f	74 0c		 je	 SHORT $LN20@deflate_st

; 1815 : }

  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	b8 03 00 00 00	 mov	 eax, 3
  00228	5b		 pop	 ebx
  00229	8b e5		 mov	 esp, ebp
  0022b	5d		 pop	 ebp
  0022c	c3		 ret	 0
$LN20@deflate_st:

; 1765 :         return finish_done;
; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  0022d	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00230	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00233	85 db		 test	 ebx, ebx
  00235	74 27		 je	 SHORT $LN21@deflate_st
  00237	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  0023a	83 fb 04	 cmp	 ebx, 4
  0023d	74 1f		 je	 SHORT $LN21@deflate_st
  0023f	8b 06		 mov	 eax, DWORD PTR [esi]
  00241	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00244	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00248	75 14		 jne	 SHORT $LN21@deflate_st
  0024a	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  0024d	3b 56 5c	 cmp	 edx, DWORD PTR [esi+92]
  00250	75 0c		 jne	 SHORT $LN21@deflate_st

; 1815 : }

  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	b8 01 00 00 00	 mov	 eax, 1
  00259	5b		 pop	 ebx
  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c3		 ret	 0
$LN21@deflate_st:

; 1770 :         return block_done;
; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  0025e	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00261	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00263	2b c2		 sub	 eax, edx
  00265	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00267	48		 dec	 eax
  00268	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0026b	8b ca		 mov	 ecx, edx
  0026d	89 45 f0	 mov	 DWORD PTR _have$2$[ebp], eax
  00270	39 43 04	 cmp	 DWORD PTR [ebx+4], eax
  00273	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00276	76 56		 jbe	 SHORT $LN22@deflate_st
  00278	8b 5d 08	 mov	 ebx, DWORD PTR $T2[ebp]
  0027b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027d	89 5d 08	 mov	 DWORD PTR $T2[ebp], ebx
  00280	8b 5e 5c	 mov	 ebx, DWORD PTR [esi+92]
  00283	3b 5e 2c	 cmp	 ebx, DWORD PTR [esi+44]
  00286	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00289	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0028c	8b ca		 mov	 ecx, edx
  0028e	7c 3e		 jl	 SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;

  00290	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 1777 :         s->strstart -= s->w_size;

  00293	2b d0		 sub	 edx, eax

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00295	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00298	29 46 5c	 sub	 DWORD PTR [esi+92], eax
  0029b	03 c1		 add	 eax, ecx
  0029d	52		 push	 edx
  0029e	50		 push	 eax
  0029f	51		 push	 ecx
  002a0	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  002a3	e8 00 00 00 00	 call	 _memcpy

; 1779 :         if (s->matches < 2)

  002a8	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  002ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b1	83 f8 02	 cmp	 eax, 2
  002b4	73 07		 jae	 SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  002b6	40		 inc	 eax
  002b7	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  002bd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002bf	8b 45 f0	 mov	 eax, DWORD PTR _have$2$[ebp]
  002c2	03 46 2c	 add	 eax, DWORD PTR [esi+44]
  002c5	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  002c8	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  002cb	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  002ce	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  002d1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]

; 1784 :         have = s->strm->avail_in;
; 1785 :     if (have) {

  002d4	3b c2		 cmp	 eax, edx
  002d6	0f 46 d0	 cmovbe	 edx, eax
  002d9	89 55 f0	 mov	 DWORD PTR tv1552[ebp], edx
  002dc	85 d2		 test	 edx, edx
  002de	74 1b		 je	 SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  002e0	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  002e3	52		 push	 edx
  002e4	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002e7	03 55 08	 add	 edx, DWORD PTR $T2[ebp]
  002ea	e8 00 00 00 00	 call	 _read_buf

; 1787 :         s->strstart += have;

  002ef	8b 45 f0	 mov	 eax, DWORD PTR tv1552[ebp]
  002f2	83 c4 04	 add	 esp, 4
  002f5	01 46 6c	 add	 DWORD PTR [esi+108], eax
  002f8	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  002fb	39 8e c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], ecx
  00301	73 06		 jae	 SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

  00303	89 8e c0 16 00
	00		 mov	 DWORD PTR [esi+5824], ecx
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00309	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  0030f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00312	83 c0 2a	 add	 eax, 42			; 0000002aH
  00315	c1 f8 03	 sar	 eax, 3
  00318	2b d0		 sub	 edx, eax
  0031a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0031f	3b d0		 cmp	 edx, eax
  00321	0f 47 d0	 cmova	 edx, eax

; 1800 :     min_block = MIN(have, s->w_size);

  00324	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 1801 :     left = s->strstart - s->block_start;

  00327	2b 4e 5c	 sub	 ecx, DWORD PTR [esi+92]
  0032a	3b d0		 cmp	 edx, eax
  0032c	0f 46 c2	 cmovbe	 eax, edx

; 1802 :     if (left >= min_block ||

  0032f	3b c8		 cmp	 ecx, eax
  00331	73 19		 jae	 SHORT $LN53@deflate_st
  00333	85 c9		 test	 ecx, ecx
  00335	75 05		 jne	 SHORT $LN29@deflate_st
  00337	83 fb 04	 cmp	 ebx, 4
  0033a	75 54		 jne	 SHORT $LN27@deflate_st
$LN29@deflate_st:
  0033c	85 db		 test	 ebx, ebx
  0033e	74 50		 je	 SHORT $LN27@deflate_st
  00340	8b 06		 mov	 eax, DWORD PTR [esi]
  00342	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00346	75 48		 jne	 SHORT $LN27@deflate_st
  00348	3b ca		 cmp	 ecx, edx
  0034a	77 44		 ja	 SHORT $LN27@deflate_st
$LN53@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  0034c	3b ca		 cmp	 ecx, edx
  0034e	8b c1		 mov	 eax, ecx
  00350	0f 47 c2	 cmova	 eax, edx
  00353	89 45 08	 mov	 DWORD PTR _len$4$[ebp], eax

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00356	83 fb 04	 cmp	 ebx, 4
  00359	75 14		 jne	 SHORT $LN41@deflate_st
  0035b	8b 06		 mov	 eax, DWORD PTR [esi]
  0035d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00361	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00364	75 09		 jne	 SHORT $LN41@deflate_st
  00366	3b c1		 cmp	 eax, ecx
  00368	75 05		 jne	 SHORT $LN41@deflate_st
  0036a	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  0036d	eb 02		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  0036f	33 ff		 xor	 edi, edi
$LN42@deflate_st:

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00371	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00374	8b ce		 mov	 ecx, esi
  00376	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  00379	57		 push	 edi
  0037a	50		 push	 eax
  0037b	e8 00 00 00 00	 call	 __tr_stored_block

; 1809 :         s->block_start += len;

  00380	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00383	83 c4 08	 add	 esp, 8

; 1810 :         flush_pending(s->strm);

  00386	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00388	01 46 5c	 add	 DWORD PTR [esi+92], eax
  0038b	e8 00 00 00 00	 call	 _flush_pending
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  00390	f7 df		 neg	 edi
  00392	1b ff		 sbb	 edi, edi
  00394	83 e7 02	 and	 edi, 2
  00397	8b c7		 mov	 eax, edi
  00399	5f		 pop	 edi

; 1815 : }

  0039a	5e		 pop	 esi
  0039b	5b		 pop	 ebx
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_fa

; 1838 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 32 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 31 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 67		 jb	 SHORT $LN12@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00046	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	d3 e2		 shl	 edx, cl
  0004e	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00053	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00056	33 d0		 xor	 edx, eax
  00058	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0005b	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0005e	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00061	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00064	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  00068	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006c	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0006f	8b ca		 mov	 ecx, edx
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00081	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00085	85 ff		 test	 edi, edi
  00087	74 1e		 je	 SHORT $LN12@deflate_fa
  00089	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0008c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0008f	2b cf		 sub	 ecx, edi
  00091	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  00096	3b c8		 cmp	 ecx, eax
  00098	77 0d		 ja	 SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  0009a	57		 push	 edi
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _longest_match
  000a1	83 c4 08	 add	 esp, 8
  000a4	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000a7	8b 5e 60	 mov	 ebx, DWORD PTR [esi+96]
  000aa	83 fb 03	 cmp	 ebx, 3
  000ad	0f 82 19 01 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000b3	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000b7	80 eb 03	 sub	 bl, 3
  000ba	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000be	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000c4	0f b7 d0	 movzx	 edx, ax
  000c7	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000cd	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  000d1	81 c2 ff ff 00
	00		 add	 edx, 65535		; 0000ffffH
  000d7	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000dd	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000e3	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000e6	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  000eb	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000f1	0f b6 c3	 movzx	 eax, bl
  000f4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  000fb	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00103	0f b7 c2	 movzx	 eax, dx
  00106	66 3b d1	 cmp	 dx, cx
  00109	73 08		 jae	 SHORT $LN24@deflate_fa
  0010b	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00111	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00113	c1 e8 07	 shr	 eax, 7
  00116	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  0011c	0f b6 c0	 movzx	 eax, al
  0011f	33 db		 xor	 ebx, ebx
  00121	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  00129	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  0012f	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00132	48		 dec	 eax
  00133	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  00139	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0013c	0f 94 c3	 sete	 bl
  0013f	2b c1		 sub	 eax, ecx
  00141	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  00144	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  0014a	77 53		 ja	 SHORT $LN45@deflate_fa
  0014c	83 f8 03	 cmp	 eax, 3
  0014f	72 4e		 jb	 SHORT $LN45@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  00151	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00154	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LL7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  00157	ff 46 6c	 inc	 DWORD PTR [esi+108]
  0015a	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  0015d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00160	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00163	0f b6 54 07 02	 movzx	 edx, BYTE PTR [edi+eax+2]
  00168	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0016b	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0016e	d3 e0		 shl	 eax, cl
  00170	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00173	33 d0		 xor	 edx, eax
  00175	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00178	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0017b	89 56 48	 mov	 DWORD PTR [esi+72], edx
  0017e	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  00182	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00186	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00189	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0018c	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00190	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  00194	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  00198	75 bd		 jne	 SHORT $LL7@deflate_fa

; 1886 :                 s->strstart++;
; 1887 :             } else

  0019a	e9 7d 00 00 00	 jmp	 $LN46@deflate_fa
$LN45@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  0019f	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1891 :                 s->match_length = 0;
; 1892 :                 s->ins_h = s->window[s->strstart];

  001a2	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001a5	03 f9		 add	 edi, ecx

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001a7	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001aa	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
  001ad	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001b4	0f b6 14 38	 movzx	 edx, BYTE PTR [eax+edi]
  001b8	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001bb	0f b6 44 38 01	 movzx	 eax, BYTE PTR [eax+edi+1]
  001c0	d3 e2		 shl	 edx, cl
  001c2	33 d0		 xor	 edx, eax
  001c4	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001c7	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  001ca	eb 56		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001cc	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001cf	33 ff		 xor	 edi, edi
  001d1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001d4	33 db		 xor	 ebx, ebx
  001d6	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001d9	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001df	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001e5	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  001e9	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001ef	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  001f5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001f8	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  001fe	0f b6 c2	 movzx	 eax, dl
  00201	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00209	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  0020f	48		 dec	 eax
  00210	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  00216	0f 94 c3	 sete	 bl

; 1905 :             s->lookahead--;

  00219	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN46@deflate_fa:

; 1906 :             s->strstart++;
; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  0021c	ff 46 6c	 inc	 DWORD PTR [esi+108]
  0021f	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
$LN14@deflate_fa:
  00222	85 db		 test	 ebx, ebx
  00224	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00227	0f 84 e3 fd ff
	ff		 je	 $LL2@deflate_fa
  0022d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00230	85 c0		 test	 eax, eax
  00232	78 07		 js	 SHORT $LN26@deflate_fa
  00234	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00237	03 d0		 add	 edx, eax
  00239	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  0023b	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  0023d	2b f8		 sub	 edi, eax
  0023f	8b ce		 mov	 ecx, esi
  00241	6a 00		 push	 0
  00243	57		 push	 edi
  00244	e8 00 00 00 00	 call	 __tr_flush_block
  00249	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0024c	83 c4 08	 add	 esp, 8
  0024f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00251	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00254	e8 00 00 00 00	 call	 _flush_pending
  00259	8b 06		 mov	 eax, DWORD PTR [esi]
  0025b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0025f	0f 85 ab fd ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  00265	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  00266	5e		 pop	 esi
  00267	33 c0		 xor	 eax, eax
  00269	5b		 pop	 ebx
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
$LN38@deflate_fa:

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  0026c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0026f	b8 02 00 00 00	 mov	 eax, 2
  00274	3b c8		 cmp	 ecx, eax
  00276	0f 42 c1	 cmovb	 eax, ecx
  00279	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  0027f	83 fb 04	 cmp	 ebx, 4
  00282	75 3e		 jne	 SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  00284	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00287	85 c0		 test	 eax, eax
  00289	78 07		 js	 SHORT $LN30@deflate_fa
  0028b	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0028e	03 d0		 add	 edx, eax
  00290	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  00292	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  00294	2b c8		 sub	 ecx, eax
  00296	6a 01		 push	 1
  00298	51		 push	 ecx
  00299	8b ce		 mov	 ecx, esi
  0029b	e8 00 00 00 00	 call	 __tr_flush_block
  002a0	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002a3	83 c4 08	 add	 esp, 8
  002a6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a8	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002ab	e8 00 00 00 00	 call	 _flush_pending
  002b0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b2	33 c0		 xor	 eax, eax
  002b4	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  002b5	5e		 pop	 esi
  002b6	5b		 pop	 ebx
  002b7	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002ba	0f 95 c0	 setne	 al
  002bd	83 c0 02	 add	 eax, 2
  002c0	5d		 pop	 ebp
  002c1	c3		 ret	 0
$LN19@deflate_fa:

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  002c2	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002c9	74 38		 je	 SHORT $LN22@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  002cb	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002ce	85 c0		 test	 eax, eax
  002d0	78 07		 js	 SHORT $LN32@deflate_fa
  002d2	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002d5	03 d0		 add	 edx, eax
  002d7	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  002d9	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  002db	2b c8		 sub	 ecx, eax
  002dd	6a 00		 push	 0
  002df	51		 push	 ecx
  002e0	8b ce		 mov	 ecx, esi
  002e2	e8 00 00 00 00	 call	 __tr_flush_block
  002e7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002ea	83 c4 08	 add	 esp, 8
  002ed	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ef	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002f2	e8 00 00 00 00	 call	 _flush_pending
  002f7	8b 06		 mov	 eax, DWORD PTR [esi]
  002f9	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  002fd	0f 84 62 ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:
  00303	5f		 pop	 edi

; 1917 :     return block_done;
; 1918 : }

  00304	5e		 pop	 esi
  00305	b8 01 00 00 00	 mov	 eax, 1
  0030a	5b		 pop	 ebx
  0030b	5d		 pop	 ebp
  0030c	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1346 = -8						; size = 4
tv1338 = -4						; size = 4
_max_insert$1$ = 8					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL57@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00016	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0001b	73 21		 jae	 SHORT $LN10@deflate_sl

; 1941 :             fill_window(s);

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00024	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00027	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0002c	73 08		 jae	 SHORT $LN9@deflate_sl
  0002e	85 db		 test	 ebx, ebx
  00030	0f 84 24 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00036	85 c0		 test	 eax, eax
  00038	0f 84 d1 02 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  0003e	33 ff		 xor	 edi, edi

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  00040	83 f8 03	 cmp	 eax, 3
  00043	72 45		 jb	 SHORT $LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00045	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00048	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0004b	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0004e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00051	d3 e2		 shl	 edx, cl
  00053	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00058	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0005b	33 d0		 xor	 edx, eax
  0005d	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00066	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00069	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  0006d	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00071	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00074	8b ca		 mov	 ecx, edx
  00076	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00079	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007c	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  00080	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00083	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00086	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  0008a	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 1959 :         s->match_length = MIN_MATCH-1;

  0008d	ba 02 00 00 00	 mov	 edx, 2
  00092	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00095	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  00098	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0009b	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000a2	85 ff		 test	 edi, edi
  000a4	74 54		 je	 SHORT $LN13@deflate_sl
  000a6	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  000ac	73 4c		 jae	 SHORT $LN13@deflate_sl
  000ae	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  000b1	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b4	2b cf		 sub	 ecx, edi
  000b6	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000bb	3b c8		 cmp	 ecx, eax
  000bd	77 3b		 ja	 SHORT $LN13@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  000bf	57		 push	 edi
  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 _longest_match
  000c6	83 c4 08	 add	 esp, 8
  000c9	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000cc	8b d0		 mov	 edx, eax
  000ce	83 f8 05	 cmp	 eax, 5
  000d1	77 27		 ja	 SHORT $LN13@deflate_sl
  000d3	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000da	74 12		 je	 SHORT $LN14@deflate_sl
  000dc	83 f8 03	 cmp	 eax, 3
  000df	75 19		 jne	 SHORT $LN13@deflate_sl
  000e1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000e4	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ec	76 0c		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  000ee	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  000f5	ba 02 00 00 00	 mov	 edx, 2
$LN13@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000fa	8b 5e 78	 mov	 ebx, DWORD PTR [esi+120]
  000fd	83 fb 03	 cmp	 ebx, 3
  00100	0f 82 5d 01 00
	00		 jb	 $LN51@deflate_sl
  00106	3b d3		 cmp	 edx, ebx
  00108	0f 87 55 01 00
	00		 ja	 $LN51@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  0010e	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  00111	80 eb 03	 sub	 bl, 3
  00114	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00117	83 c7 fd	 add	 edi, -3			; fffffffdH
  0011a	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00120	03 f9		 add	 edi, ecx
  00122	66 2b 4e 64	 sub	 cx, WORD PTR [esi+100]
  00126	66 49		 dec	 cx
  00128	89 7d 08	 mov	 DWORD PTR _max_insert$1$[ebp], edi
  0012b	0f b7 d1	 movzx	 edx, cx
  0012e	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00134	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00138	81 c2 ff ff 00
	00		 add	 edx, 65535		; 0000ffffH
  0013e	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00144	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0014a	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0014d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00152	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00158	0f b6 c3	 movzx	 eax, bl
  0015b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00162	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  0016a	0f b7 c2	 movzx	 eax, dx
  0016d	66 3b d1	 cmp	 dx, cx
  00170	73 08		 jae	 SHORT $LN30@deflate_sl
  00172	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00178	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  0017a	c1 e8 07	 shr	 eax, 7
  0017d	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  00183	0f b6 c0	 movzx	 eax, al
  00186	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0018e	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  00194	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00197	48		 dec	 eax
  00198	89 45 f8	 mov	 DWORD PTR tv1346[ebp], eax
  0019b	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001a1	89 45 fc	 mov	 DWORD PTR tv1338[ebp], eax
  001a4	b8 01 00 00 00	 mov	 eax, 1
  001a9	2b c1		 sub	 eax, ecx
  001ab	01 46 74	 add	 DWORD PTR [esi+116], eax

; 2001 :             s->prev_length -= 2;

  001ae	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001b1	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LL7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  001b4	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001b7	43		 inc	 ebx
  001b8	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  001bb	3b df		 cmp	 ebx, edi
  001bd	77 3f		 ja	 SHORT $LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  001bf	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001c2	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001c5	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001c8	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001cb	0f b6 44 18 02	 movzx	 eax, BYTE PTR [eax+ebx+2]
  001d0	d3 e7		 shl	 edi, cl
  001d2	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001d5	33 f8		 xor	 edi, eax
  001d7	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001da	23 d3		 and	 edx, ebx
  001dc	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001df	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  001e2	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  001e6	8b 7d 08	 mov	 edi, DWORD PTR _max_insert$1$[ebp]
  001e9	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001ed	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001f0	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001f3	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001f7	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001fb	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  001fe	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  00202	75 b0		 jne	 SHORT $LL7@deflate_sl

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;
; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  00204	8b 45 fc	 mov	 eax, DWORD PTR tv1338[ebp]
  00207	43		 inc	 ebx
  00208	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0020f	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00216	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00219	3b 45 f8	 cmp	 eax, DWORD PTR tv1346[ebp]
  0021c	0f 85 ee fd ff
	ff		 jne	 $LL57@deflate_sl
  00222	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00225	85 c0		 test	 eax, eax
  00227	78 07		 js	 SHORT $LN32@deflate_sl
  00229	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0022c	03 d0		 add	 edx, eax
  0022e	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00230	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  00232	2b d8		 sub	 ebx, eax
  00234	8b ce		 mov	 ecx, esi
  00236	6a 00		 push	 0
  00238	53		 push	 ebx
  00239	e8 00 00 00 00	 call	 __tr_flush_block
  0023e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00241	83 c4 08	 add	 esp, 8
  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00246	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00249	e8 00 00 00 00	 call	 _flush_pending
  0024e	8b 06		 mov	 eax, DWORD PTR [esi]
  00250	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00254	0f 85 b6 fd ff
	ff		 jne	 $LL57@deflate_sl
$LN48@deflate_sl:
  0025a	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  0025b	5e		 pop	 esi
  0025c	33 c0		 xor	 eax, eax
  0025e	5b		 pop	 ebx
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
$LN51@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00263	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00267	0f 84 90 00 00
	00		 je	 $LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  0026d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00270	33 ff		 xor	 edi, edi
  00272	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00275	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00279	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0027f	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00285	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00289	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0028f	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00295	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00298	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0029e	0f b6 c2	 movzx	 eax, dl
  002a1	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002a9	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002af	48		 dec	 eax
  002b0	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2020 :             if (bflush) {

  002b6	75 2f		 jne	 SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  002b8	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002bb	85 c9		 test	 ecx, ecx
  002bd	78 07		 js	 SHORT $LN34@deflate_sl
  002bf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002c2	03 d1		 add	 edx, ecx
  002c4	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  002c6	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  002c8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002cb	2b c1		 sub	 eax, ecx
  002cd	8b ce		 mov	 ecx, esi
  002cf	6a 00		 push	 0
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 __tr_flush_block
  002d7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002da	83 c4 08	 add	 esp, 8
  002dd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002df	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002e2	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;
; 2024 :             s->lookahead--;
; 2025 :             if (s->strm->avail_out == 0) return need_more;

  002e7	8b 06		 mov	 eax, DWORD PTR [esi]
  002e9	ff 46 6c	 inc	 DWORD PTR [esi+108]
  002ec	ff 4e 74	 dec	 DWORD PTR [esi+116]
  002ef	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  002f2	0f 84 62 ff ff
	ff		 je	 $LN48@deflate_sl

; 2026 :         } else {

  002f8	e9 13 fd ff ff	 jmp	 $LL57@deflate_sl
$LN20@deflate_sl:

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  002fd	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 2032 :             s->lookahead--;

  00300	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00303	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 2033 :         }
; 2034 :     }

  0030a	e9 01 fd ff ff	 jmp	 $LL57@deflate_sl
$LN46@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  0030f	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00313	74 3f		 je	 SHORT $LN24@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00315	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00318	33 ff		 xor	 edi, edi
  0031a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0031d	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00321	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00327	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0032d	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00331	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00337	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0033d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00340	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00346	0f b6 c2	 movzx	 eax, dl
  00349	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2039 :         s->match_available = 0;

  00351	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN24@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00354	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00357	b8 02 00 00 00	 mov	 eax, 2
  0035c	3b c8		 cmp	 ecx, eax
  0035e	0f 42 c1	 cmovb	 eax, ecx
  00361	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 2042 :     if (flush == Z_FINISH) {

  00367	83 fb 04	 cmp	 ebx, 4
  0036a	75 40		 jne	 SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  0036c	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0036f	85 c0		 test	 eax, eax
  00371	78 07		 js	 SHORT $LN38@deflate_sl
  00373	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00376	03 d0		 add	 edx, eax
  00378	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  0037a	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  0037c	2b c8		 sub	 ecx, eax
  0037e	6a 01		 push	 1
  00380	51		 push	 ecx
  00381	8b ce		 mov	 ecx, esi
  00383	e8 00 00 00 00	 call	 __tr_flush_block
  00388	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0038b	83 c4 08	 add	 esp, 8
  0038e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00390	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00393	e8 00 00 00 00	 call	 _flush_pending
  00398	8b 06		 mov	 eax, DWORD PTR [esi]
  0039a	33 c9		 xor	 ecx, ecx
  0039c	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  0039d	5e		 pop	 esi
  0039e	5b		 pop	 ebx
  0039f	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  003a2	0f 95 c1	 setne	 cl
  003a5	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c3		 ret	 0
$LN25@deflate_sl:

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  003ac	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003b3	74 38		 je	 SHORT $LN28@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  003b5	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003b8	85 c0		 test	 eax, eax
  003ba	78 07		 js	 SHORT $LN40@deflate_sl
  003bc	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003bf	03 d0		 add	 edx, eax
  003c1	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  003c3	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  003c5	2b c8		 sub	 ecx, eax
  003c7	6a 00		 push	 0
  003c9	51		 push	 ecx
  003ca	8b ce		 mov	 ecx, esi
  003cc	e8 00 00 00 00	 call	 __tr_flush_block
  003d1	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  003d4	83 c4 08	 add	 esp, 8
  003d7	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  003da	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003dc	e8 00 00 00 00	 call	 _flush_pending
  003e1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003e3	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  003e7	0f 84 6d fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:
  003ed	5f		 pop	 edi

; 2048 :     return block_done;
; 2049 : }

  003ee	5e		 pop	 esi
  003ef	b8 01 00 00 00	 mov	 eax, 1
  003f4	5b		 pop	 ebx
  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv981 = -8						; size = 4
tv978 = -8						; size = 4
_flush$1$ = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 55 fc	 mov	 DWORD PTR _flush$1$[ebp], edx
  0000c	8b f1		 mov	 esi, ecx
$LN48@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  0000e	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
$LL2@deflate_rl:
  00011	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00014	8b c7		 mov	 eax, edi
  00016	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0001c	77 27		 ja	 SHORT $LN10@deflate_rl

; 2071 :             fill_window(s);

  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 _fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00025	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _flush$1$[ebp]
  0002b	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  00031	77 08		 ja	 SHORT $LN9@deflate_rl
  00033	85 c9		 test	 ecx, ecx
  00035	0f 84 99 01 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  0003b	8b c7		 mov	 eax, edi
  0003d	85 ff		 test	 edi, edi
  0003f	0f 84 98 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  00045	33 d2		 xor	 edx, edx
  00047	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  0004e	83 f8 03	 cmp	 eax, 3
  00051	72 6d		 jb	 SHORT $LN14@deflate_rl
  00053	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00056	85 c9		 test	 ecx, ecx
  00058	74 66		 je	 SHORT $LN14@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  0005a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0005d	03 c1		 add	 eax, ecx
  0005f	89 45 f8	 mov	 DWORD PTR tv978[ebp], eax

; 2082 :             prev = *scan;

  00062	8a 48 ff	 mov	 cl, BYTE PTR [eax-1]

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00065	3a 08		 cmp	 cl, BYTE PTR [eax]
  00067	75 57		 jne	 SHORT $LN14@deflate_rl
  00069	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  0006c	75 52		 jne	 SHORT $LN14@deflate_rl
  0006e	83 c0 02	 add	 eax, 2
  00071	3a 08		 cmp	 cl, BYTE PTR [eax]
  00073	75 4b		 jne	 SHORT $LN14@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  00075	8b 55 f8	 mov	 edx, DWORD PTR tv978[ebp]
  00078	81 c2 02 01 00
	00		 add	 edx, 258		; 00000102H
  0007e	66 90		 npad	 2
$LL7@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  00080	40		 inc	 eax
  00081	3a 08		 cmp	 cl, BYTE PTR [eax]
  00083	75 27		 jne	 SHORT $LN13@deflate_rl
  00085	40		 inc	 eax
  00086	3a 08		 cmp	 cl, BYTE PTR [eax]
  00088	75 22		 jne	 SHORT $LN13@deflate_rl
  0008a	40		 inc	 eax
  0008b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0008d	75 1d		 jne	 SHORT $LN13@deflate_rl
  0008f	40		 inc	 eax
  00090	3a 08		 cmp	 cl, BYTE PTR [eax]
  00092	75 18		 jne	 SHORT $LN13@deflate_rl
  00094	40		 inc	 eax
  00095	3a 08		 cmp	 cl, BYTE PTR [eax]
  00097	75 13		 jne	 SHORT $LN13@deflate_rl
  00099	40		 inc	 eax
  0009a	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009c	75 0e		 jne	 SHORT $LN13@deflate_rl
  0009e	40		 inc	 eax
  0009f	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a1	75 09		 jne	 SHORT $LN13@deflate_rl
  000a3	40		 inc	 eax
  000a4	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a6	75 04		 jne	 SHORT $LN13@deflate_rl
  000a8	3b c2		 cmp	 eax, edx
  000aa	72 d4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000ac	2b c2		 sub	 eax, edx
  000ae	8d 90 02 01 00
	00		 lea	 edx, DWORD PTR [eax+258]
  000b4	89 56 60	 mov	 DWORD PTR [esi+96], edx

; 2092 :                 if (s->match_length > s->lookahead)

  000b7	3b d7		 cmp	 edx, edi
  000b9	76 05		 jbe	 SHORT $LN14@deflate_rl

; 2093 :                     s->match_length = s->lookahead;

  000bb	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  000be	8b d7		 mov	 edx, edi
$LN14@deflate_rl:

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  000c0	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  000c3	83 fa 03	 cmp	 edx, 3
  000c6	72 77		 jb	 SHORT $LN15@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000c8	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000ce	2c 03		 sub	 al, 3
  000d0	89 45 f8	 mov	 DWORD PTR tv981[ebp], eax
  000d3	ba 01 00 00 00	 mov	 edx, 1
  000d8	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000de	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  000e2	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000e8	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000ee	8b 55 f8	 mov	 edx, DWORD PTR tv981[ebp]
  000f1	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000f4	33 c9		 xor	 ecx, ecx
  000f6	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000fc	0f b6 c2	 movzx	 eax, dl
  000ff	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00106	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  0010e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR __dist_code
  00115	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0011d	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00123	48		 dec	 eax
  00124	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  0012a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0012d	0f 94 c1	 sete	 cl

; 2105 :             s->strstart += s->match_length;
; 2106 :             s->match_length = 0;

  00130	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00137	29 46 74	 sub	 DWORD PTR [esi+116], eax
  0013a	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 2107 :         } else {

  0013d	eb 53		 jmp	 SHORT $LN47@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0013f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00142	33 ff		 xor	 edi, edi
  00144	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00147	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0014a	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00150	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00156	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  0015a	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00160	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00166	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00169	33 c9		 xor	 ecx, ecx
  0016b	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00171	0f b6 c2	 movzx	 eax, dl
  00174	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  0017c	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00182	48		 dec	 eax
  00183	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  00189	0f 94 c1	 sete	 cl

; 2111 :             s->lookahead--;

  0018c	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2112 :             s->strstart++;

  0018f	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN47@deflate_rl:

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  00192	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00195	85 c9		 test	 ecx, ecx
  00197	0f 84 74 fe ff
	ff		 je	 $LL2@deflate_rl
  0019d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  001a0	85 c0		 test	 eax, eax
  001a2	78 07		 js	 SHORT $LN26@deflate_rl
  001a4	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001a7	03 d0		 add	 edx, eax
  001a9	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001ab	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001ad	2b f8		 sub	 edi, eax
  001af	8b ce		 mov	 ecx, esi
  001b1	6a 00		 push	 0
  001b3	57		 push	 edi
  001b4	e8 00 00 00 00	 call	 __tr_flush_block
  001b9	8b 03		 mov	 eax, DWORD PTR [ebx]
  001bb	83 c4 08	 add	 esp, 8
  001be	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001c0	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001c3	e8 00 00 00 00	 call	 _flush_pending
  001c8	8b 06		 mov	 eax, DWORD PTR [esi]
  001ca	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001ce	0f 85 3a fe ff
	ff		 jne	 $LN48@deflate_rl
$LN37@deflate_rl:
  001d4	5f		 pop	 edi

; 2123 :     return block_done;
; 2124 : }

  001d5	5e		 pop	 esi
  001d6	33 c0		 xor	 eax, eax
  001d8	5b		 pop	 ebx
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
$LN36@deflate_rl:

; 2115 :     }
; 2116 :     s->insert = 0;

  001dd	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  001e7	83 f9 04	 cmp	 ecx, 4
  001ea	75 43		 jne	 SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  001ec	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  001ef	85 c9		 test	 ecx, ecx
  001f1	78 07		 js	 SHORT $LN28@deflate_rl
  001f3	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001f6	03 d1		 add	 edx, ecx
  001f8	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  001fa	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  001fc	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001ff	2b c1		 sub	 eax, ecx
  00201	8b ce		 mov	 ecx, esi
  00203	6a 01		 push	 1
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 __tr_flush_block
  0020b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0020e	83 c4 08	 add	 esp, 8
  00211	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00213	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00216	e8 00 00 00 00	 call	 _flush_pending
  0021b	8b 06		 mov	 eax, DWORD PTR [esi]
  0021d	33 c9		 xor	 ecx, ecx
  0021f	5f		 pop	 edi

; 2123 :     return block_done;
; 2124 : }

  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00225	0f 95 c1	 setne	 cl
  00228	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
$LN19@deflate_rl:

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  0022f	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  00236	74 3b		 je	 SHORT $LN22@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  00238	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0023b	85 c9		 test	 ecx, ecx
  0023d	78 07		 js	 SHORT $LN30@deflate_rl
  0023f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00242	03 d1		 add	 edx, ecx
  00244	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  00246	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  00248	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0024b	2b c1		 sub	 eax, ecx
  0024d	8b ce		 mov	 ecx, esi
  0024f	6a 00		 push	 0
  00251	50		 push	 eax
  00252	e8 00 00 00 00	 call	 __tr_flush_block
  00257	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0025a	83 c4 08	 add	 esp, 8
  0025d	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00260	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00262	e8 00 00 00 00	 call	 _flush_pending
  00267	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00269	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0026d	0f 84 61 ff ff
	ff		 je	 $LN37@deflate_rl
$LN22@deflate_rl:
  00273	5f		 pop	 edi

; 2123 :     return block_done;
; 2124 : }

  00274	5e		 pop	 esi
  00275	b8 01 00 00 00	 mov	 eax, 1
  0027a	5b		 pop	 ebx
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\prj\visiator_windows\v26\zlib\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2133 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00007	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000b	75 11		 jne	 SHORT $LN6@deflate_hu

; 2139 :             fill_window(s);

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 _fill_window

; 2140 :             if (s->lookahead == 0) {

  00014	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00018	0f 84 98 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2142 :                     return need_more;
; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00021	33 db		 xor	 ebx, ebx
  00023	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00026	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002d	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00030	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00036	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0003c	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00040	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00046	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0004c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0004f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00055	0f b6 c2	 movzx	 eax, dl
  00058	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2151 :         s->lookahead--;
; 2152 :         s->strstart++;

  00060	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00063	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00069	41		 inc	 ecx
  0006a	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0006d	48		 dec	 eax
  0006e	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  00071	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00077	75 8e		 jne	 SHORT $LL2@deflate_hu
  00079	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007c	85 c0		 test	 eax, eax
  0007e	78 07		 js	 SHORT $LN15@deflate_hu
  00080	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00083	03 d0		 add	 edx, eax
  00085	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  00087	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  00089	2b c8		 sub	 ecx, eax
  0008b	6a 00		 push	 0
  0008d	51		 push	 ecx
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 __tr_flush_block
  00095	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00098	83 c4 08	 add	 esp, 8
  0009b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000a0	e8 00 00 00 00	 call	 _flush_pending
  000a5	8b 06		 mov	 eax, DWORD PTR [esi]
  000a7	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  000aa	0f 85 57 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000b0	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  000b1	5e		 pop	 esi
  000b2	33 c0		 xor	 eax, eax
  000b4	5b		 pop	 ebx
  000b5	c3		 ret	 0
$LN23@deflate_hu:

; 2141 :                 if (flush == Z_NO_FLUSH)

  000b6	85 ff		 test	 edi, edi
  000b8	74 f6		 je	 SHORT $LN24@deflate_hu

; 2154 :     }
; 2155 :     s->insert = 0;

  000ba	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  000c4	83 ff 04	 cmp	 edi, 4
  000c7	75 40		 jne	 SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  000c9	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000cc	85 c9		 test	 ecx, ecx
  000ce	78 07		 js	 SHORT $LN17@deflate_hu
  000d0	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d3	03 d1		 add	 edx, ecx
  000d5	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000d7	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000d9	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000dc	2b c1		 sub	 eax, ecx
  000de	8b ce		 mov	 ecx, esi
  000e0	6a 01		 push	 1
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 __tr_flush_block
  000e8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000eb	83 c4 08	 add	 esp, 8
  000ee	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f0	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f3	e8 00 00 00 00	 call	 _flush_pending
  000f8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000fa	33 c0		 xor	 eax, eax
  000fc	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00102	0f 95 c0	 setne	 al
  00105	83 c0 02	 add	 eax, 2
  00108	c3		 ret	 0
$LN10@deflate_hu:

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00109	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  00110	74 3b		 je	 SHORT $LN13@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00112	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00115	85 c9		 test	 ecx, ecx
  00117	78 07		 js	 SHORT $LN19@deflate_hu
  00119	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0011c	03 d1		 add	 edx, ecx
  0011e	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  00120	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  00122	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00125	2b c1		 sub	 eax, ecx
  00127	8b ce		 mov	 ecx, esi
  00129	6a 00		 push	 0
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 __tr_flush_block
  00131	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00134	83 c4 08	 add	 esp, 8
  00137	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00139	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0013c	e8 00 00 00 00	 call	 _flush_pending
  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00147	0f 84 63 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:
  0014d	5f		 pop	 edi

; 2162 :     return block_done;
; 2163 : }

  0014e	5e		 pop	 esi
  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	5b		 pop	 ebx
  00155	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
